diff --git a/buildSrc/src/main/java/com/synopsys/integration/detect/docs/GenerateDocsTask.java b/buildSrc/src/main/java/com/synopsys/integration/detect/docs/GenerateDocsTask.java
index 4397818699..7049448c5c 100644
--- a/buildSrc/src/main/java/com/synopsys/integration/detect/docs/GenerateDocsTask.java
+++ b/buildSrc/src/main/java/com/synopsys/integration/detect/docs/GenerateDocsTask.java
@@ -239,7 +239,8 @@ private String getGroupLocation(Map<String, String> groupLocationMap, String gro
             }
 
             if (lookup.containsKey(optionGroup) && !superGroup.equals(lookup.get(optionGroup))) {
-                throw new RuntimeException(String.format("The created detect help JSON had a key '%s' whose super key '%s' did not match a different options super key in the same key '%s'.",
+                throw new RuntimeException(String.format(
+                    "The created detect help JSON had a key '%s' whose super key '%s' did not match a different options super key in the same key '%s'.",
                     optionGroup,
                     superGroup,
                     lookup.get(optionGroup)
diff --git a/common/src/main/java/com/synopsys/integration/common/util/Bds.java b/common/src/main/java/com/synopsys/integration/common/util/Bds.java
index f3d8409284..621efb07fa 100644
--- a/common/src/main/java/com/synopsys/integration/common/util/Bds.java
+++ b/common/src/main/java/com/synopsys/integration/common/util/Bds.java
@@ -28,8 +28,7 @@ public Bds(Stream<T> stream) {
         this.stream = stream;
     }
 
-    public <U extends Comparable<? super U>> Bds<T> sortedBy(
-        Function<? super T, ? extends U> keyExtractor) {
+    public <U extends Comparable<? super U>> Bds<T> sortedBy(Function<? super T, ? extends U> keyExtractor) {
         Objects.requireNonNull(keyExtractor);
         stream = stream.sorted(Comparator.comparing(keyExtractor));
         return this;
@@ -88,8 +87,10 @@ public void forEach(Consumer<T> consumer) {
         return stream.collect(Collectors.groupingBy(classifier));
     }
 
-    public <K, U> Map<K, U> toMap(Function<? super T, ? extends K> keyMapper,
-        Function<? super T, ? extends U> valueMapper) {
+    public <K, U> Map<K, U> toMap(
+        Function<? super T, ? extends K> keyMapper,
+        Function<? super T, ? extends U> valueMapper
+    ) {
         return stream.collect(Collectors.toMap(keyMapper, valueMapper));
     }
 
diff --git a/configuration/src/main/java/com/synopsys/integration/configuration/config/InvalidPropertyException.java b/configuration/src/main/java/com/synopsys/integration/configuration/config/InvalidPropertyException.java
index 8a7162e464..b99efbc6e4 100644
--- a/configuration/src/main/java/com/synopsys/integration/configuration/config/InvalidPropertyException.java
+++ b/configuration/src/main/java/com/synopsys/integration/configuration/config/InvalidPropertyException.java
@@ -4,7 +4,11 @@
 
 public class InvalidPropertyException extends RuntimeException {
     public InvalidPropertyException(String propertyKey, String propertySourceName, ValueParseException innerException) {
-        super(String.format("The key '%s' in property source '%s' contained a value that could not be reasonably converted to the properties type. The exception was: %s", propertyKey, propertySourceName,
-            innerException.getLocalizedMessage() != null ? innerException.getLocalizedMessage() : "Unknown"), innerException);
+        super(String.format(
+            "The key '%s' in property source '%s' contained a value that could not be reasonably converted to the properties type. The exception was: %s",
+            propertyKey,
+            propertySourceName,
+            innerException.getLocalizedMessage() != null ? innerException.getLocalizedMessage() : "Unknown"
+        ), innerException);
     }
 }
diff --git a/configuration/src/main/java/com/synopsys/integration/configuration/config/PropertyConfiguration.java b/configuration/src/main/java/com/synopsys/integration/configuration/config/PropertyConfiguration.java
index 5611240532..7f004c2996 100644
--- a/configuration/src/main/java/com/synopsys/integration/configuration/config/PropertyConfiguration.java
+++ b/configuration/src/main/java/com/synopsys/integration/configuration/config/PropertyConfiguration.java
@@ -100,7 +100,7 @@ public PropertyConfiguration(@NotNull List<PropertySource> orderedPropertySource
     @NotNull
     public <V, R> Optional<V> getProvidedParsedValue(@NotNull TypedProperty<V, R> property) throws InvalidPropertyException {
         assertPropertyNotNull(property);
-        
+
         PropertyValue<V> value = valueFromCache(property);
         Optional<ValueParseException> parseException = value.getException();
         Optional<PropertyResolutionInfo> propertyResolutionInfo = value.getResolutionInfo();
diff --git a/configuration/src/main/java/com/synopsys/integration/configuration/config/resolution/PropertyResolutionInfo.java b/configuration/src/main/java/com/synopsys/integration/configuration/config/resolution/PropertyResolutionInfo.java
index 9cafe138f7..4a23fc3d8a 100644
--- a/configuration/src/main/java/com/synopsys/integration/configuration/config/resolution/PropertyResolutionInfo.java
+++ b/configuration/src/main/java/com/synopsys/integration/configuration/config/resolution/PropertyResolutionInfo.java
@@ -5,11 +5,11 @@
 
 public class PropertyResolutionInfo {
     @NotNull
-    private String source;
+    private final String source;
     @NotNull
-    private String origin;
+    private final String origin;
     @NotNull
-    private String raw;
+    private final String raw;
 
     public PropertyResolutionInfo(@NotNull String source, @NotNull String origin, @NotNull String raw) {
         Assert.notNull(source, "Source cannot be null.");
diff --git a/configuration/src/main/java/com/synopsys/integration/configuration/config/resolution/SourcePropertyResolution.java b/configuration/src/main/java/com/synopsys/integration/configuration/config/resolution/SourcePropertyResolution.java
index b18ca29a06..f59fe348e1 100644
--- a/configuration/src/main/java/com/synopsys/integration/configuration/config/resolution/SourcePropertyResolution.java
+++ b/configuration/src/main/java/com/synopsys/integration/configuration/config/resolution/SourcePropertyResolution.java
@@ -7,7 +7,7 @@
 
 public class SourcePropertyResolution extends PropertyResolution {
     @NotNull
-    private PropertyResolutionInfo propertyResolutionInfo;
+    private final PropertyResolutionInfo propertyResolutionInfo;
 
     public SourcePropertyResolution(@NotNull PropertyResolutionInfo propertyResolutionInfo) {
         Assert.notNull(propertyResolutionInfo, "Cannot create a source property resolution without supplying property info, use NoPropertyResolution if this was intentional.");
diff --git a/configuration/src/main/java/com/synopsys/integration/configuration/parse/ListValueParser.java b/configuration/src/main/java/com/synopsys/integration/configuration/parse/ListValueParser.java
index 586e81ef75..bc381fc1aa 100644
--- a/configuration/src/main/java/com/synopsys/integration/configuration/parse/ListValueParser.java
+++ b/configuration/src/main/java/com/synopsys/integration/configuration/parse/ListValueParser.java
@@ -32,7 +32,8 @@ public ListValueParser(@NotNull ValueParser<T> valueParser, @NotNull String deli
 
             if (StringUtils.isBlank(trimmedElement)) {
                 throw new ValueParseException(rawValue, "List",
-                    String.format("Failed to parse list '%s'. The list must be comma separated and each element in the list must not be empty (at least one character that is not whitespace).", rawValue));
+                    String.format("Failed to parse list '%s'. The list must be comma separated and each element in the list must not be empty (at least one character that is not whitespace).", rawValue)
+                );
             } else {
                 parsedValues.add(valueParser.parse(trimmedElement));
             }
diff --git a/configuration/src/main/java/com/synopsys/integration/configuration/property/PropertyBuilder.java b/configuration/src/main/java/com/synopsys/integration/configuration/property/PropertyBuilder.java
index 799e3c773d..f5f54da3e4 100644
--- a/configuration/src/main/java/com/synopsys/integration/configuration/property/PropertyBuilder.java
+++ b/configuration/src/main/java/com/synopsys/integration/configuration/property/PropertyBuilder.java
@@ -82,5 +82,4 @@ public P build() {
         return detectProperty;
     }
 
-    ;
 }
\ No newline at end of file
diff --git a/configuration/src/main/java/com/synopsys/integration/configuration/property/base/TypedProperty.java b/configuration/src/main/java/com/synopsys/integration/configuration/property/base/TypedProperty.java
index 258a12c758..8e14caec88 100644
--- a/configuration/src/main/java/com/synopsys/integration/configuration/property/base/TypedProperty.java
+++ b/configuration/src/main/java/com/synopsys/integration/configuration/property/base/TypedProperty.java
@@ -6,9 +6,9 @@
 import org.jetbrains.annotations.NotNull;
 
 import com.synopsys.integration.configuration.parse.ValueParser;
+import com.synopsys.integration.configuration.property.Property;
 import com.synopsys.integration.configuration.property.deprecation.DeprecatedValueInfo;
 import com.synopsys.integration.configuration.property.deprecation.DeprecatedValueUsage;
-import com.synopsys.integration.configuration.property.Property;
 
 /**
  * A property that is associated with a single type.
diff --git a/configuration/src/main/java/com/synopsys/integration/configuration/property/base/ValuedAlikeListProperty.java b/configuration/src/main/java/com/synopsys/integration/configuration/property/base/ValuedAlikeListProperty.java
index 2cb74ae500..b481fbb3f9 100644
--- a/configuration/src/main/java/com/synopsys/integration/configuration/property/base/ValuedAlikeListProperty.java
+++ b/configuration/src/main/java/com/synopsys/integration/configuration/property/base/ValuedAlikeListProperty.java
@@ -3,10 +3,8 @@
 import java.util.List;
 
 import org.jetbrains.annotations.NotNull;
-import org.jetbrains.annotations.Nullable;
 
 import com.synopsys.integration.configuration.parse.ValueParser;
-import com.synopsys.integration.configuration.util.PropertyUtils;
 
 /**
  * This is a property with a key and with a default value, it will always have a value.
diff --git a/configuration/src/main/java/com/synopsys/integration/configuration/property/types/bool/NullableBooleanProperty.java b/configuration/src/main/java/com/synopsys/integration/configuration/property/types/bool/NullableBooleanProperty.java
index fd22384d0b..e3e30d0796 100644
--- a/configuration/src/main/java/com/synopsys/integration/configuration/property/types/bool/NullableBooleanProperty.java
+++ b/configuration/src/main/java/com/synopsys/integration/configuration/property/types/bool/NullableBooleanProperty.java
@@ -4,7 +4,6 @@
 import org.jetbrains.annotations.Nullable;
 
 import com.synopsys.integration.configuration.property.base.NullableAlikeProperty;
-import com.synopsys.integration.configuration.property.base.NullableProperty;
 
 public class NullableBooleanProperty extends NullableAlikeProperty<Boolean> {
     public NullableBooleanProperty(@NotNull String key) {
diff --git a/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumallnone/list/AllEnumList.java b/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumallnone/list/AllEnumList.java
index 18110e5096..396e74ee24 100644
--- a/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumallnone/list/AllEnumList.java
+++ b/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumallnone/list/AllEnumList.java
@@ -2,8 +2,8 @@
 
 import java.util.List;
 
-import com.synopsys.integration.configuration.property.types.enumextended.ExtendedEnumValue;
 import com.synopsys.integration.configuration.property.types.enumallnone.enumeration.AllEnum;
+import com.synopsys.integration.configuration.property.types.enumextended.ExtendedEnumValue;
 
 public class AllEnumList<B extends Enum<B>> extends AllNoneEnumListBase<AllEnum, B> {
     public AllEnumList(List<ExtendedEnumValue<AllEnum, B>> providedValues, Class<B> enumClass) {
diff --git a/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumallnone/list/AllNoneEnumList.java b/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumallnone/list/AllNoneEnumList.java
index cc2698d260..51f4e4f681 100644
--- a/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumallnone/list/AllNoneEnumList.java
+++ b/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumallnone/list/AllNoneEnumList.java
@@ -2,8 +2,8 @@
 
 import java.util.List;
 
-import com.synopsys.integration.configuration.property.types.enumextended.ExtendedEnumValue;
 import com.synopsys.integration.configuration.property.types.enumallnone.enumeration.AllNoneEnum;
+import com.synopsys.integration.configuration.property.types.enumextended.ExtendedEnumValue;
 
 public class AllNoneEnumList<B extends Enum<B>> extends AllNoneEnumListBase<AllNoneEnum, B> {
     public AllNoneEnumList(List<ExtendedEnumValue<AllNoneEnum, B>> providedValues, Class<B> enumClass) {
diff --git a/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumallnone/list/NoneEnumList.java b/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumallnone/list/NoneEnumList.java
index cab40c4a1d..c6e11f85a2 100644
--- a/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumallnone/list/NoneEnumList.java
+++ b/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumallnone/list/NoneEnumList.java
@@ -2,8 +2,8 @@
 
 import java.util.List;
 
-import com.synopsys.integration.configuration.property.types.enumextended.ExtendedEnumValue;
 import com.synopsys.integration.configuration.property.types.enumallnone.enumeration.NoneEnum;
+import com.synopsys.integration.configuration.property.types.enumextended.ExtendedEnumValue;
 
 public class NoneEnumList<B extends Enum<B>> extends AllNoneEnumListBase<NoneEnum, B> {
     public NoneEnumList(List<ExtendedEnumValue<NoneEnum, B>> providedValues, Class<B> enumClass) {
diff --git a/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumallnone/property/AllEnumListProperty.java b/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumallnone/property/AllEnumListProperty.java
index 100b5ac840..3d24aadce0 100644
--- a/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumallnone/property/AllEnumListProperty.java
+++ b/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumallnone/property/AllEnumListProperty.java
@@ -7,7 +7,6 @@
 
 import com.synopsys.integration.configuration.property.types.enumallnone.enumeration.AllEnum;
 import com.synopsys.integration.configuration.property.types.enumallnone.list.AllEnumList;
-import com.synopsys.integration.configuration.property.types.enumextended.ExtendedEnumListProperty;
 import com.synopsys.integration.configuration.property.types.enumextended.ExtendedEnumListPropertyBase;
 import com.synopsys.integration.configuration.property.types.enumextended.ExtendedEnumValue;
 
diff --git a/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumextended/ExtendedEnumListPropertyBase.java b/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumextended/ExtendedEnumListPropertyBase.java
index 21c97d63d4..5356d6b301 100644
--- a/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumextended/ExtendedEnumListPropertyBase.java
+++ b/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumextended/ExtendedEnumListPropertyBase.java
@@ -11,7 +11,6 @@
 import com.synopsys.integration.configuration.parse.ListValueParser;
 import com.synopsys.integration.configuration.property.base.ValuedListProperty;
 import com.synopsys.integration.configuration.property.deprecation.DeprecatedValueUsage;
-import com.synopsys.integration.configuration.property.types.enumallnone.enumeration.AllNoneEnum;
 import com.synopsys.integration.configuration.util.EnumPropertyUtils;
 import com.synopsys.integration.configuration.util.PropertyUtils;
 
diff --git a/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumextended/ExtendedEnumProperty.java b/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumextended/ExtendedEnumProperty.java
index df1f53a117..2019f498c1 100644
--- a/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumextended/ExtendedEnumProperty.java
+++ b/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumextended/ExtendedEnumProperty.java
@@ -29,7 +29,7 @@ public ExtendedEnumProperty(@NotNull String key, @NotNull ExtendedEnumValue<E, B
     public static <E extends Enum<E>, B extends Enum<B>> PropertyBuilder<ExtendedEnumProperty<E, B>> newBuilderExtendedDefault(@NotNull String key, @NotNull E defaultValue, @NotNull Class<E> eClass, @NotNull Class<B> bClass) {
         return newBuilder(key, ExtendedEnumValue.ofExtendedValue(defaultValue), eClass, bClass);
     }
-    
+
     public static <E extends Enum<E>, B extends Enum<B>> PropertyBuilder<ExtendedEnumProperty<E, B>> newBuilderBaseDefault(@NotNull String key, @NotNull B defaultValue, @NotNull Class<E> eClass, @NotNull Class<B> bClass) {
         return newBuilder(key, ExtendedEnumValue.ofBaseValue(defaultValue), eClass, bClass);
     }
diff --git a/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumextended/NullableExtendedEnumProperty.java b/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumextended/NullableExtendedEnumProperty.java
index a82565d6ef..0efa621fd2 100644
--- a/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumextended/NullableExtendedEnumProperty.java
+++ b/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumextended/NullableExtendedEnumProperty.java
@@ -7,16 +7,17 @@
 import org.jetbrains.annotations.Nullable;
 
 import com.synopsys.integration.configuration.property.base.NullableAlikeProperty;
-import com.synopsys.integration.configuration.property.base.NullableProperty;
 import com.synopsys.integration.configuration.util.EnumPropertyUtils;
 
 public class NullableExtendedEnumProperty<E extends Enum<E>, B extends Enum<B>> extends NullableAlikeProperty<ExtendedEnumValue<E, B>> {
-    private List<String> allOptions;
-    private Class<B> bClass;
+    private final List<String> allOptions;
+    private final Class<B> bClass;
 
-    public NullableExtendedEnumProperty(@NotNull String key,
+    public NullableExtendedEnumProperty(
+        @NotNull String key,
         @NotNull Class<E> eClass,
-        @NotNull Class<B> bClass) {
+        @NotNull Class<B> bClass
+    ) {
         super(key, new ExtendedEnumValueParser<>(eClass, bClass));
         allOptions = new ArrayList<>();
         allOptions.addAll(EnumPropertyUtils.getEnumNames(eClass));
diff --git a/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enums/EnumValueParser.java b/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enums/EnumValueParser.java
index 37f88eeb5c..587177229a 100644
--- a/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enums/EnumValueParser.java
+++ b/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enums/EnumValueParser.java
@@ -10,7 +10,7 @@
 
 public class EnumValueParser<T extends Enum<T>> extends ValueParser<T> {
     private final Class<T> enumClass;
-    private SafeEnumValueParser<T> parser;
+    private final SafeEnumValueParser<T> parser;
 
     public EnumValueParser(@NotNull Class<T> enumClass) {
         this.enumClass = enumClass;
diff --git a/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enums/NullableEnumProperty.java b/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enums/NullableEnumProperty.java
index 1b43ebeaea..cbe425deda 100644
--- a/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enums/NullableEnumProperty.java
+++ b/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enums/NullableEnumProperty.java
@@ -6,7 +6,6 @@
 import org.jetbrains.annotations.Nullable;
 
 import com.synopsys.integration.configuration.property.base.NullableAlikeProperty;
-import com.synopsys.integration.configuration.property.base.NullableProperty;
 import com.synopsys.integration.configuration.util.EnumPropertyUtils;
 
 public class NullableEnumProperty<E extends Enum<E>> extends NullableAlikeProperty<E> {
diff --git a/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumsoft/NullableSoftEnumProperty.java b/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumsoft/NullableSoftEnumProperty.java
index e0f1d6febc..b7ae65c314 100644
--- a/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumsoft/NullableSoftEnumProperty.java
+++ b/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumsoft/NullableSoftEnumProperty.java
@@ -6,7 +6,6 @@
 import org.jetbrains.annotations.Nullable;
 
 import com.synopsys.integration.configuration.property.base.NullableAlikeProperty;
-import com.synopsys.integration.configuration.property.base.NullableProperty;
 import com.synopsys.integration.configuration.util.EnumPropertyUtils;
 
 public class NullableSoftEnumProperty<E extends Enum<E>> extends NullableAlikeProperty<SoftEnumValue<E>> {
diff --git a/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumsoft/SoftEnumListProperty.java b/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumsoft/SoftEnumListProperty.java
index 421fa29df4..2a6efc6545 100644
--- a/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumsoft/SoftEnumListProperty.java
+++ b/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumsoft/SoftEnumListProperty.java
@@ -7,7 +7,6 @@
 
 import com.synopsys.integration.configuration.parse.ListValueParser;
 import com.synopsys.integration.configuration.property.base.ValuedAlikeListProperty;
-import com.synopsys.integration.configuration.property.base.ValuedListProperty;
 import com.synopsys.integration.configuration.util.EnumPropertyUtils;
 import com.synopsys.integration.configuration.util.PropertyUtils;
 
diff --git a/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumsoft/SoftEnumProperty.java b/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumsoft/SoftEnumProperty.java
index 873aa7f8bd..11c6f7d32c 100644
--- a/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumsoft/SoftEnumProperty.java
+++ b/configuration/src/main/java/com/synopsys/integration/configuration/property/types/enumsoft/SoftEnumProperty.java
@@ -6,7 +6,6 @@
 import org.jetbrains.annotations.Nullable;
 
 import com.synopsys.integration.configuration.property.base.ValuedAlikeProperty;
-import com.synopsys.integration.configuration.property.base.ValuedProperty;
 import com.synopsys.integration.configuration.util.EnumPropertyUtils;
 
 public class SoftEnumProperty<E extends Enum<E>> extends ValuedAlikeProperty<SoftEnumValue<E>> {
diff --git a/configuration/src/main/java/com/synopsys/integration/configuration/property/types/integer/IntegerListProperty.java b/configuration/src/main/java/com/synopsys/integration/configuration/property/types/integer/IntegerListProperty.java
index c867e48004..f8f96a9b92 100644
--- a/configuration/src/main/java/com/synopsys/integration/configuration/property/types/integer/IntegerListProperty.java
+++ b/configuration/src/main/java/com/synopsys/integration/configuration/property/types/integer/IntegerListProperty.java
@@ -7,7 +7,6 @@
 
 import com.synopsys.integration.configuration.parse.ListValueParser;
 import com.synopsys.integration.configuration.property.base.ValuedAlikeListProperty;
-import com.synopsys.integration.configuration.property.base.ValuedListProperty;
 import com.synopsys.integration.configuration.util.PropertyUtils;
 
 public class IntegerListProperty extends ValuedAlikeListProperty<Integer> {
diff --git a/configuration/src/main/java/com/synopsys/integration/configuration/property/types/longs/LongListProperty.java b/configuration/src/main/java/com/synopsys/integration/configuration/property/types/longs/LongListProperty.java
index ebc5a5551b..597f11a361 100644
--- a/configuration/src/main/java/com/synopsys/integration/configuration/property/types/longs/LongListProperty.java
+++ b/configuration/src/main/java/com/synopsys/integration/configuration/property/types/longs/LongListProperty.java
@@ -7,7 +7,6 @@
 
 import com.synopsys.integration.configuration.parse.ListValueParser;
 import com.synopsys.integration.configuration.property.base.ValuedAlikeListProperty;
-import com.synopsys.integration.configuration.property.base.ValuedListProperty;
 import com.synopsys.integration.configuration.util.PropertyUtils;
 
 public class LongListProperty extends ValuedAlikeListProperty<Long> {
diff --git a/configuration/src/main/java/com/synopsys/integration/configuration/property/types/longs/NullableLongProperty.java b/configuration/src/main/java/com/synopsys/integration/configuration/property/types/longs/NullableLongProperty.java
index 86f6889dc1..6f270bc480 100644
--- a/configuration/src/main/java/com/synopsys/integration/configuration/property/types/longs/NullableLongProperty.java
+++ b/configuration/src/main/java/com/synopsys/integration/configuration/property/types/longs/NullableLongProperty.java
@@ -4,7 +4,6 @@
 import org.jetbrains.annotations.Nullable;
 
 import com.synopsys.integration.configuration.property.base.NullableAlikeProperty;
-import com.synopsys.integration.configuration.property.base.NullableProperty;
 
 public class NullableLongProperty extends NullableAlikeProperty<Long> {
     public NullableLongProperty(@NotNull String key) {
diff --git a/configuration/src/main/java/com/synopsys/integration/configuration/property/types/path/PathProperty.java b/configuration/src/main/java/com/synopsys/integration/configuration/property/types/path/PathProperty.java
index 7f26865c02..e88afb034f 100644
--- a/configuration/src/main/java/com/synopsys/integration/configuration/property/types/path/PathProperty.java
+++ b/configuration/src/main/java/com/synopsys/integration/configuration/property/types/path/PathProperty.java
@@ -3,7 +3,6 @@
 import org.jetbrains.annotations.NotNull;
 
 import com.synopsys.integration.configuration.property.base.ValuedAlikeProperty;
-import com.synopsys.integration.configuration.property.base.ValuedProperty;
 
 public class PathProperty extends ValuedAlikeProperty<PathValue> {
     public PathProperty(@NotNull String key, PathValue defaultValue) {
diff --git a/configuration/src/main/java/com/synopsys/integration/configuration/source/JavaPropertiesPropertySource.java b/configuration/src/main/java/com/synopsys/integration/configuration/source/JavaPropertiesPropertySource.java
index 568a359f68..fb423a5d93 100644
--- a/configuration/src/main/java/com/synopsys/integration/configuration/source/JavaPropertiesPropertySource.java
+++ b/configuration/src/main/java/com/synopsys/integration/configuration/source/JavaPropertiesPropertySource.java
@@ -11,8 +11,8 @@
 import com.synopsys.integration.configuration.util.KeyUtils;
 
 public class JavaPropertiesPropertySource implements PropertySource {
-    private String givenName;
-    private Map<String, String> normalizedPropertyMap;
+    private final String givenName;
+    private final Map<String, String> normalizedPropertyMap;
 
     public JavaPropertiesPropertySource(String givenName, Properties properties) {
         this.givenName = givenName;
diff --git a/configuration/src/main/java/com/synopsys/integration/configuration/source/MapPropertySource.java b/configuration/src/main/java/com/synopsys/integration/configuration/source/MapPropertySource.java
index 054696d3e5..e527120a1c 100644
--- a/configuration/src/main/java/com/synopsys/integration/configuration/source/MapPropertySource.java
+++ b/configuration/src/main/java/com/synopsys/integration/configuration/source/MapPropertySource.java
@@ -10,8 +10,8 @@
 import com.synopsys.integration.configuration.util.KeyUtils;
 
 public class MapPropertySource implements PropertySource {
-    private String givenName;
-    private Map<String, String> normalizedPropertyMap;
+    private final String givenName;
+    private final Map<String, String> normalizedPropertyMap;
 
     public MapPropertySource(String givenName, Map<String, String> underlyingMap) {
         this.givenName = givenName;
diff --git a/configuration/src/main/java/com/synopsys/integration/configuration/source/SpringConfigurationPropertySource.java b/configuration/src/main/java/com/synopsys/integration/configuration/source/SpringConfigurationPropertySource.java
index fde3db0c43..c2e26e74cb 100644
--- a/configuration/src/main/java/com/synopsys/integration/configuration/source/SpringConfigurationPropertySource.java
+++ b/configuration/src/main/java/com/synopsys/integration/configuration/source/SpringConfigurationPropertySource.java
@@ -20,8 +20,8 @@
 import com.synopsys.integration.common.util.Bds;
 
 public class SpringConfigurationPropertySource implements PropertySource {
-    private String name;
-    private IterableConfigurationPropertySource propertySource;
+    private final String name;
+    private final IterableConfigurationPropertySource propertySource;
     private final ConfigurablePropertyResolver configurablePropertyResolver;
 
     public SpringConfigurationPropertySource(String name, IterableConfigurationPropertySource propertySource, ConfigurablePropertyResolver configurablePropertyResolver) {
diff --git a/configuration/src/test/java/com/synopsys/integration/configuration/config/PropertyConfigurationTest.java b/configuration/src/test/java/com/synopsys/integration/configuration/config/PropertyConfigurationTest.java
index d6329e96a9..bb512915f7 100644
--- a/configuration/src/test/java/com/synopsys/integration/configuration/config/PropertyConfigurationTest.java
+++ b/configuration/src/test/java/com/synopsys/integration/configuration/config/PropertyConfigurationTest.java
@@ -23,7 +23,6 @@
 import com.synopsys.integration.configuration.property.base.NullableAlikeProperty;
 import com.synopsys.integration.configuration.property.base.PassthroughProperty;
 import com.synopsys.integration.configuration.property.base.ValuedAlikeProperty;
-import com.synopsys.integration.configuration.property.base.ValuedProperty;
 import com.synopsys.integration.configuration.source.PropertySource;
 
 public class PropertyConfigurationTest {
@@ -64,7 +63,8 @@ public void getValueOrNull() {
     public void getValueOrDefault() {
         ValuedAlikeProperty<String> propertyWithDefault = new ValuedTestProperty("example.key", "defaultValue");
         Assertions.assertEquals(propertyWithDefault.getDefaultValue(), configOf(Pair.of(propertyWithDefault.getKey(), UNKNOWN_VALUE)).getValueOrDefault(propertyWithDefault),
-            "An unknown value should fail to parse and the config should provide the default value.");
+            "An unknown value should fail to parse and the config should provide the default value."
+        );
     }
 
     @Test
diff --git a/configuration/src/test/java/com/synopsys/integration/configuration/config/SpringConfigurationPropertySourceTests.java b/configuration/src/test/java/com/synopsys/integration/configuration/config/SpringConfigurationPropertySourceTests.java
index abc4da7550..8354806f6e 100644
--- a/configuration/src/test/java/com/synopsys/integration/configuration/config/SpringConfigurationPropertySourceTests.java
+++ b/configuration/src/test/java/com/synopsys/integration/configuration/config/SpringConfigurationPropertySourceTests.java
@@ -9,7 +9,6 @@
 import org.springframework.mock.env.MockEnvironment;
 
 import com.synopsys.integration.configuration.property.base.NullableAlikeProperty;
-import com.synopsys.integration.configuration.property.base.NullableProperty;
 import com.synopsys.integration.configuration.property.types.string.NullableStringProperty;
 import com.synopsys.integration.configuration.source.PropertySource;
 import com.synopsys.integration.configuration.source.SpringConfigurationPropertySource;
diff --git a/configuration/src/test/java/com/synopsys/integration/configuration/property/PropertyTestHelpUtil.java b/configuration/src/test/java/com/synopsys/integration/configuration/property/PropertyTestHelpUtil.java
index cf26fcdaf2..5a6e454c33 100644
--- a/configuration/src/test/java/com/synopsys/integration/configuration/property/PropertyTestHelpUtil.java
+++ b/configuration/src/test/java/com/synopsys/integration/configuration/property/PropertyTestHelpUtil.java
@@ -60,20 +60,26 @@ private PropertyTestHelpUtil() {
 
     public static <T, V> void assertValidTypeDescription(NullableProperty<T, V> property) {
         assertHasTypeDescription(property);
-        Assertions.assertTrue(property.describeType().startsWith(NULLABLE_TYPE_DESCRIPTION_PREFIX),
-            String.format("%s is a %s so its type description should start with '%s'.", property.getClass().getSimpleName(), NullableProperty.class.getSimpleName(), NULLABLE_TYPE_DESCRIPTION_PREFIX));
+        Assertions.assertTrue(
+            property.describeType().startsWith(NULLABLE_TYPE_DESCRIPTION_PREFIX),
+            String.format("%s is a %s so its type description should start with '%s'.", property.getClass().getSimpleName(), NullableProperty.class.getSimpleName(), NULLABLE_TYPE_DESCRIPTION_PREFIX)
+        );
     }
 
     public static <T, V> void assertValidTypeDescription(ValuedProperty<T, V> property) {
         assertHasTypeDescription(property);
-        Assertions.assertFalse(property.describeType().startsWith(NULLABLE_TYPE_DESCRIPTION_PREFIX),
-            String.format("%s is a %s so its type description should not start with '%s'.", property.getClass().getSimpleName(), ValuedProperty.class.getSimpleName(), NULLABLE_TYPE_DESCRIPTION_PREFIX));
+        Assertions.assertFalse(
+            property.describeType().startsWith(NULLABLE_TYPE_DESCRIPTION_PREFIX),
+            String.format("%s is a %s so its type description should not start with '%s'.", property.getClass().getSimpleName(), ValuedProperty.class.getSimpleName(), NULLABLE_TYPE_DESCRIPTION_PREFIX)
+        );
     }
 
     public static <T, V> void assertValidTypeDescription(ValuedListProperty<T, V> property) {
         assertHasTypeDescription(property);
-        Assertions.assertTrue(property.describeType().endsWith(VALUED_TYPE_DESCRIPTION_POSTFIX),
-            String.format("%s is a %s so its type description should end with '%s'.", property.getClass().getSimpleName(), ValuedListProperty.class.getSimpleName(), VALUED_TYPE_DESCRIPTION_POSTFIX));
+        Assertions.assertTrue(
+            property.describeType().endsWith(VALUED_TYPE_DESCRIPTION_POSTFIX),
+            String.format("%s is a %s so its type description should end with '%s'.", property.getClass().getSimpleName(), ValuedListProperty.class.getSimpleName(), VALUED_TYPE_DESCRIPTION_POSTFIX)
+        );
     }
 
     private static <T, V> void assertHasTypeDescription(TypedProperty<T, V> property) {
diff --git a/configuration/src/test/java/com/synopsys/integration/configuration/property/types/bool/BooleanPropertiesTests.java b/configuration/src/test/java/com/synopsys/integration/configuration/property/types/bool/BooleanPropertiesTests.java
index b7dc0277d0..aa0ca3a613 100644
--- a/configuration/src/test/java/com/synopsys/integration/configuration/property/types/bool/BooleanPropertiesTests.java
+++ b/configuration/src/test/java/com/synopsys/integration/configuration/property/types/bool/BooleanPropertiesTests.java
@@ -14,11 +14,8 @@
 import com.synopsys.integration.configuration.config.PropertyConfiguration;
 import com.synopsys.integration.configuration.property.PropertyTestHelpUtil;
 import com.synopsys.integration.configuration.property.base.NullableAlikeProperty;
-import com.synopsys.integration.configuration.property.base.NullableProperty;
 import com.synopsys.integration.configuration.property.base.ValuedAlikeListProperty;
 import com.synopsys.integration.configuration.property.base.ValuedAlikeProperty;
-import com.synopsys.integration.configuration.property.base.ValuedListProperty;
-import com.synopsys.integration.configuration.property.base.ValuedProperty;
 
 // Simple glue sanity tests. Theoretically if Config is well tested and Parser is well tested, these will pass so they are not exhaustive.
 class BooleanPropertiesTests {
diff --git a/configuration/src/test/java/com/synopsys/integration/configuration/property/types/enumallnone/AllListPropertiesTests.java b/configuration/src/test/java/com/synopsys/integration/configuration/property/types/enumallnone/AllListPropertiesTests.java
index 511f303989..cc6a0f0890 100644
--- a/configuration/src/test/java/com/synopsys/integration/configuration/property/types/enumallnone/AllListPropertiesTests.java
+++ b/configuration/src/test/java/com/synopsys/integration/configuration/property/types/enumallnone/AllListPropertiesTests.java
@@ -11,7 +11,6 @@
 
 import com.synopsys.integration.configuration.config.InvalidPropertyException;
 import com.synopsys.integration.configuration.config.PropertyConfiguration;
-import com.synopsys.integration.configuration.parse.ValueParseException;
 import com.synopsys.integration.configuration.property.PropertyTestHelpUtil;
 import com.synopsys.integration.configuration.property.types.enumallnone.list.AllEnumList;
 import com.synopsys.integration.configuration.property.types.enumallnone.property.AllEnumListProperty;
@@ -25,13 +24,13 @@
 
     @Test
     public void testHelp() throws InvalidPropertyException {
-        AllEnumListProperty<Example> property = new AllEnumListProperty<Example>("enum.valued", new ArrayList<>(), Example.class);
+        AllEnumListProperty<Example> property = new AllEnumListProperty<>("enum.valued", new ArrayList<>(), Example.class);
         PropertyTestHelpUtil.assertAllHelpValid(property, Arrays.asList("THING", "ANOTHER", "THIRD", "ALL"));
     }
 
     @Test
     public void testAll() throws InvalidPropertyException {
-        AllEnumListProperty<Example> property = new AllEnumListProperty<Example>("enum.valued", new ArrayList<>(), Example.class);
+        AllEnumListProperty<Example> property = new AllEnumListProperty<>("enum.valued", new ArrayList<>(), Example.class);
         PropertyConfiguration config = configOf(Pair.of("enum.valued", "ALL"));
         AllEnumList<Example> list = config.getValue(property);
 
@@ -45,7 +44,7 @@ public void testAll() throws InvalidPropertyException {
 
     @Test
     public void testSingleValue() throws InvalidPropertyException {
-        AllEnumListProperty<Example> property = new AllEnumListProperty<Example>("enum.valued", new ArrayList<>(), Example.class);
+        AllEnumListProperty<Example> property = new AllEnumListProperty<>("enum.valued", new ArrayList<>(), Example.class);
         PropertyConfiguration config = configOf(Pair.of("enum.valued", "thIrd"));
         AllEnumList<Example> list = config.getValue(property);
 
@@ -61,7 +60,7 @@ public void testSingleValue() throws InvalidPropertyException {
 
     @Test
     public void testTwoValues() throws InvalidPropertyException {
-        AllEnumListProperty<Example> property = new AllEnumListProperty<Example>("enum.valued", new ArrayList<>(), Example.class);
+        AllEnumListProperty<Example> property = new AllEnumListProperty<>("enum.valued", new ArrayList<>(), Example.class);
         PropertyConfiguration config = configOf(Pair.of("enum.valued", "thIrd,another"));
         AllEnumList<Example> list = config.getValue(property);
 
@@ -78,7 +77,7 @@ public void testTwoValues() throws InvalidPropertyException {
 
     @Test()
     public void testNoneThrows() throws InvalidPropertyException {
-        AllEnumListProperty<Example> property = new AllEnumListProperty<Example>("enum.valued", new ArrayList<>(), Example.class);
+        AllEnumListProperty<Example> property = new AllEnumListProperty<>("enum.valued", new ArrayList<>(), Example.class);
         PropertyConfiguration config = configOf(Pair.of("enum.valued", "none"));
         Assertions.assertThrows(InvalidPropertyException.class, () -> config.getValue(property));
     }
diff --git a/configuration/src/test/java/com/synopsys/integration/configuration/property/types/enumallnone/AllNoneListPropertiesTests.java b/configuration/src/test/java/com/synopsys/integration/configuration/property/types/enumallnone/AllNoneListPropertiesTests.java
index 8c51ce12f5..2fa9e46691 100644
--- a/configuration/src/test/java/com/synopsys/integration/configuration/property/types/enumallnone/AllNoneListPropertiesTests.java
+++ b/configuration/src/test/java/com/synopsys/integration/configuration/property/types/enumallnone/AllNoneListPropertiesTests.java
@@ -1,7 +1,6 @@
 package com.synopsys.integration.configuration.property.types.enumallnone;
 
 import static com.synopsys.integration.configuration.util.ConfigTestUtils.configOf;
-import static org.junit.jupiter.api.Assertions.fail;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -12,11 +11,9 @@
 
 import com.synopsys.integration.configuration.config.InvalidPropertyException;
 import com.synopsys.integration.configuration.config.PropertyConfiguration;
-import com.synopsys.integration.configuration.parse.ValueParseException;
 import com.synopsys.integration.configuration.property.PropertyTestHelpUtil;
 import com.synopsys.integration.configuration.property.types.enumallnone.list.AllNoneEnumList;
 import com.synopsys.integration.configuration.property.types.enumallnone.property.AllNoneEnumListProperty;
-import com.synopsys.integration.configuration.property.types.path.PathValueParser;
 
 public class AllNoneListPropertiesTests {
     private enum Example {
@@ -27,13 +24,13 @@
 
     @Test
     public void testHelp() throws InvalidPropertyException {
-        AllNoneEnumListProperty<Example> property = new AllNoneEnumListProperty<Example>("enum.valued", new ArrayList<>(), Example.class);
+        AllNoneEnumListProperty<Example> property = new AllNoneEnumListProperty<>("enum.valued", new ArrayList<>(), Example.class);
         PropertyTestHelpUtil.assertAllHelpValid(property, Arrays.asList("THING", "ANOTHER", "THIRD", "NONE", "ALL"));
     }
 
     @Test
     public void testAll() throws InvalidPropertyException {
-        AllNoneEnumListProperty<Example> property = new AllNoneEnumListProperty<Example>("enum.valued", new ArrayList<>(), Example.class);
+        AllNoneEnumListProperty<Example> property = new AllNoneEnumListProperty<>("enum.valued", new ArrayList<>(), Example.class);
         PropertyConfiguration config = configOf(Pair.of("enum.valued", "ALL"));
         AllNoneEnumList<Example> list = config.getValue(property);
 
@@ -47,7 +44,7 @@ public void testAll() throws InvalidPropertyException {
 
     @Test
     public void testNone() throws InvalidPropertyException {
-        AllNoneEnumListProperty<Example> property = new AllNoneEnumListProperty<Example>("enum.valued", new ArrayList<>(), Example.class);
+        AllNoneEnumListProperty<Example> property = new AllNoneEnumListProperty<>("enum.valued", new ArrayList<>(), Example.class);
         PropertyConfiguration config = configOf(Pair.of("enum.valued", "nOnE"));
         AllNoneEnumList<Example> list = config.getValue(property);
 
@@ -61,7 +58,7 @@ public void testNone() throws InvalidPropertyException {
 
     @Test
     public void testSingleValue() throws InvalidPropertyException {
-        AllNoneEnumListProperty<Example> property = new AllNoneEnumListProperty<Example>("enum.valued", new ArrayList<>(), Example.class);
+        AllNoneEnumListProperty<Example> property = new AllNoneEnumListProperty<>("enum.valued", new ArrayList<>(), Example.class);
         PropertyConfiguration config = configOf(Pair.of("enum.valued", "thIrd"));
         AllNoneEnumList<Example> list = config.getValue(property);
 
@@ -77,7 +74,7 @@ public void testSingleValue() throws InvalidPropertyException {
 
     @Test
     public void testTwoValues() throws InvalidPropertyException {
-        AllNoneEnumListProperty<Example> property = new AllNoneEnumListProperty<Example>("enum.valued", new ArrayList<>(), Example.class);
+        AllNoneEnumListProperty<Example> property = new AllNoneEnumListProperty<>("enum.valued", new ArrayList<>(), Example.class);
         PropertyConfiguration config = configOf(Pair.of("enum.valued", "thIrd,another"));
         AllNoneEnumList<Example> list = config.getValue(property);
 
@@ -94,7 +91,7 @@ public void testTwoValues() throws InvalidPropertyException {
 
     @Test()
     public void testUnknownThrows() throws InvalidPropertyException {
-        AllNoneEnumListProperty<Example> property = new AllNoneEnumListProperty<Example>("enum.valued", new ArrayList<>(), Example.class);
+        AllNoneEnumListProperty<Example> property = new AllNoneEnumListProperty<>("enum.valued", new ArrayList<>(), Example.class);
         PropertyConfiguration config = configOf(Pair.of("enum.valued", "stoopid"));
         Assertions.assertThrows(InvalidPropertyException.class, () -> config.getValue(property));
     }
diff --git a/configuration/src/test/java/com/synopsys/integration/configuration/property/types/enumallnone/NoneListPropertiesTests.java b/configuration/src/test/java/com/synopsys/integration/configuration/property/types/enumallnone/NoneListPropertiesTests.java
index 36d5202cb3..7c9c1ddd93 100644
--- a/configuration/src/test/java/com/synopsys/integration/configuration/property/types/enumallnone/NoneListPropertiesTests.java
+++ b/configuration/src/test/java/com/synopsys/integration/configuration/property/types/enumallnone/NoneListPropertiesTests.java
@@ -11,7 +11,6 @@
 
 import com.synopsys.integration.configuration.config.InvalidPropertyException;
 import com.synopsys.integration.configuration.config.PropertyConfiguration;
-import com.synopsys.integration.configuration.parse.ValueParseException;
 import com.synopsys.integration.configuration.property.PropertyTestHelpUtil;
 import com.synopsys.integration.configuration.property.types.enumallnone.list.NoneEnumList;
 import com.synopsys.integration.configuration.property.types.enumallnone.property.NoneEnumListProperty;
@@ -25,13 +24,13 @@
 
     @Test
     public void testHelp() throws InvalidPropertyException {
-        NoneEnumListProperty<Example> property = new NoneEnumListProperty<Example>("enum.valued", new ArrayList<>(), Example.class);
+        NoneEnumListProperty<Example> property = new NoneEnumListProperty<>("enum.valued", new ArrayList<>(), Example.class);
         PropertyTestHelpUtil.assertAllHelpValid(property, Arrays.asList("THING", "ANOTHER", "THIRD", "NONE"));
     }
 
     @Test
     public void testNone() throws InvalidPropertyException {
-        NoneEnumListProperty<Example> property = new NoneEnumListProperty<Example>("enum.valued", new ArrayList<>(), Example.class);
+        NoneEnumListProperty<Example> property = new NoneEnumListProperty<>("enum.valued", new ArrayList<>(), Example.class);
         PropertyConfiguration config = configOf(Pair.of("enum.valued", "nOnE"));
         NoneEnumList<Example> list = config.getValue(property);
 
@@ -45,7 +44,7 @@ public void testNone() throws InvalidPropertyException {
 
     @Test
     public void testSingleValue() throws InvalidPropertyException {
-        NoneEnumListProperty<Example> property = new NoneEnumListProperty<Example>("enum.valued", new ArrayList<>(), Example.class);
+        NoneEnumListProperty<Example> property = new NoneEnumListProperty<>("enum.valued", new ArrayList<>(), Example.class);
         PropertyConfiguration config = configOf(Pair.of("enum.valued", "thIrd"));
         NoneEnumList<Example> list = config.getValue(property);
 
@@ -61,7 +60,7 @@ public void testSingleValue() throws InvalidPropertyException {
 
     @Test
     public void testTwoValues() throws InvalidPropertyException {
-        NoneEnumListProperty<Example> property = new NoneEnumListProperty<Example>("enum.valued", new ArrayList<>(), Example.class);
+        NoneEnumListProperty<Example> property = new NoneEnumListProperty<>("enum.valued", new ArrayList<>(), Example.class);
         PropertyConfiguration config = configOf(Pair.of("enum.valued", "thIrd,another"));
         NoneEnumList<Example> list = config.getValue(property);
 
@@ -78,7 +77,7 @@ public void testTwoValues() throws InvalidPropertyException {
 
     @Test()
     public void testAllThrows() throws InvalidPropertyException {
-        NoneEnumListProperty<Example> property = new NoneEnumListProperty<Example>("enum.valued", new ArrayList<>(), Example.class);
+        NoneEnumListProperty<Example> property = new NoneEnumListProperty<>("enum.valued", new ArrayList<>(), Example.class);
         PropertyConfiguration config = configOf(Pair.of("enum.valued", "aLL"));
         Assertions.assertThrows(InvalidPropertyException.class, () -> config.getValue(property));
     }
diff --git a/configuration/src/test/java/com/synopsys/integration/configuration/property/types/integer/IntegerPropertiesTests.java b/configuration/src/test/java/com/synopsys/integration/configuration/property/types/integer/IntegerPropertiesTests.java
index 62349a9ab2..8da19d67b2 100644
--- a/configuration/src/test/java/com/synopsys/integration/configuration/property/types/integer/IntegerPropertiesTests.java
+++ b/configuration/src/test/java/com/synopsys/integration/configuration/property/types/integer/IntegerPropertiesTests.java
@@ -14,11 +14,8 @@
 import com.synopsys.integration.configuration.config.PropertyConfiguration;
 import com.synopsys.integration.configuration.property.PropertyTestHelpUtil;
 import com.synopsys.integration.configuration.property.base.NullableAlikeProperty;
-import com.synopsys.integration.configuration.property.base.NullableProperty;
 import com.synopsys.integration.configuration.property.base.ValuedAlikeListProperty;
 import com.synopsys.integration.configuration.property.base.ValuedAlikeProperty;
-import com.synopsys.integration.configuration.property.base.ValuedListProperty;
-import com.synopsys.integration.configuration.property.base.ValuedProperty;
 
 // Simple glue sanity tests. Theoretically if Config is well tested and Parser is well tested, these will pass so they are not exhaustive.
 public class IntegerPropertiesTests {
diff --git a/configuration/src/test/java/com/synopsys/integration/configuration/property/types/longs/LongPropertiesTests.java b/configuration/src/test/java/com/synopsys/integration/configuration/property/types/longs/LongPropertiesTests.java
index 72d5af4161..2b1576bbfe 100644
--- a/configuration/src/test/java/com/synopsys/integration/configuration/property/types/longs/LongPropertiesTests.java
+++ b/configuration/src/test/java/com/synopsys/integration/configuration/property/types/longs/LongPropertiesTests.java
@@ -14,11 +14,8 @@
 import com.synopsys.integration.configuration.config.PropertyConfiguration;
 import com.synopsys.integration.configuration.property.PropertyTestHelpUtil;
 import com.synopsys.integration.configuration.property.base.NullableAlikeProperty;
-import com.synopsys.integration.configuration.property.base.NullableProperty;
 import com.synopsys.integration.configuration.property.base.ValuedAlikeListProperty;
 import com.synopsys.integration.configuration.property.base.ValuedAlikeProperty;
-import com.synopsys.integration.configuration.property.base.ValuedListProperty;
-import com.synopsys.integration.configuration.property.base.ValuedProperty;
 
 // Simple glue sanity tests. Theoretically if Config is well tested and Parser is well tested, these will pass so they are not exhaustive.
 public class LongPropertiesTests {
diff --git a/configuration/src/test/java/com/synopsys/integration/configuration/property/types/path/PathPropertiesTest.java b/configuration/src/test/java/com/synopsys/integration/configuration/property/types/path/PathPropertiesTest.java
index 5f977cc4f0..effc72f53d 100644
--- a/configuration/src/test/java/com/synopsys/integration/configuration/property/types/path/PathPropertiesTest.java
+++ b/configuration/src/test/java/com/synopsys/integration/configuration/property/types/path/PathPropertiesTest.java
@@ -14,11 +14,8 @@
 import com.synopsys.integration.configuration.config.PropertyConfiguration;
 import com.synopsys.integration.configuration.property.PropertyTestHelpUtil;
 import com.synopsys.integration.configuration.property.base.NullableAlikeProperty;
-import com.synopsys.integration.configuration.property.base.NullableProperty;
 import com.synopsys.integration.configuration.property.base.ValuedAlikeListProperty;
 import com.synopsys.integration.configuration.property.base.ValuedAlikeProperty;
-import com.synopsys.integration.configuration.property.base.ValuedListProperty;
-import com.synopsys.integration.configuration.property.base.ValuedProperty;
 
 // Simple glue sanity tests. Theoretically if Config is well tested and Parser is well tested, these will pass so they are not exhaustive.
 public class PathPropertiesTest {
diff --git a/configuration/src/test/java/com/synopsys/integration/configuration/property/types/string/StringPropertiesTest.java b/configuration/src/test/java/com/synopsys/integration/configuration/property/types/string/StringPropertiesTest.java
index d9f387d084..99c5e7340d 100644
--- a/configuration/src/test/java/com/synopsys/integration/configuration/property/types/string/StringPropertiesTest.java
+++ b/configuration/src/test/java/com/synopsys/integration/configuration/property/types/string/StringPropertiesTest.java
@@ -14,11 +14,8 @@
 import com.synopsys.integration.configuration.config.PropertyConfiguration;
 import com.synopsys.integration.configuration.property.PropertyTestHelpUtil;
 import com.synopsys.integration.configuration.property.base.NullableAlikeProperty;
-import com.synopsys.integration.configuration.property.base.NullableProperty;
 import com.synopsys.integration.configuration.property.base.ValuedAlikeListProperty;
 import com.synopsys.integration.configuration.property.base.ValuedAlikeProperty;
-import com.synopsys.integration.configuration.property.base.ValuedListProperty;
-import com.synopsys.integration.configuration.property.base.ValuedProperty;
 
 // Simple glue sanity tests. Theoretically if Config is well tested and Parser is well tested, these will pass so they are not exhaustive.
 public class StringPropertiesTest {
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectable/inspector/nuget/impl/NugetInspectorArguments.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectable/inspector/nuget/impl/NugetInspectorArguments.java
index f9448449b6..647bf65a1f 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectable/inspector/nuget/impl/NugetInspectorArguments.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectable/inspector/nuget/impl/NugetInspectorArguments.java
@@ -21,7 +21,8 @@
         List<String> options = new ArrayList<>(Arrays.asList(
             "--target_path=" + sourcePath.getCanonicalPath(),
             "--output_directory=" + outputDirectory.getCanonicalPath(),
-            "--ignore_failure=" + nugetInspectorOptions.isIgnoreFailures()));
+            "--ignore_failure=" + nugetInspectorOptions.isIgnoreFailures()
+        ));
 
         if (!nugetInspectorOptions.getExcludedModules().isEmpty()) {
             options.add("--excluded_modules=" + toCommaSeparatedString(nugetInspectorOptions.getExcludedModules()));
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectable/result/PubSpecLockNotFoundDetectableResult.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectable/result/PubSpecLockNotFoundDetectableResult.java
index 15d6d3d37c..a1aa28883f 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectable/result/PubSpecLockNotFoundDetectableResult.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectable/result/PubSpecLockNotFoundDetectableResult.java
@@ -11,6 +11,7 @@ public PubSpecLockNotFoundDetectableResult(String directoryPath) {
     public String toDescription() {
         return String.format(
             "A pubspec.yaml was located in %s, but the pubspec.lock file was NOT located. Please run 'pub get' or, if project requires the Flutter SDK, run 'flutter pub get' in that location and try again.",
-            directoryPath);
+            directoryPath
+        );
     }
 }
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bazel/BazelDetectable.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bazel/BazelDetectable.java
index 468234c2ed..bfee87d95e 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bazel/BazelDetectable.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bazel/BazelDetectable.java
@@ -30,8 +30,7 @@
     private ExecutableTarget bazelExe;
     private File workspaceFile;
 
-    public BazelDetectable(DetectableEnvironment environment, FileFinder fileFinder, BazelExtractor bazelExtractor,
-        BazelResolver bazelResolver, @Nullable String bazelTargetName) {
+    public BazelDetectable(DetectableEnvironment environment, FileFinder fileFinder, BazelExtractor bazelExtractor, BazelResolver bazelResolver, @Nullable String bazelTargetName) {
         super(environment);
         this.fileFinder = fileFinder;
         this.bazelExtractor = bazelExtractor;
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bazel/BazelDetectableOptions.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bazel/BazelDetectableOptions.java
index be7d9bd58f..eda980d414 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bazel/BazelDetectableOptions.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bazel/BazelDetectableOptions.java
@@ -10,9 +10,7 @@
     private final Set<WorkspaceRule> workspaceRulesFromProperty;
     private final List<String> bazelCqueryAdditionalOptions;
 
-    public BazelDetectableOptions(String targetName, Set<WorkspaceRule> workspaceRulesFromDeprecatedProperty,
-        Set<WorkspaceRule> workspaceRulesFromProperty,
-        List<String> bazelCqueryAdditionalOptions) {
+    public BazelDetectableOptions(String targetName, Set<WorkspaceRule> workspaceRulesFromDeprecatedProperty, Set<WorkspaceRule> workspaceRulesFromProperty, List<String> bazelCqueryAdditionalOptions) {
         this.targetName = targetName;
         this.workspaceRulesFromDeprecatedProperty = workspaceRulesFromDeprecatedProperty;
         this.workspaceRulesFromProperty = workspaceRulesFromProperty;
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bazel/BazelExtractor.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bazel/BazelExtractor.java
index 4ff08bcda1..3078e5827b 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bazel/BazelExtractor.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bazel/BazelExtractor.java
@@ -47,7 +47,8 @@
     private final BazelVariableSubstitutor bazelVariableSubstitutor;
     private final BazelProjectNameGenerator bazelProjectNameGenerator;
 
-    public BazelExtractor(DetectableExecutableRunner executableRunner,
+    public BazelExtractor(
+        DetectableExecutableRunner executableRunner,
         ExternalIdFactory externalIdFactory,
         BazelWorkspaceFileParser bazelWorkspaceFileParser,
         WorkspaceRuleChooser workspaceRuleChooser,
@@ -57,7 +58,8 @@ public BazelExtractor(DetectableExecutableRunner executableRunner,
         Set<WorkspaceRule> workspaceRulesFromDeprecatedProperty,
         Set<WorkspaceRule> workspaceRulesFromProperty,
         BazelVariableSubstitutor bazelVariableSubstitutor,
-        BazelProjectNameGenerator bazelProjectNameGenerator) {
+        BazelProjectNameGenerator bazelProjectNameGenerator
+    ) {
         this.executableRunner = executableRunner;
         this.externalIdFactory = externalIdFactory;
         this.workspaceRuleChooser = workspaceRuleChooser;
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bazel/pipeline/PipelineBuilder.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bazel/pipeline/PipelineBuilder.java
index af621374ac..a05f149dd1 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bazel/pipeline/PipelineBuilder.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bazel/pipeline/PipelineBuilder.java
@@ -13,9 +13,9 @@
 import com.synopsys.integration.detectable.detectables.bazel.pipeline.step.IntermediateStep;
 import com.synopsys.integration.detectable.detectables.bazel.pipeline.step.IntermediateStepExecuteBazelOnEachLine;
 import com.synopsys.integration.detectable.detectables.bazel.pipeline.step.IntermediateStepParseFilterLines;
-import com.synopsys.integration.detectable.detectables.bazel.pipeline.step.IntermediateStepParseValuesFromXml;
 import com.synopsys.integration.detectable.detectables.bazel.pipeline.step.IntermediateStepParseReplaceInEachLine;
 import com.synopsys.integration.detectable.detectables.bazel.pipeline.step.IntermediateStepParseSplitEach;
+import com.synopsys.integration.detectable.detectables.bazel.pipeline.step.IntermediateStepParseValuesFromXml;
 
 public class PipelineBuilder {
     private final ExternalIdFactory externalIdFactory;
@@ -25,8 +25,7 @@
     private final List<IntermediateStep> intermediateSteps = new ArrayList<>();
     private FinalStep finalStep;
 
-    public PipelineBuilder(ExternalIdFactory externalIdFactory, BazelCommandExecutor bazelCommandExecutor, BazelVariableSubstitutor bazelVariableSubstitutor,
-        HaskellCabalLibraryJsonProtoParser haskellCabalLibraryJsonProtoParser) {
+    public PipelineBuilder(ExternalIdFactory externalIdFactory, BazelCommandExecutor bazelCommandExecutor, BazelVariableSubstitutor bazelVariableSubstitutor, HaskellCabalLibraryJsonProtoParser haskellCabalLibraryJsonProtoParser) {
         this.externalIdFactory = externalIdFactory;
         this.bazelCommandExecutor = bazelCommandExecutor;
         this.bazelVariableSubstitutor = bazelVariableSubstitutor;
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bazel/pipeline/Pipelines.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bazel/pipeline/Pipelines.java
index b68238f48e..63c7718eb3 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bazel/pipeline/Pipelines.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bazel/pipeline/Pipelines.java
@@ -16,8 +16,12 @@
     private static final String OUTPUT_FLAG = "--output";
     private final EnumMap<WorkspaceRule, Pipeline> availablePipelines = new EnumMap<>(WorkspaceRule.class);
 
-    public Pipelines(BazelCommandExecutor bazelCommandExecutor, BazelVariableSubstitutor bazelVariableSubstitutor,
-        ExternalIdFactory externalIdFactory, HaskellCabalLibraryJsonProtoParser haskellCabalLibraryJsonProtoParser) {
+    public Pipelines(
+        BazelCommandExecutor bazelCommandExecutor,
+        BazelVariableSubstitutor bazelVariableSubstitutor,
+        ExternalIdFactory externalIdFactory,
+        HaskellCabalLibraryJsonProtoParser haskellCabalLibraryJsonProtoParser
+    ) {
         Pipeline mavenJarPipeline = (new PipelineBuilder(externalIdFactory, bazelCommandExecutor, bazelVariableSubstitutor, haskellCabalLibraryJsonProtoParser))
             .executeBazelOnEachLine(Arrays.asList(CQUERY_COMMAND, CQUERY_OPTIONS_PLACEHOLDER, "filter('@.*:jar', deps(${detect.bazel.target}))"), false)
             // The trailing parens may contain a hex number, or "null"; the pattern below handles either
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bazel/pipeline/step/IntermediateStepExecuteBazelOnEachLine.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bazel/pipeline/step/IntermediateStepExecuteBazelOnEachLine.java
index b3ab46f33e..c688e5121c 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bazel/pipeline/step/IntermediateStepExecuteBazelOnEachLine.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bazel/pipeline/step/IntermediateStepExecuteBazelOnEachLine.java
@@ -13,8 +13,7 @@
     private final List<String> bazelCommandArgs;
     private final boolean inputIsExpected;
 
-    public IntermediateStepExecuteBazelOnEachLine(BazelCommandExecutor bazelCommandExecutor,
-        BazelVariableSubstitutor bazelVariableSubstitutor, List<String> bazelCommandArgs, boolean inputIsExpected) {
+    public IntermediateStepExecuteBazelOnEachLine(BazelCommandExecutor bazelCommandExecutor, BazelVariableSubstitutor bazelVariableSubstitutor, List<String> bazelCommandArgs, boolean inputIsExpected) {
         this.bazelCommandExecutor = bazelCommandExecutor;
         this.bazelVariableSubstitutor = bazelVariableSubstitutor;
         this.bazelCommandArgs = bazelCommandArgs;
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bitbake/BitbakeExtractor.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bitbake/BitbakeExtractor.java
index 48e70c5e79..43436a6898 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bitbake/BitbakeExtractor.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bitbake/BitbakeExtractor.java
@@ -9,8 +9,8 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.Set;
 import java.util.Optional;
+import java.util.Set;
 
 import org.apache.commons.io.FileUtils;
 import org.apache.commons.lang3.NotImplementedException;
@@ -48,9 +48,16 @@
     private final LicenseManifestParser licenseManifestParser;
     private final BitbakeEnvironmentParser bitbakeEnvironmentParser;
 
-    public BitbakeExtractor(DetectableExecutableRunner executableRunner, GraphParserTransformer graphParserTransformer, BitbakeGraphTransformer bitbakeGraphTransformer,
-        BitbakeRecipesParser bitbakeRecipesParser, ToolVersionLogger toolVersionLogger, BuildFileFinder buildFileFinder,
-        LicenseManifestParser licenseManifestParser, BitbakeEnvironmentParser bitbakeEnvironmentParser) {
+    public BitbakeExtractor(
+        DetectableExecutableRunner executableRunner,
+        GraphParserTransformer graphParserTransformer,
+        BitbakeGraphTransformer bitbakeGraphTransformer,
+        BitbakeRecipesParser bitbakeRecipesParser,
+        ToolVersionLogger toolVersionLogger,
+        BuildFileFinder buildFileFinder,
+        LicenseManifestParser licenseManifestParser,
+        BitbakeEnvironmentParser bitbakeEnvironmentParser
+    ) {
         this.executableRunner = executableRunner;
         this.graphParserTransformer = graphParserTransformer;
         this.bitbakeGraphTransformer = bitbakeGraphTransformer;
@@ -100,8 +107,16 @@ public Extraction extract(
     }
 
     @NotNull
-    private CodeLocation generateCodeLocationForTargetImage(final boolean followSymLinks, final Integer searchDepth, final EnumListFilter<BitbakeDependencyType> dependencyTypeFilter, final BitbakeSession bitbakeSession, final File buildDir,
-        final BitbakeEnvironment bitbakeEnvironment, final ShowRecipesResults showRecipesResults, final String packageName) throws IntegrationException, IOException, ExecutableFailedException {
+    private CodeLocation generateCodeLocationForTargetImage(
+        boolean followSymLinks,
+        Integer searchDepth,
+        EnumListFilter<BitbakeDependencyType> dependencyTypeFilter,
+        BitbakeSession bitbakeSession,
+        File buildDir,
+        BitbakeEnvironment bitbakeEnvironment,
+        ShowRecipesResults showRecipesResults,
+        String packageName
+    ) throws IntegrationException, IOException, ExecutableFailedException {
         Map<String, String> imageRecipes = null;
         if (dependencyTypeFilter.shouldExclude(BitbakeDependencyType.BUILD)) {
             imageRecipes = readImageRecipes(buildDir, packageName, bitbakeEnvironment, followSymLinks, searchDepth);
@@ -122,7 +137,8 @@ private CodeLocation generateCodeLocationForTargetImage(final boolean followSymL
         }
     }
 
-    private BitbakeGraph generateBitbakeGraph(BitbakeSession bitbakeSession,
+    private BitbakeGraph generateBitbakeGraph(
+        BitbakeSession bitbakeSession,
         File buildDir,
         String packageName,
         Set<String> knownLayers,
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bitbake/BitbakeSession.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bitbake/BitbakeSession.java
index ecd9137f28..0f96095094 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bitbake/BitbakeSession.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bitbake/BitbakeSession.java
@@ -36,10 +36,17 @@
     private final BuildFileFinder buildFileFinder;
     private final BitbakeEnvironmentParser bitbakeEnvironmentParser;
 
-    public BitbakeSession(DetectableExecutableRunner executableRunner, BitbakeRecipesParser bitbakeRecipesParser,
-        File sourceDir, File buildEnvScript, List<String> sourceArguments,
-        ExecutableTarget bashExecutable, ToolVersionLogger toolVersionLogger, BuildFileFinder buildFileFinder,
-        BitbakeEnvironmentParser bitbakeEnvironmentParser) {
+    public BitbakeSession(
+        DetectableExecutableRunner executableRunner,
+        BitbakeRecipesParser bitbakeRecipesParser,
+        File sourceDir,
+        File buildEnvScript,
+        List<String> sourceArguments,
+        ExecutableTarget bashExecutable,
+        ToolVersionLogger toolVersionLogger,
+        BuildFileFinder buildFileFinder,
+        BitbakeEnvironmentParser bitbakeEnvironmentParser
+    ) {
         this.executableRunner = executableRunner;
         this.bitbakeRecipesParser = bitbakeRecipesParser;
         this.sourceDir = sourceDir;
@@ -69,7 +76,7 @@ public File determineBuildDir() {
         try {
             ExecutableOutput output = runBitbake(GET_WORKING_DIR_COMMAND);
             List<String> pwdOutputLines = output.getStandardOutputAsList();
-            derivedBuildDir = new File(pwdOutputLines.get(pwdOutputLines.size()-1).trim());
+            derivedBuildDir = new File(pwdOutputLines.get(pwdOutputLines.size() - 1).trim());
         } catch (Exception e) {
             logger.warn("Unable to determine build directory location due to error: {}; ; using {} for build dir", e.getMessage(), fallbackBuildDir.getAbsolutePath());
             return fallbackBuildDir;
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bitbake/BuildFileFinder.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bitbake/BuildFileFinder.java
index a331547964..056d559ac2 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bitbake/BuildFileFinder.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bitbake/BuildFileFinder.java
@@ -24,7 +24,7 @@
     private final Logger logger = LoggerFactory.getLogger(this.getClass());
     private final FileFinder fileFinder;
 
-    public BuildFileFinder(final FileFinder fileFinder) {
+    public BuildFileFinder(FileFinder fileFinder) {
         this.fileFinder = fileFinder;
     }
 
@@ -36,7 +36,8 @@ public File findTaskDependsFile(File sourceDir, File buildDir, boolean followSym
         }
         if (taskDependsDotFile == null) {
             throw new IntegrationException(String.format("Failed to find %s in either %s or %s",
-                TASK_DEPENDS_FILE_NAME, buildDir.getAbsolutePath(), sourceDir.getAbsolutePath()));
+                TASK_DEPENDS_FILE_NAME, buildDir.getAbsolutePath(), sourceDir.getAbsolutePath()
+            ));
         }
         return taskDependsDotFile;
     }
@@ -47,8 +48,7 @@ public File findTaskDependsFile(File sourceDir, File buildDir, boolean followSym
             File licensesDir = findLicensesDir(buildDir, bitbakeEnvironment.getLicensesDirPath().orElse(null), followSymLinks, searchDepth);
             logger.debug("Checking licenses dir {} for license.manifest for {}", licensesDir.getAbsolutePath(), targetImageName);
             List<File> licensesDirContents = generateListOfFiles(licensesDir);
-            Optional<File> architectureSpecificManifestFile = findManifestFileForTargetArchitecture(targetImageName,
-                machineArch, licensesDirContents, followSymLinks);
+            Optional<File> architectureSpecificManifestFile = findManifestFileForTargetArchitecture(targetImageName, machineArch, licensesDirContents, followSymLinks);
             if (architectureSpecificManifestFile.isPresent()) {
                 return architectureSpecificManifestFile;
             }
@@ -66,7 +66,7 @@ public File findTaskDependsFile(File sourceDir, File buildDir, boolean followSym
     }
 
     @NotNull
-    private List<File> generateListOfFiles(final File licensesDir) {
+    private List<File> generateListOfFiles(File licensesDir) {
         File[] licensesDirContentsArray = licensesDir.listFiles();
         if (licensesDirContentsArray == null) {
             return new ArrayList<>(0);
@@ -116,7 +116,8 @@ private File findLicensesDir(File buildDir, @Nullable String licensesDirPath, bo
         }
         return Optional.empty();
     }
-    private Optional<File> findMostRecentLicenseManifestFileForTarget(final String targetImageName, final List<File> licensesDirContents, boolean followSymLinks) {
+
+    private Optional<File> findMostRecentLicenseManifestFileForTarget(String targetImageName, List<File> licensesDirContents, boolean followSymLinks) {
         File latestLicenseManifestFile = null;
         long latestLicenseManifestFileTime = 0;
         for (File licensesDirSubDir : licensesDirContents) {
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bitbake/parse/BitbakeEnvironmentParser.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bitbake/parse/BitbakeEnvironmentParser.java
index e67d881619..be170706e1 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bitbake/parse/BitbakeEnvironmentParser.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bitbake/parse/BitbakeEnvironmentParser.java
@@ -15,8 +15,8 @@
     private static final String LICENSES_DIR_VARIABLE_NAME = "LICENSE_DIRECTORY";
     private static final String QUOTE_CHARS = "\"'";
     private final Logger logger = LoggerFactory.getLogger(this.getClass());
-    private final Predicate<String> isArchitectureLine =  l -> l.startsWith(ARCHITECTURE_VARIABLE_NAME+"=");
-    private final Predicate<String> isLicensesDirLine =  l -> l.startsWith(LICENSES_DIR_VARIABLE_NAME +"=");
+    private final Predicate<String> isArchitectureLine = l -> l.startsWith(ARCHITECTURE_VARIABLE_NAME + "=");
+    private final Predicate<String> isLicensesDirLine = l -> l.startsWith(LICENSES_DIR_VARIABLE_NAME + "=");
 
     public BitbakeEnvironment parseArchitecture(List<String> bitbakeEnvironmentCmdOutput) {
         Optional<String> architecture = bitbakeEnvironmentCmdOutput.stream()
@@ -37,6 +37,6 @@ public BitbakeEnvironment parseArchitecture(List<String> bitbakeEnvironmentCmdOu
     }
 
     private String isolateVariableValue(String line, String variableName) {
-        return line.substring(variableName.length()+1);
+        return line.substring(variableName.length() + 1);
     }
 }
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bitbake/parse/GraphNodeLabelParser.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bitbake/parse/GraphNodeLabelParser.java
index 2fdf92bb18..34cbe1d99c 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bitbake/parse/GraphNodeLabelParser.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bitbake/parse/GraphNodeLabelParser.java
@@ -23,13 +23,13 @@ public String parseVersionFromLabel(String label) throws IntegrationException {
 
     public String parseLayerFromLabel(String label, Set<String> knownLayerNames) throws IntegrationException {
         GraphNodeLabelDetails labelDetails = parseLabelParts(label);
-            String recipeSpec = labelDetails.getRecipeSpec();
-            for (String candidateLayerName : knownLayerNames) {
-                String possibleLayerPathSubstring = LABEL_PATH_SEPARATOR + candidateLayerName + LABEL_PATH_SEPARATOR;
-                if (recipeSpec.contains(possibleLayerPathSubstring)) {
-                    return candidateLayerName;
-                }
+        String recipeSpec = labelDetails.getRecipeSpec();
+        for (String candidateLayerName : knownLayerNames) {
+            String possibleLayerPathSubstring = LABEL_PATH_SEPARATOR + candidateLayerName + LABEL_PATH_SEPARATOR;
+            if (recipeSpec.contains(possibleLayerPathSubstring)) {
+                return candidateLayerName;
             }
+        }
         throw new IntegrationException(String.format("Graph Node recipe '%s' does not correspond to any known layer (%s)", label, knownLayerNames));
     }
 
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bitbake/parse/LicenseManifestParser.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bitbake/parse/LicenseManifestParser.java
index eea1a60861..6429c4545f 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bitbake/parse/LicenseManifestParser.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/bitbake/parse/LicenseManifestParser.java
@@ -20,7 +20,7 @@
 
     public Map<String, String> collectImageRecipes(List<String> licenseManifestLines) throws IntegrationException {
         logger.debug("Parsing license.manifest");
-        Map<String, String> imageRecipes = new HashMap<>(1 + (licenseManifestLines.size()/5));
+        Map<String, String> imageRecipes = new HashMap<>(1 + (licenseManifestLines.size() / 5));
         NameVersion recipeNameVersion = new NameVersion();
         int lineNumber = 0;
         for (String line : licenseManifestLines) {
@@ -38,7 +38,13 @@
             }
             if (recipeIsComplete(recipeNameVersion)) {
                 if ((imageRecipes.containsKey(recipeNameVersion.getName())) && (!imageRecipes.get(recipeNameVersion.getName()).equals(recipeNameVersion.getVersion()))) {
-                    throw new IntegrationException(String.format("Error parsing license.manifest file: Recipe %s: Found version %s near line %d, but previously found version: %s", recipeNameVersion.getName(), recipeNameVersion.getVersion(), lineNumber, imageRecipes.get(recipeNameVersion.getName())));
+                    throw new IntegrationException(String.format(
+                        "Error parsing license.manifest file: Recipe %s: Found version %s near line %d, but previously found version: %s",
+                        recipeNameVersion.getName(),
+                        recipeNameVersion.getVersion(),
+                        lineNumber,
+                        imageRecipes.get(recipeNameVersion.getName())
+                    ));
                 }
                 imageRecipes.put(recipeNameVersion.getName(), recipeNameVersion.getVersion());
                 recipeNameVersion = new NameVersion();
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/transform/CargoLockPackageTransformer.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/transform/CargoLockPackageTransformer.java
index 97a8e238eb..8f0cf0492c 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/transform/CargoLockPackageTransformer.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/cargo/transform/CargoLockPackageTransformer.java
@@ -43,7 +43,7 @@ public DependencyGraph transformToGraph(List<CargoLockPackage> lockPackages) thr
                 }
             });
         });
-        
+
         return RootPruningGraphUtil.prune(graph.build());
     }
 
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/carthage/CarthageDetectable.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/carthage/CarthageDetectable.java
index d6f706c959..ccae9f4c59 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/carthage/CarthageDetectable.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/carthage/CarthageDetectable.java
@@ -11,7 +11,6 @@
 import com.synopsys.integration.detectable.detectable.executable.ExecutableFailedException;
 import com.synopsys.integration.detectable.detectable.result.CartfileResolvedNotFoundDetectableResult;
 import com.synopsys.integration.detectable.detectable.result.DetectableResult;
-import com.synopsys.integration.detectable.detectable.result.FilesNotFoundDetectableResult;
 import com.synopsys.integration.detectable.detectable.result.PassedDetectableResult;
 import com.synopsys.integration.detectable.extraction.Extraction;
 import com.synopsys.integration.detectable.extraction.ExtractionEnvironment;
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/ClangDetectable.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/ClangDetectable.java
index 85dfa03df7..4c114ab937 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/ClangDetectable.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/ClangDetectable.java
@@ -37,9 +37,15 @@
 
     private ClangPackageManager selectedPackageManager;
 
-    public ClangDetectable(DetectableEnvironment environment, DetectableExecutableRunner executableRunner, FileFinder fileFinder, List<ClangPackageManager> availablePackageManagers,
+    public ClangDetectable(
+        DetectableEnvironment environment,
+        DetectableExecutableRunner executableRunner,
+        FileFinder fileFinder,
+        List<ClangPackageManager> availablePackageManagers,
         ClangExtractor clangExtractor,
-        ClangDetectableOptions options, ClangPackageManagerRunner packageManagerRunner) {
+        ClangDetectableOptions options,
+        ClangPackageManagerRunner packageManagerRunner
+    ) {
         super(environment);
         this.fileFinder = fileFinder;
         this.availablePackageManagers = availablePackageManagers;
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/ClangExtractor.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/ClangExtractor.java
index 425c9e5bc9..77d62d505c 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/ClangExtractor.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/ClangExtractor.java
@@ -32,9 +32,13 @@
     private final CompileCommandDatabaseParser compileCommandDatabaseParser;
     private final ForgeChooser forgeChooser;
 
-    public ClangExtractor(DetectableExecutableRunner executableRunner, DependencyFileDetailGenerator dependencyFileDetailGenerator,
-        ClangPackageDetailsTransformer clangPackageDetailsTransformer, CompileCommandDatabaseParser compileCommandDatabaseParser,
-        ForgeChooser forgeChooser) {
+    public ClangExtractor(
+        DetectableExecutableRunner executableRunner,
+        DependencyFileDetailGenerator dependencyFileDetailGenerator,
+        ClangPackageDetailsTransformer clangPackageDetailsTransformer,
+        CompileCommandDatabaseParser compileCommandDatabaseParser,
+        ForgeChooser forgeChooser
+    ) {
         this.executableRunner = executableRunner;
         this.dependencyFileDetailGenerator = dependencyFileDetailGenerator;
         this.clangPackageDetailsTransformer = clangPackageDetailsTransformer;
@@ -42,8 +46,7 @@ public ClangExtractor(DetectableExecutableRunner executableRunner, DependencyFil
         this.forgeChooser = forgeChooser;
     }
 
-    public Extraction extract(ClangPackageManager currentPackageManager, ClangPackageManagerRunner packageManagerRunner, File sourceDirectory, File outputDirectory, File jsonCompilationDatabaseFile,
-        boolean cleanup) {
+    public Extraction extract(ClangPackageManager currentPackageManager, ClangPackageManagerRunner packageManagerRunner, File sourceDirectory, File outputDirectory, File jsonCompilationDatabaseFile, boolean cleanup) {
         try {
             logger.debug(String.format("Analyzing %s", jsonCompilationDatabaseFile.getAbsolutePath()));
             logger.debug(String.format("extract() called; compileCommandsJsonFilePath: %s", jsonCompilationDatabaseFile.getAbsolutePath()));
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/packagemanager/ClangPackageManagerInfo.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/packagemanager/ClangPackageManagerInfo.java
index f61958ebb8..960b824e8c 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/packagemanager/ClangPackageManagerInfo.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/packagemanager/ClangPackageManagerInfo.java
@@ -16,8 +16,17 @@
     private final List<String> pkgArchitectureArgs;
     private final List<String> pkgInfoArgs;
 
-    public ClangPackageManagerInfo(String pkgMgrName, String pkgMgrCmdString, List<Forge> possibleForges, Forge defaultForge, List<String> checkPresenceCommandArgs,
-        String checkPresenceCommandOutputExpectedText, List<String> pkgMgrGetOwnerCmdArgs, List<String> pkgArchitectureArgs, List<String> pkgInfoArgs) {
+    public ClangPackageManagerInfo(
+        String pkgMgrName,
+        String pkgMgrCmdString,
+        List<Forge> possibleForges,
+        Forge defaultForge,
+        List<String> checkPresenceCommandArgs,
+        String checkPresenceCommandOutputExpectedText,
+        List<String> pkgMgrGetOwnerCmdArgs,
+        List<String> pkgArchitectureArgs,
+        List<String> pkgInfoArgs
+    ) {
         this.pkgMgrName = pkgMgrName;
         this.pkgMgrCmdString = pkgMgrCmdString;
         this.possibleForges = possibleForges;
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/packagemanager/ClangPackageManagerRunner.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/packagemanager/ClangPackageManagerRunner.java
index 3f325e418f..e7a2dd55f1 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/packagemanager/ClangPackageManagerRunner.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/packagemanager/ClangPackageManagerRunner.java
@@ -28,11 +28,21 @@ public boolean applies(ClangPackageManager currentPackageManager, File workingDi
                 logger.debug(String.format("Found package manager %s", packageManagerInfo.getPkgMgrName()));
                 return true;
             }
-            logger.debug(String.format("Output of %s %s does not look right; concluding that the %s package manager is not present. The output: %s", packageManagerInfo.getPkgMgrName(), packageManagerInfo.getCheckPresenceCommandArgs(),
-                packageManagerInfo.getPkgMgrName(), versionOutput));
+            logger.debug(String.format(
+                "Output of %s %s does not look right; concluding that the %s package manager is not present. The output: %s",
+                packageManagerInfo.getPkgMgrName(),
+                packageManagerInfo.getCheckPresenceCommandArgs(),
+                packageManagerInfo.getPkgMgrName(),
+                versionOutput
+            ));
         } catch (ExecutableRunnerException e) {
-            logger.debug(String.format("Error executing %s %s; concluding that the %s package manager is not present. The error: %s", packageManagerInfo.getPkgMgrName(), packageManagerInfo.getCheckPresenceCommandArgs(),
-                packageManagerInfo.getPkgMgrName(), e.getMessage()));
+            logger.debug(String.format(
+                "Error executing %s %s; concluding that the %s package manager is not present. The error: %s",
+                packageManagerInfo.getPkgMgrName(),
+                packageManagerInfo.getCheckPresenceCommandArgs(),
+                packageManagerInfo.getPkgMgrName(),
+                e.getMessage()
+            ));
             return false;
         }
         return false;
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/packagemanager/resolver/ApkPackageManagerResolver.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/packagemanager/resolver/ApkPackageManagerResolver.java
index 437a6d04af..ec5e666698 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/packagemanager/resolver/ApkPackageManagerResolver.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/packagemanager/resolver/ApkPackageManagerResolver.java
@@ -23,8 +23,12 @@ public ApkPackageManagerResolver(ApkArchitectureResolver architectureResolver) {
     }
 
     @Override
-    public List<PackageDetails> resolvePackages(ClangPackageManagerInfo currentPackageManager, DetectableExecutableRunner executableRunner,
-        File workingDirectory, String queryPackageOutput) throws ExecutableRunnerException, NotOwnedByAnyPkgException {
+    public List<PackageDetails> resolvePackages(
+        ClangPackageManagerInfo currentPackageManager,
+        DetectableExecutableRunner executableRunner,
+        File workingDirectory,
+        String queryPackageOutput
+    ) throws ExecutableRunnerException, NotOwnedByAnyPkgException {
         isValid(queryPackageOutput);
         Optional<String> architecture = architectureResolver.resolveArchitecture(currentPackageManager, workingDirectory, executableRunner);
         List<PackageDetails> packageDetailsList = new ArrayList<>();
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/packagemanager/resolver/DpkgPkgDetailsResolver.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/packagemanager/resolver/DpkgPkgDetailsResolver.java
index ae9246d0f0..37232df0f1 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/packagemanager/resolver/DpkgPkgDetailsResolver.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/clang/packagemanager/resolver/DpkgPkgDetailsResolver.java
@@ -53,8 +53,7 @@ private String constructPackageArg(String packageName, @Nullable String packageA
             packageVersion = parseNeededValueFromLineIfPresent(packageName, packageInfoOutputLine, "Version", packageVersion);
         }
         if ((packageVersion == null) || (packageArchitecture == null)) {
-            logger.warn("Unable to determine all details for package {} (version: {}; architecture: {}); this package will be omitted from the output",
-                packageName, packageVersion, packageArchitecture);
+            logger.warn("Unable to determine all details for package {} (version: {}; architecture: {}); this package will be omitted from the output", packageName, packageVersion, packageArchitecture);
             return Optional.empty();
         }
         return Optional.of(new PackageDetails(packageName, packageVersion, packageArchitecture));
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/ConanCodeLocationGenerator.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/ConanCodeLocationGenerator.java
index 5ee774cb13..3c145a478d 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/ConanCodeLocationGenerator.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/ConanCodeLocationGenerator.java
@@ -46,8 +46,11 @@ public ConanDetectableResult generateCodeLocationFromNodeMap(ExternalIdFactory e
         populateGraphUnderNode(rootGraphNode, nodes);
         MutableMapDependencyGraph dependencyGraph = new MutableMapDependencyGraph();
         CodeLocation codeLocation = generateCodeLocationFromConanGraph(externalIdFactory, dependencyGraph, rootGraphNode);
-        return new ConanDetectableResult(rootGraphNode.getConanNode().getName().orElse(null),
-            rootGraphNode.getConanNode().getVersion().orElse(null), codeLocation);
+        return new ConanDetectableResult(
+            rootGraphNode.getConanNode().getName().orElse(null),
+            rootGraphNode.getConanNode().getVersion().orElse(null),
+            codeLocation
+        );
     }
 
     private void populateGraphUnderNode(ConanGraphNode curGraphNode, Map<String, ConanNode<String>> graphNodes) throws DetectableException {
@@ -98,7 +101,8 @@ private Dependency generateDependency(ExternalIdFactory externalIdFactory, Conan
             graphNode.getConanNode().getVersion().orElseThrow(
                 () -> new DetectableException(String.format("Missing dependency version: %s", graphNode.getConanNode()))
             ),
-            externalId);
+            externalId
+        );
     }
 
     @NotNull
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/ConanExternalIdVersionGenerator.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/ConanExternalIdVersionGenerator.java
index aedd84ad8d..2100027b77 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/ConanExternalIdVersionGenerator.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/ConanExternalIdVersionGenerator.java
@@ -12,21 +12,25 @@ public static String generateExternalIdVersionString(ConanNode<String> node, boo
             preferLongFormExternalIds) {
             // generate long form
             // <name>/<version>@<user>/<channel>#<recipe_revision>:<package_id>#<package_revision>
-            externalIdVersion = String.format("%s@%s/%s#%s:%s#%s",
+            externalIdVersion = String.format(
+                "%s@%s/%s#%s:%s#%s",
                 node.getVersion().orElseThrow(() -> new DetectableException(String.format("Missing dependency version: %s", node))),
                 node.getUser().orElse("_"),
                 node.getChannel().orElse("_"),
                 node.getRecipeRevision().get(),
                 node.getPackageId().orElse("0"),
-                node.getPackageRevision().get());
+                node.getPackageRevision().get()
+            );
         } else {
             // generate short form
             // <name>/<version>@<user>/<channel>#<recipe_revision>
-            externalIdVersion = String.format("%s@%s/%s#%s",
+            externalIdVersion = String.format(
+                "%s@%s/%s#%s",
                 node.getVersion().orElseThrow(() -> new DetectableException(String.format("Missing dependency version: %s", node))),
                 node.getUser().orElse("_"),
                 node.getChannel().orElse("_"),
-                node.getRecipeRevision().orElse("0"));
+                node.getRecipeRevision().orElse("0")
+            );
         }
         return externalIdVersion;
     }
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/cli/parser/ConanInfoLineAnalyzer.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/cli/parser/ConanInfoLineAnalyzer.java
index 030f2405fe..dfb123a0a0 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/cli/parser/ConanInfoLineAnalyzer.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/cli/parser/ConanInfoLineAnalyzer.java
@@ -21,8 +21,7 @@ public int measureIndentDepth(String line) {
         }
         int leadingSpaceCount = countLeadingSpaces(line);
         if ((leadingSpaceCount % 4) != 0) {
-            logger.warn("Leading space count for '{}' is {}; expected it to be divisible by 4",
-                line, leadingSpaceCount);
+            logger.warn("Leading space count for '{}' is {}; expected it to be divisible by 4", line, leadingSpaceCount);
         }
         return countLeadingSpaces(line) / 4;
     }
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/graph/ConanNode.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/graph/ConanNode.java
index 24033a79e7..c666cc07bd 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/graph/ConanNode.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/graph/ConanNode.java
@@ -22,11 +22,20 @@
     private final List<T> buildRequiresRefs;
     private final boolean rootNode;
 
-    public ConanNode(String ref, String path, String name, String version, String user, String channel,
-        String recipeRevision, String packageId, String packageRevision,
+    public ConanNode(
+        String ref,
+        String path,
+        String name,
+        String version,
+        String user,
+        String channel,
+        String recipeRevision,
+        String packageId,
+        String packageRevision,
         List<T> requiresRefs,
         List<T> buildRequiresRefs,
-        boolean rootNode) {
+        boolean rootNode
+    ) {
         this.ref = ref;
         this.path = path;
         this.name = name;
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/graph/ConanNodeBuilder.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/graph/ConanNodeBuilder.java
index 98eb44183b..1f7930ca1e 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/graph/ConanNodeBuilder.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/graph/ConanNodeBuilder.java
@@ -131,10 +131,20 @@ public ConanNodeBuilder(ConanNode<Integer> initializingNode) {
         if (forcedRootNode || (path != null)) {
             isRootNode = true;
         }
-        ConanNode<T> node = new ConanNode<>(ref, path, name, version, user, channel,
-            recipeRevision, packageId, packageRevision,
-            requiresRefs, buildRequiresRefs,
-            isRootNode);
+        ConanNode<T> node = new ConanNode<>(
+            ref,
+            path,
+            name,
+            version,
+            user,
+            channel,
+            recipeRevision,
+            packageId,
+            packageRevision,
+            requiresRefs,
+            buildRequiresRefs,
+            isRootNode
+        );
         logger.trace("node: {}", node);
         return Optional.of(node);
     }
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/lockfile/ConanLockfileDetectable.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/lockfile/ConanLockfileDetectable.java
index fad4f1d3d8..124dbffb37 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/lockfile/ConanLockfileDetectable.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/lockfile/ConanLockfileDetectable.java
@@ -28,8 +28,7 @@
     private final ConanLockfileExtractorOptions conanLockfileExtractorOptions;
     private File lockfile;
 
-    public ConanLockfileDetectable(DetectableEnvironment environment, FileFinder fileFinder, ConanLockfileExtractor conanLockfileExtractor,
-        ConanLockfileExtractorOptions conanLockfileExtractorOptions) {
+    public ConanLockfileDetectable(DetectableEnvironment environment, FileFinder fileFinder, ConanLockfileExtractor conanLockfileExtractor, ConanLockfileExtractorOptions conanLockfileExtractorOptions) {
         super(environment);
         this.fileFinder = fileFinder;
         this.conanLockfileExtractor = conanLockfileExtractor;
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/lockfile/parser/ConanLockfileParser.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/lockfile/parser/ConanLockfileParser.java
index 51c1589828..80341b8547 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/lockfile/parser/ConanLockfileParser.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/conan/lockfile/parser/ConanLockfileParser.java
@@ -55,7 +55,8 @@ public ConanDetectableResult generateCodeLocationFromConanLockfileContents(Strin
             logger.trace("{}: {}:{}#{}", entry.getKey(),
                 entry.getValue().getRef().orElse("?"),
                 entry.getValue().getPackageId().orElse("?"),
-                entry.getValue().getPackageRevision().orElse("?"));
+                entry.getValue().getPackageRevision().orElse("?")
+            );
             ConanLockfileNode lockfileNode = entry.getValue();
             Optional<ConanNode<Integer>> conanNode = generateConanNode(entry.getKey(), lockfileNode);
             conanNode.ifPresent(node -> graphNodes.put(entry.getKey(), node));
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/dart/pubdep/DartPubDepDetectable.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/dart/pubdep/DartPubDepDetectable.java
index 8854280b44..6998f30800 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/dart/pubdep/DartPubDepDetectable.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/dart/pubdep/DartPubDepDetectable.java
@@ -40,8 +40,14 @@
     private ExecutableTarget dartExe;
     private ExecutableTarget flutterExe;
 
-    public DartPubDepDetectable(DetectableEnvironment environment, FileFinder fileFinder, PubDepsExtractor pubDepsExtractor, DartPubDepsDetectableOptions dartPubDepsDetectableOptions, DartResolver dartResolver,
-        FlutterResolver flutterResolver) {
+    public DartPubDepDetectable(
+        DetectableEnvironment environment,
+        FileFinder fileFinder,
+        PubDepsExtractor pubDepsExtractor,
+        DartPubDepsDetectableOptions dartPubDepsDetectableOptions,
+        DartResolver dartResolver,
+        FlutterResolver flutterResolver
+    ) {
         super(environment);
         this.fileFinder = fileFinder;
         this.pubDepsExtractor = pubDepsExtractor;
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/dart/pubdep/PubDepsExtractor.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/dart/pubdep/PubDepsExtractor.java
index 2b73067948..63f6dc5f9a 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/dart/pubdep/PubDepsExtractor.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/dart/pubdep/PubDepsExtractor.java
@@ -29,8 +29,7 @@
     private PubSpecYamlNameVersionParser nameVersionParser;
     private final ToolVersionLogger toolVersionLogger;
 
-    public PubDepsExtractor(DetectableExecutableRunner executableRunner, PubDepsParser pubDepsParser, PubSpecYamlNameVersionParser nameVersionParser,
-        ToolVersionLogger toolVersionLogger) {
+    public PubDepsExtractor(DetectableExecutableRunner executableRunner, PubDepsParser pubDepsParser, PubSpecYamlNameVersionParser nameVersionParser, ToolVersionLogger toolVersionLogger) {
         this.executableRunner = executableRunner;
         this.pubDepsParser = pubDepsParser;
         this.nameVersionParser = nameVersionParser;
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/docker/DockerDetectable.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/docker/DockerDetectable.java
index 142039c59f..7cebe2b645 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/docker/DockerDetectable.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/docker/DockerDetectable.java
@@ -34,8 +34,14 @@
     private ExecutableTarget dockerExe;
     private DockerInspectorInfo dockerInspectorInfo;
 
-    public DockerDetectable(DetectableEnvironment environment, DockerInspectorResolver dockerInspectorResolver, JavaResolver javaResolver, DockerResolver dockerResolver,
-        DockerExtractor dockerExtractor, DockerDetectableOptions dockerDetectableOptions) {
+    public DockerDetectable(
+        DetectableEnvironment environment,
+        DockerInspectorResolver dockerInspectorResolver,
+        JavaResolver javaResolver,
+        DockerResolver dockerResolver,
+        DockerExtractor dockerExtractor,
+        DockerDetectableOptions dockerDetectableOptions
+    ) {
         super(environment);
         this.javaResolver = javaResolver;
         this.dockerResolver = dockerResolver;
@@ -90,7 +96,8 @@ public Extraction extract(ExtractionEnvironment extractionEnvironment) {
         String imageId = dockerDetectableOptions.getSuppliedDockerImageId().orElse("");
         String tar = dockerDetectableOptions.getSuppliedDockerTar().orElse("");
         return dockerExtractor.extract(environment.getDirectory(), extractionEnvironment.getOutputDirectory(), dockerExe, javaExe, image, imageId, tar, dockerInspectorInfo,
-            new DockerProperties(dockerDetectableOptions)); //TODO, doesn't feel right to construct properties here. -jp
+            new DockerProperties(dockerDetectableOptions)
+        ); //TODO, doesn't feel right to construct properties here. -jp
     }
 }
 
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/docker/DockerDetectableOptions.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/docker/DockerDetectableOptions.java
index cee2a00d45..43b50066f8 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/docker/DockerDetectableOptions.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/docker/DockerDetectableOptions.java
@@ -18,8 +18,17 @@
     private final Path dockerInspectorPath;
     private final String dockerPlatformTopLayerId;
 
-    public DockerDetectableOptions(boolean dockerPathRequired, String suppliedDockerImage, String suppliedDockerImageId, String suppliedDockerTar, LogLevel dockerInspectorLoggingLevel,
-        String dockerInspectorVersion, Map<String, String> additionalDockerProperties, Path dockerInspectorPath, String dockerPlatformTopLayerId) {
+    public DockerDetectableOptions(
+        boolean dockerPathRequired,
+        String suppliedDockerImage,
+        String suppliedDockerImageId,
+        String suppliedDockerTar,
+        LogLevel dockerInspectorLoggingLevel,
+        String dockerInspectorVersion,
+        Map<String, String> additionalDockerProperties,
+        Path dockerInspectorPath,
+        String dockerPlatformTopLayerId
+    ) {
         this.dockerPathRequired = dockerPathRequired;
         this.suppliedDockerImage = suppliedDockerImage;
         this.suppliedDockerImageId = suppliedDockerImageId;
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/docker/DockerExtractor.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/docker/DockerExtractor.java
index c5fab20b13..03973e2ce5 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/docker/DockerExtractor.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/docker/DockerExtractor.java
@@ -69,8 +69,17 @@ public DockerExtractor(FileFinder fileFinder, DetectableExecutableRunner executa
         this.gson = gson;
     }
 
-    public Extraction extract(File directory, File outputDirectory, ExecutableTarget dockerExe, ExecutableTarget javaExe, String image, String imageId, String tar, DockerInspectorInfo dockerInspectorInfo,
-        DockerProperties dockerProperties) {
+    public Extraction extract(
+        File directory,
+        File outputDirectory,
+        ExecutableTarget dockerExe,
+        ExecutableTarget javaExe,
+        String image,
+        String imageId,
+        String tar,
+        DockerInspectorInfo dockerInspectorInfo,
+        DockerProperties dockerProperties
+    ) {
         try {
             String imageArgument = null;
             String imagePiece = null;
@@ -114,18 +123,22 @@ private void loadDockerImage(File directory, Map<String, String> environmentVari
         List<String> dockerImportArguments = Arrays.asList(
             "load",
             "-i",
-            imageToImport.getCanonicalPath());
+            imageToImport.getCanonicalPath()
+        );
         Executable dockerImportImageExecutable = ExecutableUtils.createFromTarget(directory, environmentVariables, dockerExe, dockerImportArguments);
         ExecutableOutput exeOut = executableRunner.execute(dockerImportImageExecutable);
         if (exeOut.getReturnCode() != 0) {
             throw new IntegrationException(String.format("Command %s %s returned %d: %s",
                 dockerExe.toCommand(), dockerImportArguments,
-                exeOut.getReturnCode(), exeOut.getErrorOutput()));
+                exeOut.getReturnCode(), exeOut.getErrorOutput()
+            ));
         }
     }
 
-    private Extraction executeDocker(File outputDirectory, String imageArgument, String suppliedImagePiece, String dockerTarFilePath, File directory, ExecutableTarget javaExe, ExecutableTarget dockerExe,
-        DockerInspectorInfo dockerInspectorInfo, DockerProperties dockerProperties)
+    private Extraction executeDocker(
+        File outputDirectory, String imageArgument, String suppliedImagePiece, String dockerTarFilePath, File directory, ExecutableTarget javaExe, ExecutableTarget dockerExe,
+        DockerInspectorInfo dockerInspectorInfo, DockerProperties dockerProperties
+    )
         throws IOException, ExecutableRunnerException {
 
         File dockerPropertiesFile = new File(outputDirectory, "application.properties");
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/docker/DockerInspectorInfo.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/docker/DockerInspectorInfo.java
index 55efeda3ab..af6ea279f2 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/docker/DockerInspectorInfo.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/docker/DockerInspectorInfo.java
@@ -14,8 +14,7 @@ public DockerInspectorInfo(File dockerInspectorJar) {
         this.airGapInspectorImageTarFiles = null;
     }
 
-    public DockerInspectorInfo(File dockerInspectorJar,
-        List<File> airGapInspectorImageTarFiles) {
+    public DockerInspectorInfo(File dockerInspectorJar, List<File> airGapInspectorImageTarFiles) {
         this.dockerInspectorJar = dockerInspectorJar;
         this.airGapInspectorImageTarFiles = airGapInspectorImageTarFiles;
     }
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/gradle/inspection/GradleDetectable.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/gradle/inspection/GradleDetectable.java
index 52205bfab0..88aed37b3d 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/gradle/inspection/GradleDetectable.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/gradle/inspection/GradleDetectable.java
@@ -39,8 +39,14 @@
     private ExecutableTarget gradleExe;
     private File gradleInspector;
 
-    public GradleDetectable(DetectableEnvironment environment, FileFinder fileFinder, GradleResolver gradleResolver, GradleInspectorResolver gradleInspectorResolver,
-        GradleInspectorExtractor gradleInspectorExtractor, GradleInspectorOptions gradleInspectorOptions) {
+    public GradleDetectable(
+        DetectableEnvironment environment,
+        FileFinder fileFinder,
+        GradleResolver gradleResolver,
+        GradleInspectorResolver gradleInspectorResolver,
+        GradleInspectorExtractor gradleInspectorExtractor,
+        GradleInspectorOptions gradleInspectorOptions
+    ) {
         super(environment);
         this.fileFinder = fileFinder;
         this.gradleResolver = gradleResolver;
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/gradle/inspection/GradleInspectorExtractor.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/gradle/inspection/GradleInspectorExtractor.java
index 8b472bcc5c..8cc4d9299a 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/gradle/inspection/GradleInspectorExtractor.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/gradle/inspection/GradleInspectorExtractor.java
@@ -34,9 +34,14 @@
     private final GradleRootMetadataParser gradleRootMetadataParser;
     private final ToolVersionLogger toolVersionLogger;
 
-    public GradleInspectorExtractor(FileFinder fileFinder, GradleRunner gradleRunner, GradleReportParser gradleReportParser,
+    public GradleInspectorExtractor(
+        FileFinder fileFinder,
+        GradleRunner gradleRunner,
+        GradleReportParser gradleReportParser,
         GradleReportTransformer gradleReportTransformer,
-        GradleRootMetadataParser gradleRootMetadataParser, ToolVersionLogger toolVersionLogger) {
+        GradleRootMetadataParser gradleRootMetadataParser,
+        ToolVersionLogger toolVersionLogger
+    ) {
         this.fileFinder = fileFinder;
         this.gradleRunner = gradleRunner;
         this.gradleReportParser = gradleReportParser;
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/gradle/inspection/inspector/GradleInspectorScriptOptions.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/gradle/inspection/inspector/GradleInspectorScriptOptions.java
index c971a5f062..3088ec7c30 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/gradle/inspection/inspector/GradleInspectorScriptOptions.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/gradle/inspection/inspector/GradleInspectorScriptOptions.java
@@ -11,9 +11,14 @@
     private final String gradleInspectorRepositoryUrl;
     private final String providedOnlineInspectorVersion;
 
-    public GradleInspectorScriptOptions(List<String> excludedProjectNames, List<String> includedProjectNames, List<String> excludedConfigurationNames, List<String> includedConfigurationNames,
+    public GradleInspectorScriptOptions(
+        List<String> excludedProjectNames,
+        List<String> includedProjectNames,
+        List<String> excludedConfigurationNames,
+        List<String> includedConfigurationNames,
         String gradleInspectorRepositoryUrl,
-        String providedOnlineInspectorVersion) {
+        String providedOnlineInspectorVersion
+    ) {
         this.excludedProjectNames = excludedProjectNames;
         this.includedProjectNames = includedProjectNames;
         this.excludedConfigurationNames = excludedConfigurationNames;
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/gradle/parsing/GradleProjectInspectorDetectable.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/gradle/parsing/GradleProjectInspectorDetectable.java
index cbac97511e..719832e7d5 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/gradle/parsing/GradleProjectInspectorDetectable.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/gradle/parsing/GradleProjectInspectorDetectable.java
@@ -28,8 +28,13 @@
 
     private ExecutableTarget inspector;
 
-    public GradleProjectInspectorDetectable(DetectableEnvironment environment, FileFinder fileFinder, ProjectInspectorResolver projectInspectorResolver,
-        ProjectInspectorExtractor projectInspectorExtractor, ProjectInspectorOptions projectInspectorOptions) {
+    public GradleProjectInspectorDetectable(
+        DetectableEnvironment environment,
+        FileFinder fileFinder,
+        ProjectInspectorResolver projectInspectorResolver,
+        ProjectInspectorExtractor projectInspectorExtractor,
+        ProjectInspectorOptions projectInspectorOptions
+    ) {
         super(environment);
         this.fileFinder = fileFinder;
         this.projectInspectorResolver = projectInspectorResolver;
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/lerna/LernaPackager.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/lerna/LernaPackager.java
index 8287473247..2b903c1c46 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/lerna/LernaPackager.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/lerna/LernaPackager.java
@@ -163,7 +163,8 @@ private LernaResult parse(File directory, File packageJson, LernaLockFileResult
         } else {
             return LernaResult.failure(
                 new FileNotFoundException(
-                    String.format("Lerna extraction from %s requires one of the following files: %s, %s, %s",
+                    String.format(
+                        "Lerna extraction from %s requires one of the following files: %s, %s, %s",
                         directory.getAbsolutePath(),
                         LernaDetectable.PACKAGE_LOCK_JSON,
                         LernaDetectable.SHRINKWRAP_JSON,
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/maven/cli/MavenCliExtractor.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/maven/cli/MavenCliExtractor.java
index 2fe1a216af..6d5cceb866 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/maven/cli/MavenCliExtractor.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/maven/cli/MavenCliExtractor.java
@@ -24,8 +24,12 @@
     private final CommandParser commandParser;
     private final ToolVersionLogger toolVersionLogger;
 
-    public MavenCliExtractor(DetectableExecutableRunner executableRunner, MavenCodeLocationPackager mavenCodeLocationPackager, CommandParser commandParser,
-        ToolVersionLogger toolVersionLogger) {
+    public MavenCliExtractor(
+        DetectableExecutableRunner executableRunner,
+        MavenCodeLocationPackager mavenCodeLocationPackager,
+        CommandParser commandParser,
+        ToolVersionLogger toolVersionLogger
+    ) {
         this.executableRunner = executableRunner;
         this.mavenCodeLocationPackager = mavenCodeLocationPackager;
         this.commandParser = commandParser;
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/maven/cli/MavenCodeLocationPackager.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/maven/cli/MavenCodeLocationPackager.java
index 71a2c94e7c..88d34f8996 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/maven/cli/MavenCodeLocationPackager.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/maven/cli/MavenCodeLocationPackager.java
@@ -138,15 +138,23 @@ private void populateGraphDependencies(ExcludedIncludedWildcardFilter scopeFilte
         if (level == 1) {
             // a direct dependency, clear the stack and add this as a potential parent for the next line
             if (scopeFilter.shouldInclude(dependency.scope)) {
-                logger.trace(String
-                    .format("Level 1 component %s:%s:%s:%s is in scope; adding it to hierarchy root", dependency.getExternalId().getGroup(), dependency.getExternalId().getName(), dependency.getExternalId().getVersion(),
-                        dependency.scope));
+                logger.trace(String.format(
+                    "Level 1 component %s:%s:%s:%s is in scope; adding it to hierarchy root",
+                    dependency.getExternalId().getGroup(),
+                    dependency.getExternalId().getName(),
+                    dependency.getExternalId().getVersion(),
+                    dependency.scope
+                ));
                 currentGraph.addChildToRoot(dependency);
                 inOutOfScopeTree = false;
             } else {
-                logger.trace(String.format("Level 1 component %s:%s:%s:%s is a top-level out-of-scope component; entering non-scoped tree", dependency.getExternalId().getGroup(), dependency.getExternalId().getName(),
+                logger.trace(String.format(
+                    "Level 1 component %s:%s:%s:%s is a top-level out-of-scope component; entering non-scoped tree",
+                    dependency.getExternalId().getGroup(),
+                    dependency.getExternalId().getName(),
                     dependency.getExternalId().getVersion(),
-                    dependency.scope));
+                    dependency.scope
+                ));
                 inOutOfScopeTree = true;
             }
             dependencyParentStack.clear();
@@ -186,17 +194,18 @@ private void addOrphansToGraph(MutableDependencyGraph graph, List<Dependency> or
         }
     }
 
-    private void addDependencyIfInScope(MutableDependencyGraph currentGraph, List<Dependency> orphans, ExcludedIncludedWildcardFilter scopeFilter, boolean inOutOfScopeTree, Dependency parent,
-        ScopedDependency dependency) {
+    private void addDependencyIfInScope(MutableDependencyGraph currentGraph, List<Dependency> orphans, ExcludedIncludedWildcardFilter scopeFilter, boolean inOutOfScopeTree, Dependency parent, ScopedDependency dependency) {
         if (scopeFilter.shouldInclude(dependency.scope)) {
             if (inOutOfScopeTree) {
                 logger.trace(
                     String.format("component %s:%s:%s:%s is in scope but in a nonScope tree; adding it to orphans", dependency.getExternalId().getGroup(), dependency.getExternalId().getName(), dependency.getExternalId().getVersion(),
-                        dependency.scope));
+                        dependency.scope
+                    ));
                 orphans.add(dependency);
             } else {
                 logger.trace(String.format("component %s:%s:%s:%s is in scope and in an in-scope tree; adding it to hierarchy", dependency.getExternalId().getGroup(), dependency.getExternalId().getName(),
-                    dependency.getExternalId().getVersion(), dependency.scope));
+                    dependency.getExternalId().getVersion(), dependency.scope
+                ));
                 currentGraph.addParentWithChild(parent, dependency);
             }
         }
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/maven/cli/MavenPomDetectable.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/maven/cli/MavenPomDetectable.java
index c6fe98ae56..fd298e9317 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/maven/cli/MavenPomDetectable.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/maven/cli/MavenPomDetectable.java
@@ -24,8 +24,7 @@
 
     private ExecutableTarget mavenExe;
 
-    public MavenPomDetectable(DetectableEnvironment environment, FileFinder fileFinder, MavenResolver mavenResolver, MavenCliExtractor mavenCliExtractor,
-        MavenCliExtractorOptions mavenCliExtractorOptions) {
+    public MavenPomDetectable(DetectableEnvironment environment, FileFinder fileFinder, MavenResolver mavenResolver, MavenCliExtractor mavenCliExtractor, MavenCliExtractorOptions mavenCliExtractorOptions) {
         super(environment);
         this.fileFinder = fileFinder;
         this.mavenResolver = mavenResolver;
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/maven/cli/MavenPomWrapperDetectable.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/maven/cli/MavenPomWrapperDetectable.java
index 23a10f1297..ec0d21f5ee 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/maven/cli/MavenPomWrapperDetectable.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/maven/cli/MavenPomWrapperDetectable.java
@@ -28,8 +28,7 @@
 
     private ExecutableTarget mavenExe;
 
-    public MavenPomWrapperDetectable(DetectableEnvironment environment, FileFinder fileFinder, MavenResolver mavenResolver, MavenCliExtractor mavenCliExtractor,
-        MavenCliExtractorOptions mavenCliExtractorOptions) {
+    public MavenPomWrapperDetectable(DetectableEnvironment environment, FileFinder fileFinder, MavenResolver mavenResolver, MavenCliExtractor mavenCliExtractor, MavenCliExtractorOptions mavenCliExtractorOptions) {
         super(environment);
         this.fileFinder = fileFinder;
         this.mavenResolver = mavenResolver;
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/maven/parsing/MavenProjectInspectorDetectable.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/maven/parsing/MavenProjectInspectorDetectable.java
index 2733b86c3b..4f155b03ec 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/maven/parsing/MavenProjectInspectorDetectable.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/maven/parsing/MavenProjectInspectorDetectable.java
@@ -30,8 +30,14 @@
 
     private ExecutableTarget inspector;
 
-    public MavenProjectInspectorDetectable(DetectableEnvironment detectableEnvironment, FileFinder fileFinder,
-        ProjectInspectorResolver projectInspectorResolver, ProjectInspectorExtractor projectInspectorExtractor, MavenParseOptions mavenParseOptions, ProjectInspectorOptions projectInspectorOptions) {
+    public MavenProjectInspectorDetectable(
+        DetectableEnvironment detectableEnvironment,
+        FileFinder fileFinder,
+        ProjectInspectorResolver projectInspectorResolver,
+        ProjectInspectorExtractor projectInspectorExtractor,
+        MavenParseOptions mavenParseOptions,
+        ProjectInspectorOptions projectInspectorOptions
+    ) {
         super(detectableEnvironment);
         this.fileFinder = fileFinder;
         this.projectInspectorResolver = projectInspectorResolver;
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/npm/lockfile/NpmDependencyConverter.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/npm/lockfile/NpmDependencyConverter.java
index 119d1f7fc5..ae5ef1c0e1 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/npm/lockfile/NpmDependencyConverter.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/npm/lockfile/NpmDependencyConverter.java
@@ -9,7 +9,6 @@
 import org.jetbrains.annotations.Nullable;
 
 import com.synopsys.integration.bdio.model.Forge;
-import com.synopsys.integration.bdio.model.dependency.Dependency;
 import com.synopsys.integration.bdio.model.externalid.ExternalId;
 import com.synopsys.integration.bdio.model.externalid.ExternalIdFactory;
 import com.synopsys.integration.detectable.detectables.npm.lockfile.model.NpmDependency;
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/npm/lockfile/model/NpmDependency.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/npm/lockfile/model/NpmDependency.java
index aeedada24a..b0b18901b0 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/npm/lockfile/model/NpmDependency.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/npm/lockfile/model/NpmDependency.java
@@ -8,7 +8,6 @@
 import com.synopsys.integration.bdio.model.Forge;
 import com.synopsys.integration.bdio.model.dependency.Dependency;
 import com.synopsys.integration.bdio.model.externalid.ExternalId;
-import com.synopsys.integration.bdio.model.externalid.ExternalIdFactory;
 import com.synopsys.integration.detectable.util.ExternalIdCreator;
 
 public class NpmDependency extends Dependency {
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/npm/lockfile/model/NpmProject.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/npm/lockfile/model/NpmProject.java
index e16f458585..5a66f41938 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/npm/lockfile/model/NpmProject.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/npm/lockfile/model/NpmProject.java
@@ -11,8 +11,14 @@
     private final List<NpmRequires> declaredDependencies;
     private final List<NpmDependency> resolvedDependencies;
 
-    public NpmProject(String name, String version, List<NpmRequires> declaredDevDependencies, List<NpmRequires> declaredPeerDependencies,
-        List<NpmRequires> declaredDependencies, List<NpmDependency> resolvedDependencies) {
+    public NpmProject(
+        String name,
+        String version,
+        List<NpmRequires> declaredDevDependencies,
+        List<NpmRequires> declaredPeerDependencies,
+        List<NpmRequires> declaredDependencies,
+        List<NpmDependency> resolvedDependencies
+    ) {
         this.name = name;
         this.version = version;
         this.declaredDevDependencies = declaredDevDependencies;
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/npm/lockfile/parse/NpmLockFileProjectIdTransformer.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/npm/lockfile/parse/NpmLockFileProjectIdTransformer.java
index 0cdf33b63f..af51099c2d 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/npm/lockfile/parse/NpmLockFileProjectIdTransformer.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/npm/lockfile/parse/NpmLockFileProjectIdTransformer.java
@@ -1,6 +1,5 @@
 package com.synopsys.integration.detectable.detectables.npm.lockfile.parse;
 
-import java.util.List;
 import java.util.Optional;
 
 import org.jetbrains.annotations.Nullable;
@@ -13,7 +12,6 @@
 import com.synopsys.integration.bdio.model.externalid.ExternalIdFactory;
 import com.synopsys.integration.detectable.detectables.npm.lockfile.model.PackageLock;
 import com.synopsys.integration.detectable.detectables.npm.packagejson.model.PackageJson;
-import com.synopsys.integration.util.NameVersion;
 
 public class NpmLockFileProjectIdTransformer {
     private final Logger logger = LoggerFactory.getLogger(NpmLockFileProjectIdTransformer.class);
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/npm/lockfile/parse/NpmLockfileGraphTransformer.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/npm/lockfile/parse/NpmLockfileGraphTransformer.java
index 6bdabadaf8..4071ae675d 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/npm/lockfile/parse/NpmLockfileGraphTransformer.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/npm/lockfile/parse/NpmLockfileGraphTransformer.java
@@ -104,8 +104,11 @@ private Dependency lookupProjectOrExternal(String name, List<NpmDependency> proj
             return projectDependency;
         } else {
             Optional<NameVersion> externalNameVersion = externalDependencies.stream().filter(it -> it.getName().equals(name)).findFirst();
-            return externalNameVersion.map(nameVersion -> new Dependency(nameVersion.getName(), nameVersion.getVersion(),
-                externalIdFactory.createNameVersionExternalId(Forge.NPMJS, nameVersion.getName(), nameVersion.getVersion()))).orElse(null);
+            return externalNameVersion.map(nameVersion -> new Dependency(
+                nameVersion.getName(),
+                nameVersion.getVersion(),
+                externalIdFactory.createNameVersionExternalId(Forge.NPMJS, nameVersion.getName(), nameVersion.getVersion())
+            )).orElse(null);
         }
     }
 
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/npm/packagejson/PackageJsonExtractor.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/npm/packagejson/PackageJsonExtractor.java
index 80a88cdbde..ec5eb3ca06 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/npm/packagejson/PackageJsonExtractor.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/npm/packagejson/PackageJsonExtractor.java
@@ -43,7 +43,7 @@ public Extraction extract(PackageJson packageJson) {
         List<Dependency> dependencies = transformDependencies(packageJson.dependencies);
         npmDependencyTypeFilter.ifShouldInclude(NpmDependencyType.DEV, transformDependencies(packageJson.devDependencies), dependencies::addAll);
         npmDependencyTypeFilter.ifShouldInclude(NpmDependencyType.PEER, transformDependencies(packageJson.peerDependencies), dependencies::addAll);
-        
+
         MutableMapDependencyGraph dependencyGraph = new MutableMapDependencyGraph();
         dependencyGraph.addChildrenToRoot(dependencies);
 
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/nuget/NugetProjectDetectable.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/nuget/NugetProjectDetectable.java
index aedf53ff90..681af9ab46 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/nuget/NugetProjectDetectable.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/nuget/NugetProjectDetectable.java
@@ -82,8 +82,13 @@
     private NugetInspector inspector;
     private List<File> projectFiles = new ArrayList<>();
 
-    public NugetProjectDetectable(DetectableEnvironment detectableEnvironment, FileFinder fileFinder, NugetInspectorOptions nugetInspectorOptions, NugetInspectorResolver nugetInspectorResolver,
-        NugetInspectorExtractor nugetInspectorExtractor) {
+    public NugetProjectDetectable(
+        DetectableEnvironment detectableEnvironment,
+        FileFinder fileFinder,
+        NugetInspectorOptions nugetInspectorOptions,
+        NugetInspectorResolver nugetInspectorResolver,
+        NugetInspectorExtractor nugetInspectorExtractor
+    ) {
         super(detectableEnvironment);
         this.fileFinder = fileFinder;
         this.nugetInspectorOptions = nugetInspectorOptions;
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/nuget/NugetProjectInspectorDetectable.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/nuget/NugetProjectInspectorDetectable.java
index dcfb6748bd..f4d23e016f 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/nuget/NugetProjectInspectorDetectable.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/nuget/NugetProjectInspectorDetectable.java
@@ -31,8 +31,14 @@
 
     private ExecutableTarget inspector;
 
-    public NugetProjectInspectorDetectable(DetectableEnvironment detectableEnvironment, FileFinder fileFinder, NugetInspectorOptions nugetInspectorOptions,
-        ProjectInspectorResolver projectInspectorResolver, ProjectInspectorExtractor projectInspectorExtractor, ProjectInspectorOptions projectInspectorOptions) {
+    public NugetProjectInspectorDetectable(
+        DetectableEnvironment detectableEnvironment,
+        FileFinder fileFinder,
+        NugetInspectorOptions nugetInspectorOptions,
+        ProjectInspectorResolver projectInspectorResolver,
+        ProjectInspectorExtractor projectInspectorExtractor,
+        ProjectInspectorOptions projectInspectorOptions
+    ) {
         super(detectableEnvironment);
         this.fileFinder = fileFinder;
         this.projectInspectorResolver = projectInspectorResolver;
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/nuget/NugetSolutionDetectable.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/nuget/NugetSolutionDetectable.java
index 71a0271228..60503475b3 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/nuget/NugetSolutionDetectable.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/nuget/NugetSolutionDetectable.java
@@ -34,8 +34,13 @@
     private NugetInspector inspector;
     private List<File> solutionFiles = new ArrayList<>();
 
-    public NugetSolutionDetectable(DetectableEnvironment environment, FileFinder fileFinder, NugetInspectorResolver nugetInspectorManager, NugetInspectorExtractor nugetInspectorExtractor,
-        NugetInspectorOptions nugetInspectorOptions) {
+    public NugetSolutionDetectable(
+        DetectableEnvironment environment,
+        FileFinder fileFinder,
+        NugetInspectorResolver nugetInspectorManager,
+        NugetInspectorExtractor nugetInspectorExtractor,
+        NugetInspectorOptions nugetInspectorOptions
+    ) {
         super(environment);
         this.fileFinder = fileFinder;
         this.nugetInspectorExtractor = nugetInspectorExtractor;
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/pear/PearCliExtractor.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/pear/PearCliExtractor.java
index 47c22fed2a..05e9ac98ba 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/pear/PearCliExtractor.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/pear/PearCliExtractor.java
@@ -36,8 +36,14 @@
     private final PearPackageDependenciesParser pearPackageDependenciesParser;
     private final PearListParser pearListParser;
 
-    public PearCliExtractor(ExternalIdFactory externalIdFactory, DetectableExecutableRunner executableRunner, PearDependencyGraphTransformer pearDependencyGraphTransformer, PearPackageXmlParser pearPackageXmlParser,
-        PearPackageDependenciesParser pearPackageDependenciesParser, PearListParser pearListParser) {
+    public PearCliExtractor(
+        ExternalIdFactory externalIdFactory,
+        DetectableExecutableRunner executableRunner,
+        PearDependencyGraphTransformer pearDependencyGraphTransformer,
+        PearPackageXmlParser pearPackageXmlParser,
+        PearPackageDependenciesParser pearPackageDependenciesParser,
+        PearListParser pearListParser
+    ) {
         this.externalIdFactory = externalIdFactory;
         this.executableRunner = executableRunner;
         this.pearDependencyGraphTransformer = pearDependencyGraphTransformer;
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/pip/inspector/PipInspectorDetectable.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/pip/inspector/PipInspectorDetectable.java
index a471d33ba2..6c170ca4b9 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/pip/inspector/PipInspectorDetectable.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/pip/inspector/PipInspectorDetectable.java
@@ -42,8 +42,15 @@
     private File setupFile;
     private List<Path> requirementsFiles;
 
-    public PipInspectorDetectable(DetectableEnvironment environment, FileFinder fileFinder, PythonResolver pythonResolver, PipResolver pipResolver,
-        PipInspectorResolver pipInspectorResolver, PipInspectorExtractor pipInspectorExtractor, PipInspectorDetectableOptions pipInspectorDetectableOptions) {
+    public PipInspectorDetectable(
+        DetectableEnvironment environment,
+        FileFinder fileFinder,
+        PythonResolver pythonResolver,
+        PipResolver pipResolver,
+        PipInspectorResolver pipInspectorResolver,
+        PipInspectorExtractor pipInspectorExtractor,
+        PipInspectorDetectableOptions pipInspectorDetectableOptions
+    ) {
         super(environment);
         this.fileFinder = fileFinder;
         this.pythonResolver = pythonResolver;
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/pip/inspector/parser/PipInspectorTreeParser.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/pip/inspector/parser/PipInspectorTreeParser.java
index 9299129851..4dafe326e9 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/pip/inspector/parser/PipInspectorTreeParser.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/pip/inspector/parser/PipInspectorTreeParser.java
@@ -93,7 +93,8 @@ private void adviseIfUnresolvedPackages(int unResolvedPackageCount) {
         if (unResolvedPackageCount > 0) {
             logger.error(
                 "The Pip inspector was unable to resolve {} packages. Please check to be sure all packages have been installed with 'pip install'. Refer to 'Python support' in the Detect documentation for important information regarding Python projects.",
-                unResolvedPackageCount);
+                unResolvedPackageCount
+            );
         }
     }
 
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/pipenv/PipenvDetectable.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/pipenv/PipenvDetectable.java
index 18c61a073d..0a637ec120 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/pipenv/PipenvDetectable.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/pipenv/PipenvDetectable.java
@@ -33,8 +33,7 @@
     private ExecutableTarget pipenvExe;
     private File setupFile;
 
-    public PipenvDetectable(DetectableEnvironment environment, PipenvDetectableOptions pipenvDetectableOptions, FileFinder fileFinder, PythonResolver pythonResolver, PipenvResolver pipenvResolver,
-        PipenvExtractor pipenvExtractor) {
+    public PipenvDetectable(DetectableEnvironment environment, PipenvDetectableOptions pipenvDetectableOptions, FileFinder fileFinder, PythonResolver pythonResolver, PipenvResolver pipenvResolver, PipenvExtractor pipenvExtractor) {
         super(environment);
         this.pipenvDetectableOptions = pipenvDetectableOptions;
         this.fileFinder = fileFinder;
@@ -75,7 +74,8 @@ public DetectableResult extractable() throws DetectableException {
     public Extraction extract(ExtractionEnvironment extractionEnvironment) {
         //TODO: Handle null better.
         return pipenvExtractor.extract(environment.getDirectory(), pythonExe, pipenvExe, setupFile, pipenvDetectableOptions.getPipProjectName().orElse(""), pipenvDetectableOptions.getPipProjectVersionName().orElse(""),
-            pipenvDetectableOptions.isPipProjectTreeOnly());
+            pipenvDetectableOptions.isPipProjectTreeOnly()
+        );
     }
 
 }
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/sbt/SbtDetectable.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/sbt/SbtDetectable.java
index 39e792f487..bbca34cf58 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/sbt/SbtDetectable.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/sbt/SbtDetectable.java
@@ -44,9 +44,15 @@
     private ExecutableTarget sbt;
     private boolean foundPlugin;
 
-    public SbtDetectable(DetectableEnvironment environment, FileFinder fileFinder, SbtResolutionCacheExtractor sbtResolutionCacheExtractor,
-        SbtResolutionCacheOptions sbtResolutionCacheOptions, SbtResolver sbtResolver, SbtDotExtractor sbtPluginExtractor,
-        SbtPluginFinder sbtPluginFinder) {
+    public SbtDetectable(
+        DetectableEnvironment environment,
+        FileFinder fileFinder,
+        SbtResolutionCacheExtractor sbtResolutionCacheExtractor,
+        SbtResolutionCacheOptions sbtResolutionCacheOptions,
+        SbtResolver sbtResolver,
+        SbtDotExtractor sbtPluginExtractor,
+        SbtPluginFinder sbtPluginFinder
+    ) {
         super(environment);
         this.fileFinder = fileFinder;
         this.sbtResolutionCacheExtractor = sbtResolutionCacheExtractor;
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/sbt/dot/SbtDotExtractor.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/sbt/dot/SbtDotExtractor.java
index 2d1dc04d01..d0ad12e0df 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/sbt/dot/SbtDotExtractor.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/sbt/dot/SbtDotExtractor.java
@@ -31,9 +31,14 @@
     private final SbtDotGraphNodeParser graphNodeParser;
     private final SbtCommandArgumentGenerator sbtCommandArgumentGenerator;
 
-    public SbtDotExtractor(DetectableExecutableRunner executableRunner, SbtDotOutputParser sbtDotOutputParser, SbtRootNodeFinder sbtRootNodeFinder,
-        SbtGraphParserTransformer sbtGraphParserTransformer, SbtDotGraphNodeParser graphNodeParser,
-        SbtCommandArgumentGenerator sbtCommandArgumentGenerator) {
+    public SbtDotExtractor(
+        DetectableExecutableRunner executableRunner,
+        SbtDotOutputParser sbtDotOutputParser,
+        SbtRootNodeFinder sbtRootNodeFinder,
+        SbtGraphParserTransformer sbtGraphParserTransformer,
+        SbtDotGraphNodeParser graphNodeParser,
+        SbtCommandArgumentGenerator sbtCommandArgumentGenerator
+    ) {
         this.executableRunner = executableRunner;
         this.sbtDotOutputParser = sbtDotOutputParser;
         this.sbtRootNodeFinder = sbtRootNodeFinder;
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/xcode/process/PackageResolvedTransformer.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/xcode/process/PackageResolvedTransformer.java
index 1c1c3f7ed4..e80bff2aeb 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/xcode/process/PackageResolvedTransformer.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/xcode/process/PackageResolvedTransformer.java
@@ -53,7 +53,8 @@ public DependencyGraph transform(PackageResolved packageResolved) {
             return Optional.of(new Dependency(name, version, externalId));
         } catch (MalformedURLException exception) {
             logger.warn(String.format("Package '%s' has a malformed url. It cannot be added to the graph.", resolvedPackage.getPackageName()));
-            logger.debug(String.format("Package '%s', Version '%s', Branch '%s', Revision: '%s', MalformedURL '%s'",
+            logger.debug(String.format(
+                "Package '%s', Version '%s', Branch '%s', Revision: '%s', MalformedURL '%s'",
                 resolvedPackage.getPackageName(),
                 packageState.getVersion(),
                 StringUtils.defaultIfEmpty(packageState.getBranch(), "N/A"),
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/yarn/YarnTransformer.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/yarn/YarnTransformer.java
index 5389fac90e..783971b8f2 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/yarn/YarnTransformer.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/yarn/YarnTransformer.java
@@ -52,8 +52,7 @@ public YarnTransformer(ExternalIdFactory externalIdFactory, EnumListFilter<YarnD
             if ((workspaceFilter == null) || workspaceFilter.shouldInclude(workspace.getWorkspacePackageJson().getDirRelativePath())) {
                 logger.debug("Adding root dependencies for workspace: {}", workspace.getWorkspacePackageJson().getDirRelativePath());
                 DependencyGraph workspaceGraph = buildGraphForProjectOrWorkspace(yarnLockResult, workspace.getWorkspacePackageJson().getPackageJson(), externalDependencies);
-                ExternalId workspaceExternalId = externalIdFactory.createNameVersionExternalId(Forge.NPMJS, workspace.getWorkspacePackageJson().getDirRelativePath(),
-                    "local");
+                ExternalId workspaceExternalId = externalIdFactory.createNameVersionExternalId(Forge.NPMJS, workspace.getWorkspacePackageJson().getDirRelativePath(), "local");
                 codeLocations.add(new CodeLocation(workspaceGraph, workspaceExternalId));
             }
         }
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/yarn/parse/YarnLockLineAnalyzer.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/yarn/parse/YarnLockLineAnalyzer.java
index 7ceccdbecb..fb72c505d5 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/yarn/parse/YarnLockLineAnalyzer.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/yarn/parse/YarnLockLineAnalyzer.java
@@ -14,8 +14,7 @@ public int measureIndentDepth(String line) {
         }
         int leadingSpaceCount = countLeadingSpaces(line);
         if ((leadingSpaceCount % SPACES_INDENT_PER_LEVEL) != 0) {
-            logger.warn("Leading space count for '{}' is {}; expected it to be divisible by {}",
-                line, leadingSpaceCount, SPACES_INDENT_PER_LEVEL);
+            logger.warn("Leading space count for '{}' is {}; expected it to be divisible by {}", line, leadingSpaceCount, SPACES_INDENT_PER_LEVEL);
         }
         return leadingSpaceCount / SPACES_INDENT_PER_LEVEL;
     }
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/yarn/parse/entry/section/YarnLockDependencyListSectionParser.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/yarn/parse/entry/section/YarnLockDependencyListSectionParser.java
index 41a436fef1..d8ec31079f 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/yarn/parse/entry/section/YarnLockDependencyListSectionParser.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/yarn/parse/entry/section/YarnLockDependencyListSectionParser.java
@@ -13,8 +13,7 @@
     private final String targetListKey;
     private final boolean dependenciesAreOptional;
 
-    public YarnLockDependencyListSectionParser(YarnLockLineAnalyzer yarnLockLineAnalyzer, YarnLockDependencySpecParser yarnLockDependencySpecParser,
-        String targetListKey, boolean dependenciesAreOptional) {
+    public YarnLockDependencyListSectionParser(YarnLockLineAnalyzer yarnLockLineAnalyzer, YarnLockDependencySpecParser yarnLockDependencySpecParser, String targetListKey, boolean dependenciesAreOptional) {
         this.yarnLockLineAnalyzer = yarnLockLineAnalyzer;
         this.yarnLockDependencySpecParser = yarnLockDependencySpecParser;
         this.targetListKey = targetListKey;
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/yarn/parse/entry/section/YarnLockDependencyMetaListSectionParser.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/yarn/parse/entry/section/YarnLockDependencyMetaListSectionParser.java
index c0544c6ab6..bdeca159bf 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/yarn/parse/entry/section/YarnLockDependencyMetaListSectionParser.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/yarn/parse/entry/section/YarnLockDependencyMetaListSectionParser.java
@@ -68,8 +68,7 @@ private void makeDependencyOptional(YarnLockEntryBuilder entryBuilder, String cu
         }
         logger.trace("Marking dependency {}:{} optional", origDependency.getName(), origDependency.getVersion());
         entryBuilder.getDependencies().remove(curDependencyName);
-        YarnLockDependency replacementDependency = new YarnLockDependency(origDependency.getName(),
-            origDependency.getVersion(), true);
+        YarnLockDependency replacementDependency = new YarnLockDependency(origDependency.getName(), origDependency.getVersion(), true);
         entryBuilder.getDependencies().put(curDependencyName, replacementDependency);
     }
 
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/yarn/workspace/YarnWorkspace.java b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/yarn/workspace/YarnWorkspace.java
index 2b0a68ec22..480338f857 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/detectables/yarn/workspace/YarnWorkspace.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/detectables/yarn/workspace/YarnWorkspace.java
@@ -70,8 +70,12 @@ public boolean matches(StringDependencyId givenDependencyId) {
         if (givenDependencyIdString.startsWith(thisWorkspaceName + YarnTransformer.STRING_ID_NAME_VERSION_SEPARATOR)) {
             StringDependencyId thisWorkspaceDependencyId = generateDependencyId();
             if (!givenDependencyId.equals(thisWorkspaceDependencyId)) {
-                logger.warn("Dependency ID {} looks like workspace {}, but expected the Dependency ID to be {}",
-                    givenDependencyId, thisWorkspaceName, thisWorkspaceDependencyId);
+                logger.warn(
+                    "Dependency ID {} looks like workspace {}, but expected the Dependency ID to be {}",
+                    givenDependencyId,
+                    thisWorkspaceName,
+                    thisWorkspaceDependencyId
+                );
             }
             return true;
         }
@@ -81,8 +85,12 @@ public boolean matches(StringDependencyId givenDependencyId) {
     public boolean matches(String name, String version) {
         if (getName().orElse("").equals(name)) {
             if (!version.startsWith(WORKSPACE_VERSION_PREFIX) && !versionMatches(version)) {
-                logger.trace("yarn.lock dependency {} has the same name as a workspace, but the version is {} (vs. {}). Considering them the same anyway.",
-                    name, version, getVersionString());
+                logger.trace(
+                    "yarn.lock dependency {} has the same name as a workspace, but the version is {} (vs. {}). Considering them the same anyway.",
+                    name,
+                    version,
+                    getVersionString()
+                );
             }
             return true;
         }
diff --git a/detectable/src/main/java/com/synopsys/integration/detectable/factory/DetectableFactory.java b/detectable/src/main/java/com/synopsys/integration/detectable/factory/DetectableFactory.java
index aa3a98aeee..40e01a064c 100644
--- a/detectable/src/main/java/com/synopsys/integration/detectable/factory/DetectableFactory.java
+++ b/detectable/src/main/java/com/synopsys/integration/detectable/factory/DetectableFactory.java
@@ -293,8 +293,13 @@ public DetectableFactory(FileFinder fileFinder, DetectableExecutableRunner execu
     //Should be scoped to Prototype so a new Detectable is created every time one is needed.
     //Should only be accessed through the DetectableFactory.
 
-    public DockerDetectable createDockerDetectable(DetectableEnvironment environment, DockerDetectableOptions dockerDetectableOptions, DockerInspectorResolver dockerInspectorResolver, JavaResolver javaResolver,
-        DockerResolver dockerResolver) {
+    public DockerDetectable createDockerDetectable(
+        DetectableEnvironment environment,
+        DockerDetectableOptions dockerDetectableOptions,
+        DockerInspectorResolver dockerInspectorResolver,
+        JavaResolver javaResolver,
+        DockerResolver dockerResolver
+    ) {
         return new DockerDetectable(environment, dockerInspectorResolver, javaResolver, dockerResolver, dockerExtractor(), dockerDetectableOptions);
     }
 
@@ -418,8 +423,10 @@ public MavenParseDetectable createMavenParseDetectable(DetectableEnvironment env
         return new MavenParseDetectable(environment, fileFinder, mavenParseExtractor(), mavenParseOptions);
     }
 
-    public MavenProjectInspectorDetectable createMavenProjectInspectorDetectable(DetectableEnvironment detectableEnvironment, ProjectInspectorResolver projectInspectorResolver, MavenParseOptions mavenParseOptions,
-        ProjectInspectorOptions projectInspectorOptions) {
+    public MavenProjectInspectorDetectable createMavenProjectInspectorDetectable(
+        DetectableEnvironment detectableEnvironment, ProjectInspectorResolver projectInspectorResolver, MavenParseOptions mavenParseOptions,
+        ProjectInspectorOptions projectInspectorOptions
+    ) {
         return new MavenProjectInspectorDetectable(detectableEnvironment, fileFinder, projectInspectorResolver, projectInspectorExtractor(), mavenParseOptions, projectInspectorOptions);
     }
 
@@ -458,8 +465,10 @@ public NugetSolutionDetectable createNugetSolutionDetectable(DetectableEnvironme
         return new NugetSolutionDetectable(environment, fileFinder, nugetInspectorResolver, nugetInspectorExtractor(), nugetInspectorOptions);
     }
 
-    public NugetProjectInspectorDetectable createNugetParseDetectable(DetectableEnvironment environment, NugetInspectorOptions nugetInspectorOptions, ProjectInspectorResolver projectInspectorResolver,
-        ProjectInspectorOptions projectInspectorOptions) {
+    public NugetProjectInspectorDetectable createNugetParseDetectable(
+        DetectableEnvironment environment, NugetInspectorOptions nugetInspectorOptions, ProjectInspectorResolver projectInspectorResolver,
+        ProjectInspectorOptions projectInspectorOptions
+    ) {
         return new NugetProjectInspectorDetectable(environment, fileFinder, nugetInspectorOptions, projectInspectorResolver, projectInspectorExtractor(), projectInspectorOptions);
     }
 
@@ -480,9 +489,11 @@ public PipenvDetectable createPipenvDetectable(DetectableEnvironment environment
         return new PipenvDetectable(environment, pipenvDetectableOptions, fileFinder, pythonResolver, pipenvResolver, pipenvExtractor());
     }
 
-    public PipInspectorDetectable createPipInspectorDetectable(DetectableEnvironment environment, PipInspectorDetectableOptions pipInspectorDetectableOptions, PipInspectorResolver pipInspectorResolver,
+    public PipInspectorDetectable createPipInspectorDetectable(
+        DetectableEnvironment environment, PipInspectorDetectableOptions pipInspectorDetectableOptions, PipInspectorResolver pipInspectorResolver,
         PythonResolver pythonResolver,
-        PipResolver pipResolver) {
+        PipResolver pipResolver
+    ) {
         return new PipInspectorDetectable(environment, fileFinder, pythonResolver, pipResolver, pipInspectorResolver, pipInspectorExtractor(), pipInspectorDetectableOptions);
     }
 
@@ -552,7 +563,8 @@ private BazelExtractor bazelExtractor(BazelDetectableOptions bazelDetectableOpti
         BazelProjectNameGenerator bazelProjectNameGenerator = new BazelProjectNameGenerator();
         return new BazelExtractor(executableRunner, externalIdFactory, bazelWorkspaceFileParser, workspaceRuleChooser, toolVersionLogger, haskellCabalLibraryJsonProtoParser,
             bazelDetectableOptions.getTargetName().orElse(null), bazelDetectableOptions.getWorkspaceRulesFromDeprecatedProperty(), bazelDetectableOptions.getWorkspaceRulesFromProperty(), bazelVariableSubstitutor,
-            bazelProjectNameGenerator);
+            bazelProjectNameGenerator
+        );
     }
 
     private FilePathGenerator filePathGenerator() {
@@ -909,7 +921,8 @@ private GradleRunner gradleRunner() {
 
     private GradleInspectorExtractor gradleInspectorExtractor(GradleInspectorOptions gradleInspectorOptions) {
         return new GradleInspectorExtractor(fileFinder, gradleRunner(), gradleReportParser(), gradleReportTransformer(gradleInspectorOptions), gradleRootMetadataParser(),
-            toolVersionLogger);
+            toolVersionLogger
+        );
     }
 
     private DockerExtractor dockerExtractor() {
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/bazel/functional/bazel/pipeline/PipelinesTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/bazel/functional/bazel/pipeline/PipelinesTest.java
index f957d0bd8c..97d93c3eb3 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/bazel/functional/bazel/pipeline/PipelinesTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/bazel/functional/bazel/pipeline/PipelinesTest.java
@@ -88,7 +88,8 @@
         "  tags = [\"maven_coordinates=com.google.code.findbugs:jsr305:3.0.2\"],",
         "  jars = [\"@exclusion_testing//:v1/https/repo1.maven.org/maven2/com/google/code/findbugs/jsr305/3.0.2/jsr305-3.0.2.jar\"],",
         "  deps = [],",
-        ")");
+        ")"
+    );
 
     private static final String MAVEN_INSTALL_OUTPUT_MIXED_TAGS = createStandardOutput(
         "java_import(",
@@ -119,7 +120,8 @@
         "  srcjar = \"@cls_maven_stubs//:v1/https/build-artifactory.eng.company.com/artifactory/maven/javax/servlet/javax.servlet-api/3.0.1/javax.servlet-api-3.0.1-sources.jar\",",
         "  deps = [],",
         "  neverlink = True,",
-        ")");
+        ")"
+    );
 
     private static final String MAVEN_INSTALL_OUTPUT_MIXED_TAGS_REVERSED_ORDER = createStandardOutput(
         "java_import(",
@@ -130,7 +132,8 @@
         "  generator_location = \"/home/dail/test/b-cls-bazel/2e7559aa3afc160ade8ae4cb99d56da9/external/thing_cis/BUILD.bazel:20\",",
         "  jars = [\"@thing_cis//:java-toolkit/runtime/thing-common-client-2.100.0.jar\"],",
         "  srcjar = \"@thing_cis//:java-toolkit/runtime/thing-common-client-2.100.0-sources.jar\",",
-        ")");
+        ")"
+    );
 
     private static final String HASKELL_CABAL_LIBRARY_JSONPROTO = createStandardOutput(
         "{",
@@ -171,7 +174,8 @@
         "      \"checksum\": \"113f3ed6a7eba369dbe1453fe1da149ce5b6faa1129ed584fd4ad044389cc463\"",
         "    }",
         "  }]",
-        "}");
+        "}"
+    );
 
     @Test
     void testMavenInstall() throws IntegrationException, ExecutableFailedException {
@@ -263,8 +267,12 @@ void testMavenInstallCqueryAdditionalOptions() throws IntegrationException, Exec
     void haskellCabalLibraryTest() throws IntegrationException, ExecutableFailedException {
         Assumptions.assumeFalse(SystemUtils.IS_OS_WINDOWS);
 
-        List<Dependency> dependencies = doTest(WorkspaceRule.HASKELL_CABAL_LIBRARY,
-            HASKELL_CABAL_LIBRARY_STANDARD_BAZEL_COMMAND_ARGS, null, HASKELL_CABAL_LIBRARY_JSONPROTO);
+        List<Dependency> dependencies = doTest(
+            WorkspaceRule.HASKELL_CABAL_LIBRARY,
+            HASKELL_CABAL_LIBRARY_STANDARD_BAZEL_COMMAND_ARGS,
+            null,
+            HASKELL_CABAL_LIBRARY_JSONPROTO
+        );
         assertEquals(1, dependencies.size());
         int foundCount = 0;
         for (Dependency dependency : dependencies) {
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/bazel/functional/bazel/pipeline/WorkspaceRuleChooserTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/bazel/functional/bazel/pipeline/WorkspaceRuleChooserTest.java
index 982fc288af..f4424e08d8 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/bazel/functional/bazel/pipeline/WorkspaceRuleChooserTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/bazel/functional/bazel/pipeline/WorkspaceRuleChooserTest.java
@@ -2,7 +2,6 @@
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
 
-import java.io.IOException;
 import java.util.Set;
 
 import org.apache.commons.compress.utils.Sets;
@@ -16,8 +15,11 @@
 
     private static final Set<WorkspaceRule> WORKSPACE_RULES_JUST_MAVEN_INSTALL = Sets.newHashSet(WorkspaceRule.MAVEN_INSTALL);
     private static final Set<WorkspaceRule> WORKSPACE_RULES_JUST_MAVEN_JAR = Sets.newHashSet(WorkspaceRule.MAVEN_JAR);
-    private static final Set<WorkspaceRule> WORKSPACE_RULES_THREE = Sets.newHashSet(WorkspaceRule.MAVEN_INSTALL,
-        WorkspaceRule.HASKELL_CABAL_LIBRARY, WorkspaceRule.MAVEN_JAR);
+    private static final Set<WorkspaceRule> WORKSPACE_RULES_THREE = Sets.newHashSet(
+        WorkspaceRule.MAVEN_INSTALL,
+        WorkspaceRule.HASKELL_CABAL_LIBRARY,
+        WorkspaceRule.MAVEN_JAR
+    );
     private static final Set<WorkspaceRule> WORKSPACE_RULES_HASKELL = Sets.newHashSet(WorkspaceRule.HASKELL_CABAL_LIBRARY);
 
     @Test
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/bazel/functional/bazel/pipeline/step/FinalStepTransformJsonProtoHaskellCabalLibrariesToHackageTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/bazel/functional/bazel/pipeline/step/FinalStepTransformJsonProtoHaskellCabalLibrariesToHackageTest.java
index cd84cabe59..864e83d536 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/bazel/functional/bazel/pipeline/step/FinalStepTransformJsonProtoHaskellCabalLibrariesToHackageTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/bazel/functional/bazel/pipeline/step/FinalStepTransformJsonProtoHaskellCabalLibrariesToHackageTest.java
@@ -29,7 +29,8 @@ public void testStep() throws IntegrationException, IOException {
         String jsonProtoHaskellCabalLibrary = FileUtils.readFileToString(jsonProtoFile, StandardCharsets.UTF_8);
         FinalStepTransformJsonProtoHaskellCabalLibrariesToHackage step = new FinalStepTransformJsonProtoHaskellCabalLibrariesToHackage(
             new HaskellCabalLibraryJsonProtoParser(new Gson()),
-            new ExternalIdFactory());
+            new ExternalIdFactory()
+        );
         List<String> input = new ArrayList<>(1);
         input.add(jsonProtoHaskellCabalLibrary);
 
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/bazel/unit/BazelDetectableTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/bazel/unit/BazelDetectableTest.java
index 159f2da1f7..5d42e42aee 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/bazel/unit/BazelDetectableTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/bazel/unit/BazelDetectableTest.java
@@ -13,7 +13,6 @@
 import com.synopsys.integration.detectable.detectables.bazel.BazelDetectable;
 import com.synopsys.integration.detectable.detectables.bazel.BazelDetectableOptions;
 import com.synopsys.integration.detectable.detectables.bazel.BazelExtractor;
-import com.synopsys.integration.detectable.detectables.bazel.BazelProjectNameGenerator;
 import com.synopsys.integration.detectable.util.MockDetectableEnvironment;
 
 public class BazelDetectableTest {
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/bitbake/functional/BitbakeDetectableTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/bitbake/functional/BitbakeDetectableTest.java
index 343483470c..57d0c4257d 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/bitbake/functional/BitbakeDetectableTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/bitbake/functional/BitbakeDetectableTest.java
@@ -40,7 +40,8 @@ protected void setup() throws IOException {
         );
         addExecutableOutput(bitbakeGOutput, "bash", "-c", "source " + getSourceDirectory().toFile().getCanonicalPath() + File.separator + "oe-init-build-env; " + "bitbake " + "-g " + "core-image-minimal");
 
-        addFile(Paths.get("task-depends.dot"),
+        addFile(
+            Paths.get("task-depends.dot"),
             "digraph depends {",
             "\"acl.do_build\" [label = \"acl do_build\\n:2.2.52-r0\\n/home/bit/poky/meta/recipes-support/attr/acl_2.2.52.bb\"]",
             "\"acl.do_build\" -> \"acl.do_package_qa\"",
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/bitbake/unit/BitbakeEnvironmentParserTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/bitbake/unit/BitbakeEnvironmentParserTest.java
index 6022b89c69..23533715de 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/bitbake/unit/BitbakeEnvironmentParserTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/bitbake/unit/BitbakeEnvironmentParserTest.java
@@ -5,7 +5,6 @@
 
 import java.util.Arrays;
 import java.util.List;
-import java.util.Optional;
 
 import org.junit.jupiter.api.Test;
 
@@ -20,7 +19,8 @@
         "MACHINE_ARCH=\"" + ARCH + "\"",
         "morestuff",
         "LICENSE_DIRECTORY=\"" + LICENSES_DIR + "\"",
-        "yetmorestuff");
+        "yetmorestuff"
+    );
 
     @Test
     void testParseEnvironment() {
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/bitbake/unit/BitbakeGraphTransformerTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/bitbake/unit/BitbakeGraphTransformerTest.java
index 015a34dbd6..611ffeee5d 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/bitbake/unit/BitbakeGraphTransformerTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/bitbake/unit/BitbakeGraphTransformerTest.java
@@ -13,7 +13,6 @@
 import com.synopsys.integration.bdio.model.externalid.ExternalIdFactory;
 import com.synopsys.integration.detectable.annotations.UnitTest;
 import com.synopsys.integration.detectable.detectable.util.EnumListFilter;
-import com.synopsys.integration.detectable.detectables.bitbake.BitbakeDependencyType;
 import com.synopsys.integration.detectable.detectables.bitbake.model.BitbakeGraph;
 import com.synopsys.integration.detectable.detectables.bitbake.parse.BitbakeGraphTransformer;
 import com.synopsys.integration.detectable.util.graph.GraphAssert;
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/bitbake/unit/GraphNodeLabelParserTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/bitbake/unit/GraphNodeLabelParserTest.java
index a01cb191cb..a6e3833e31 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/bitbake/unit/GraphNodeLabelParserTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/bitbake/unit/GraphNodeLabelParserTest.java
@@ -1,7 +1,6 @@
 package com.synopsys.integration.detectable.detectables.bitbake.unit;
 
 import static org.junit.jupiter.api.Assertions.assertEquals;
-import static org.junit.jupiter.api.Assertions.assertTrue;
 
 import java.util.HashSet;
 import java.util.Set;
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/bitbake/unit/LicenseManifestParserTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/bitbake/unit/LicenseManifestParserTest.java
index 98d9b30295..d407d285f7 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/bitbake/unit/LicenseManifestParserTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/bitbake/unit/LicenseManifestParserTest.java
@@ -31,7 +31,8 @@ void test() throws IntegrationException {
             "PACKAGE NAME: alsa-conf",
             "PACKAGE VERSION: 1.2.5.1",
             "RECIPE NAME: alsa-lib",
-            "LICENSE: LGPLv2.1 & GPLv2+");
+            "LICENSE: LGPLv2.1 & GPLv2+"
+        );
 
         Map<String, String> imageRecipes = parser.collectImageRecipes(lines);
 
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/cargo/functional/CargoDetectableTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/cargo/functional/CargoDetectableTest.java
index 1acfd5ea39..966a5d8619 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/cargo/functional/CargoDetectableTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/cargo/functional/CargoDetectableTest.java
@@ -21,13 +21,15 @@ public CargoDetectableTest() throws IOException {
 
     @Override
     protected void setup() throws IOException {
-        addFile(Paths.get("Cargo.toml"),
+        addFile(
+            Paths.get("Cargo.toml"),
             "[package]",
             "name        = \"cargo-audit\"",
             "version     = \"0.12.0\""
         );
 
-        addFile(Paths.get("Cargo.lock"),
+        addFile(
+            Paths.get("Cargo.lock"),
             "[[package]]",
             "name = \"abscissa_core\"",
             "version = \"0.5.2\"",
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/carthage/CarthageDetectableTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/carthage/CarthageDetectableTest.java
index 1b422f4b75..e3d98b916b 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/carthage/CarthageDetectableTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/carthage/CarthageDetectableTest.java
@@ -20,7 +20,8 @@ public CarthageDetectableTest() throws IOException {
 
     @Override
     protected void setup() throws IOException {
-        addFile(Paths.get("Cartfile.resolved"),
+        addFile(
+            Paths.get("Cartfile.resolved"),
             "binary \"https://downloads.localytics.com/SDKs/iOS/Localytics.json\" \"6.2.1\"",
             "github \"GEOSwift/GEOSwift\" \"8.0.2\"",
             "github \"MobileNativeFoundation/Kronos\" \"4.2.1\"",
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/clang/functional/DependencyListFileParserTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/clang/functional/DependencyListFileParserTest.java
index a080e7e787..b73bfa0701 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/clang/functional/DependencyListFileParserTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/clang/functional/DependencyListFileParserTest.java
@@ -26,8 +26,12 @@ public void testSimple(@TempDirectory.TempDir Path tempOutputDirectory) throws I
         File sourceFile = new File(baseDir, "src/test/resources/detectables/functional/clang/src/process.c");
         File includeFile1 = new File(baseDir, "src/test/resources/detectables/functional/clang/include/stdc-predef.h");
         File includeFile2 = new File(baseDir, "src/test/resources/detectables/functional/clang/include/assert.h");
-        String fileContents = String.format("dependencies: %s \\\n %s %s\\\n",
-            sourceFile.getAbsolutePath(), includeFile1.getAbsolutePath(), includeFile2.getAbsolutePath());
+        String fileContents = String.format(
+            "dependencies: %s \\\n %s %s\\\n",
+            sourceFile.getAbsolutePath(),
+            includeFile1.getAbsolutePath(),
+            includeFile2.getAbsolutePath()
+        );
 
         DependencyListFileParser parser = new DependencyListFileParser();
         List<String> deps = parser.parseDepsMk(fileContents);
@@ -46,8 +50,12 @@ public void testNonCanonical(@TempDirectory.TempDir Path tempOutputDirectory) th
         File sourceFile = new File(baseDir, "src/test/resources/detectables/functional/clang/src/process.c");
         File includeFile1 = new File(baseDir, "src/test/resources/detectables/functional/clang/include/stdc-predef.h");
         File includeFile2 = new File(baseDir, "src/test/resources/../../test/resources/detectables/functional/clang/include/assert.h");
-        String fileContents = String.format("dependencies: %s \\\n %s %s\\\n",
-            sourceFile.getAbsolutePath(), includeFile1.getAbsolutePath(), includeFile2.getAbsolutePath());
+        String fileContents = String.format(
+            "dependencies: %s \\\n %s %s\\\n",
+            sourceFile.getAbsolutePath(),
+            includeFile1.getAbsolutePath(),
+            includeFile2.getAbsolutePath()
+        );
 
         DependencyListFileParser parser = new DependencyListFileParser();
         List<String> deps = parser.parseDepsMk(fileContents);
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/clang/unit/ClangPackageManagerRunnerTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/clang/unit/ClangPackageManagerRunnerTest.java
index 165bb2e599..079cd09cb3 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/clang/unit/ClangPackageManagerRunnerTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/clang/unit/ClangPackageManagerRunnerTest.java
@@ -100,26 +100,32 @@ public void testApkNonPkgOwnedIncludeFile() throws ExecutableRunnerException {
         testNonPkgOwnedIncludeFile(packageManagerInfo, packageResolver, pkgOwnerPattern);
     }
 
-    private void testNonPkgOwnedIncludeFile(ClangPackageManagerInfo packageManagerInfo, ClangPackageManagerResolver packageResolver,
-        String pkgMgrOwnerQueryResultPattern) throws ExecutableRunnerException {
+    private void testNonPkgOwnedIncludeFile(
+        ClangPackageManagerInfo packageManagerInfo, ClangPackageManagerResolver packageResolver,
+        String pkgMgrOwnerQueryResultPattern
+    ) throws ExecutableRunnerException {
 
         // Test
         PackageDetailsResult result = runTest(packageManagerInfo, packageResolver, null, null, false,
-            pkgMgrOwnerQueryResultPattern, null, dependencyFile);
+            pkgMgrOwnerQueryResultPattern, null, dependencyFile
+        );
 
         // Verify
         assertEquals(1, result.getUnRecognizedDependencyFiles().size());
         assertEquals(dependencyFile, result.getUnRecognizedDependencyFiles().iterator().next());
     }
 
-    private void testSuccessCase(ClangPackageManagerInfo packageManagerInfo, ClangPackageManagerResolver packageResolver,
+    private void testSuccessCase(
+        ClangPackageManagerInfo packageManagerInfo, ClangPackageManagerResolver packageResolver,
         String pkgName, String pkgArchitecture, boolean archBuried, String pkgVersion,
-        String pkgMgrQueryResultPattern, String pkgMgrDetailsQueryResultPattern) throws ExecutableRunnerException {
+        String pkgMgrQueryResultPattern, String pkgMgrDetailsQueryResultPattern
+    ) throws ExecutableRunnerException {
 
         // Test
         PackageDetailsResult result = runTest(packageManagerInfo, packageResolver, pkgName, pkgArchitecture,
             archBuried,
-            pkgMgrQueryResultPattern, pkgMgrDetailsQueryResultPattern, dependencyFile);
+            pkgMgrQueryResultPattern, pkgMgrDetailsQueryResultPattern, dependencyFile
+        );
 
         // Verify
         assertEquals(0, result.getUnRecognizedDependencyFiles().size());
@@ -130,24 +136,29 @@ private void testSuccessCase(ClangPackageManagerInfo packageManagerInfo, ClangPa
         assertEquals(pkgVersion, foundPkgDetails.getPackageVersion());
     }
 
-    private void testNoResultsCase(ClangPackageManagerInfo packageManagerInfo, ClangPackageManagerResolver packageResolver,
+    private void testNoResultsCase(
+        ClangPackageManagerInfo packageManagerInfo, ClangPackageManagerResolver packageResolver,
         String pkgName, String pkgArchitecture,
-        String pkgMgrQueryResultPattern, String pkgMgrDetailsQueryResultPattern) throws ExecutableRunnerException {
+        String pkgMgrQueryResultPattern, String pkgMgrDetailsQueryResultPattern
+    ) throws ExecutableRunnerException {
 
         // Test
         PackageDetailsResult result = runTest(packageManagerInfo, packageResolver, pkgName, pkgArchitecture, false,
-            pkgMgrQueryResultPattern, pkgMgrDetailsQueryResultPattern, dependencyFile);
+            pkgMgrQueryResultPattern, pkgMgrDetailsQueryResultPattern, dependencyFile
+        );
 
         // Verify
         assertEquals(0, result.getUnRecognizedDependencyFiles().size());
         assertEquals(0, result.getFoundPackages().size());
     }
 
-    private PackageDetailsResult runTest(ClangPackageManagerInfo packageManagerInfo, ClangPackageManagerResolver packageResolver,
+    private PackageDetailsResult runTest(
+        ClangPackageManagerInfo packageManagerInfo, ClangPackageManagerResolver packageResolver,
         String pkgName,
         String pkgArch, boolean archBuried,
         String pkgMgrOwnerQueryResultPattern, String pkgMgrDetailsQueryResultPattern,
-        File dependencyFile)
+        File dependencyFile
+    )
         throws ExecutableRunnerException {
         ClangPackageManager currentPackageManager = new ClangPackageManager(packageManagerInfo, packageResolver);
 
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/cocoapods/functional/PodlockDetectableTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/cocoapods/functional/PodlockDetectableTest.java
index c506c1a99a..1ed34adc8f 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/cocoapods/functional/PodlockDetectableTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/cocoapods/functional/PodlockDetectableTest.java
@@ -21,7 +21,8 @@ public PodlockDetectableTest() throws IOException {
     @Override
     public void setup() throws IOException {
 
-        addFile(Paths.get("Podfile.lock"),
+        addFile(
+            Paths.get("Podfile.lock"),
             "PODS:",
             "  - Allihoopa-macOS (1.1.0):",
             "    - AllihoopaCore (~> 1.1.0)",
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/cocoapods/functional/PodlockTransitiveDetectableTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/cocoapods/functional/PodlockTransitiveDetectableTest.java
index 5cf2518f53..fc6be61bb1 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/cocoapods/functional/PodlockTransitiveDetectableTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/cocoapods/functional/PodlockTransitiveDetectableTest.java
@@ -21,7 +21,8 @@ public PodlockTransitiveDetectableTest() throws IOException {
     @Override
     public void setup() throws IOException {
 
-        addFile(Paths.get("Podfile.lock"),
+        addFile(
+            Paths.get("Podfile.lock"),
             "PODS:",
             "  - OktaDeviceSDK (0.0.1):",
             "    - JOSESwift (= 1.8.1)",
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/cran/functional/PackratLockDetectableTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/cran/functional/PackratLockDetectableTest.java
index b6b56b83cf..3f4a009d88 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/cran/functional/PackratLockDetectableTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/cran/functional/PackratLockDetectableTest.java
@@ -20,7 +20,8 @@ public PackratLockDetectableTest() throws IOException {
 
     @Override
     protected void setup() throws IOException {
-        addFile(Paths.get("packrat.lock"),
+        addFile(
+            Paths.get("packrat.lock"),
             "This is a bogus line",
             "PackratFormat: 1.4",
             "PackratVersion: 0.4.9.3",
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/dart/functional/DartPubSpecLockDetectableTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/dart/functional/DartPubSpecLockDetectableTest.java
index a1f78f1930..bc812363ba 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/dart/functional/DartPubSpecLockDetectableTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/dart/functional/DartPubSpecLockDetectableTest.java
@@ -20,7 +20,8 @@ public DartPubSpecLockDetectableTest() throws IOException {
 
     @Override
     protected void setup() throws IOException {
-        addFile(Paths.get("pubspec.lock"),
+        addFile(
+            Paths.get("pubspec.lock"),
             "# Generated by pub",
             "",
             "packages:",
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/docker/unit/DockerDetectableTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/docker/unit/DockerDetectableTest.java
index 811e47fe71..7bd0b6600d 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/docker/unit/DockerDetectableTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/docker/unit/DockerDetectableTest.java
@@ -28,8 +28,7 @@ public void testApplicable() {
 
         Mockito.when(dockerDetectableOptions.hasDockerImageOrTar()).thenReturn(Boolean.TRUE);
 
-        DockerDetectable detectable = new DockerDetectable(environment, dockerInspectorResolver, javaResolver, dockerResolver,
-            dockerExtractor, dockerDetectableOptions);
+        DockerDetectable detectable = new DockerDetectable(environment, dockerInspectorResolver, javaResolver, dockerResolver, dockerExtractor, dockerDetectableOptions);
 
         DetectableResult result = detectable.applicable();
 
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/docker/unit/DockerExtractorTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/docker/unit/DockerExtractorTest.java
index f487536f12..26aef34a9d 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/docker/unit/DockerExtractorTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/docker/unit/DockerExtractorTest.java
@@ -185,10 +185,14 @@ private DockerExtractor getMockDockerExtractor(DetectableExecutableRunner execut
         return new DockerExtractor(fileFinder, executableRunner, bdioTransformer, externalIdFactory, gson);
     }
 
-    private Extraction extract(String image, String imageId, String tar,
+    private Extraction extract(
+        String image,
+        String imageId,
+        String tar,
         File returnedContainerFileSystemFile,
         File returnedSquashedImageFile,
-        DetectableExecutableRunner executableRunner) {
+        DetectableExecutableRunner executableRunner
+    ) {
         FileFinder fileFinder = Mockito.mock(FileFinder.class);
         DockerExtractor dockerExtractor = getMockDockerExtractor(executableRunner, fileFinder);
 
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/git/functional/GitParseDetectableTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/git/functional/GitParseDetectableTest.java
index 9df3cf4cba..19b9298b21 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/git/functional/GitParseDetectableTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/git/functional/GitParseDetectableTest.java
@@ -21,7 +21,8 @@ public GitParseDetectableTest() throws IOException {
     @Override
     public void setup() throws IOException {
         Path gitDirectory = addDirectory(Paths.get(".git"));
-        addFile(gitDirectory.resolve("config"),
+        addFile(
+            gitDirectory.resolve("config"),
             "[core]",
             "	repositoryformatversion = 0",
             "	filemode = true",
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/go/functional/GoDepCliDetectableTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/go/functional/GoDepCliDetectableTest.java
index f1137d59a5..ef7b3f1c22 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/go/functional/GoDepCliDetectableTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/go/functional/GoDepCliDetectableTest.java
@@ -22,7 +22,8 @@ public GoDepCliDetectableTest() throws IOException {
     protected void setup() throws IOException {
         addFile(Paths.get("Gopkg.toml"));
 
-        addFile(Paths.get("Gopkg.lock"),
+        addFile(
+            Paths.get("Gopkg.lock"),
             "[[projects]]",
             "   name = \"github.com/davecgh/go-spew\"",
             "   packages = [\"spew\"]",
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/go/functional/GoGradleDetectableTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/go/functional/GoGradleDetectableTest.java
index aa8097efcd..159af5e29e 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/go/functional/GoGradleDetectableTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/go/functional/GoGradleDetectableTest.java
@@ -20,7 +20,8 @@ public GoGradleDetectableTest() throws IOException {
 
     @Override
     protected void setup() throws IOException {
-        addFile(Paths.get("gogradle.lock"),
+        addFile(
+            Paths.get("gogradle.lock"),
             "apiVersion: \"0.11.4\"",
             "dependencies:",
             "  build:",
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/go/functional/GoVendorDetectableTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/go/functional/GoVendorDetectableTest.java
index d5972c98bc..a5bc40532a 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/go/functional/GoVendorDetectableTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/go/functional/GoVendorDetectableTest.java
@@ -23,7 +23,8 @@ public GoVendorDetectableTest() throws IOException {
     protected void setup() throws IOException {
         addDirectory(Paths.get("vendor"));
 
-        addFile(Paths.get("vendor/vendor.json"),
+        addFile(
+            Paths.get("vendor/vendor.json"),
             "{",
             "   \"comment\": \"\",",
             "   \"ignore\": \"test\",",
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/go/gomod/process/GoModDependencyManagerTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/go/gomod/process/GoModDependencyManagerTest.java
index 7ac29512e6..e61586eaed 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/go/gomod/process/GoModDependencyManagerTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/go/gomod/process/GoModDependencyManagerTest.java
@@ -25,7 +25,7 @@ void happyPathTest() {
         assertEquals(moduleName, dependency.getName());
         assertEquals(moduleVersion, dependency.getVersion());
     }
-    
+
     @Test
     void versionTruncatedHashTest() {
         String moduleName = "example.io/module/a";
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/go/vendr/GoVndrDetectableTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/go/vendr/GoVndrDetectableTest.java
index 1a702b9cf8..72d00794fa 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/go/vendr/GoVndrDetectableTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/go/vendr/GoVndrDetectableTest.java
@@ -20,7 +20,8 @@ public GoVndrDetectableTest() throws IOException {
 
     @Override
     protected void setup() throws IOException {
-        addFile(Paths.get("vendor.conf"),
+        addFile(
+            Paths.get("vendor.conf"),
             "github.com/klauspost/compress v1.4.1",
             "github.com/klauspost/cpuid v1.2.0",
             "github.com/klauspost/pgzip v1.2.1",
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/gradle/functional/GradleInspectorDetectableTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/gradle/functional/GradleInspectorDetectableTest.java
index 5839bd4fa6..663b503392 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/gradle/functional/GradleInspectorDetectableTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/gradle/functional/GradleInspectorDetectableTest.java
@@ -32,7 +32,8 @@ public GradleInspectorDetectableTest() throws IOException {
 
     @Override
     protected void setup() throws IOException {
-        addFile(Paths.get("build.gradle"),
+        addFile(
+            Paths.get("build.gradle"),
             "buildscript {",
             "    repositories {",
             "        jcenter()",
@@ -85,8 +86,12 @@ protected void setup() throws IOException {
     @Override
     public Detectable create(@NotNull DetectableEnvironment detectableEnvironment) {
 
-        GradleInspectorOptions gradleInspectorOptions = new GradleInspectorOptions("", new GradleInspectorScriptOptions(Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), "", ""),
-            ProxyInfo.NO_PROXY_INFO, EnumListFilter.excludeNone());
+        GradleInspectorOptions gradleInspectorOptions = new GradleInspectorOptions(
+            "",
+            new GradleInspectorScriptOptions(Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), "", ""),
+            ProxyInfo.NO_PROXY_INFO,
+            EnumListFilter.excludeNone()
+        );
         return detectableFactory.createGradleDetectable(detectableEnvironment, gradleInspectorOptions, () -> new File("gradle-inspector"), (environment) -> ExecutableTarget.forFile(new File("gradle")));
     }
 
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/gradle/functional/GradleInspectorScriptCreatorTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/gradle/functional/GradleInspectorScriptCreatorTest.java
index 0ff3fc47b9..04e656d7bb 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/gradle/functional/GradleInspectorScriptCreatorTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/gradle/functional/GradleInspectorScriptCreatorTest.java
@@ -31,8 +31,14 @@ void testOffline() throws DetectableException, IOException {
         List<String> includedConfigurationNames = Arrays.asList("excludedConfig");
         String gradleInspectorRepositoryUrl = null;
         String providedOnlineInspectorVersion = null;
-        GradleInspectorScriptOptions scriptOptions = new GradleInspectorScriptOptions(excludedProjectNames, includedProjectNames,
-            excludedConfigurationNames, includedConfigurationNames, gradleInspectorRepositoryUrl, providedOnlineInspectorVersion);
+        GradleInspectorScriptOptions scriptOptions = new GradleInspectorScriptOptions(
+            excludedProjectNames,
+            includedProjectNames,
+            excludedConfigurationNames,
+            includedConfigurationNames,
+            gradleInspectorRepositoryUrl,
+            providedOnlineInspectorVersion
+        );
 
         Configuration configuration = createFreemarkerConfiguration();
         GradleInspectorScriptCreator gradleInspectorScriptCreator = new GradleInspectorScriptCreator(configuration);
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/gradle/functional/GradleReplacementDetectableTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/gradle/functional/GradleReplacementDetectableTest.java
index 2365dcb991..980fa4740e 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/gradle/functional/GradleReplacementDetectableTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/gradle/functional/GradleReplacementDetectableTest.java
@@ -68,8 +68,12 @@ protected void setup() throws IOException {
     @NotNull
     @Override
     public Detectable create(@NotNull DetectableEnvironment detectableEnvironment) {
-        GradleInspectorOptions gradleInspectorOptions = new GradleInspectorOptions("", new GradleInspectorScriptOptions(Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), "", ""),
-            ProxyInfo.NO_PROXY_INFO, EnumListFilter.excludeNone());
+        GradleInspectorOptions gradleInspectorOptions = new GradleInspectorOptions(
+            "",
+            new GradleInspectorScriptOptions(Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), "", ""),
+            ProxyInfo.NO_PROXY_INFO,
+            EnumListFilter.excludeNone()
+        );
         return detectableFactory.createGradleDetectable(detectableEnvironment, gradleInspectorOptions, () -> new File("gradle-inspector"), (environment) -> ExecutableTarget.forFile(new File("gradle")));
     }
 
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/ivy/IvyParseDetectableTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/ivy/IvyParseDetectableTest.java
index 169a140733..9860e36016 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/ivy/IvyParseDetectableTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/ivy/IvyParseDetectableTest.java
@@ -22,7 +22,8 @@ public IvyParseDetectableTest() throws IOException {
 
     @Override
     protected void setup() throws IOException {
-        addFile(Paths.get("ivy.xml"),
+        addFile(
+            Paths.get("ivy.xml"),
             "<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
             "<ivy-module xmlns:e=\"http://ant.apache.org/ivy/extra\">",
             "    <info organisation=\"pmdungeon\" module=\"pmdungeon\" />",
@@ -34,7 +35,8 @@ protected void setup() throws IOException {
             "</ivy-module>"
         );
 
-        addFile(Paths.get("build.xml"),
+        addFile(
+            Paths.get("build.xml"),
             "<project xmlns:ivy=\"antlib:org.apache.ivy.ant\" name=\"pmdungeon\" basedir=\".\" default=\"clean-build\">",
             "</project>"
         );
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/lerna/unit/LernaDetectableTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/lerna/unit/LernaDetectableTest.java
index 8d3cf5bb64..c421602373 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/lerna/unit/LernaDetectableTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/lerna/unit/LernaDetectableTest.java
@@ -49,7 +49,8 @@ public void setup() throws IOException {
             Collections.singletonList(new NameVersion("peer-example", "~1"))
         );
 
-        addFile(Paths.get("package-lock.json"),
+        addFile(
+            Paths.get("package-lock.json"),
             "{",
             "   \"name\": \"lerna-project-name\",",
             "   \"version\": \"1.0.0\",",
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/lerna/unit/LernaExternalDetectableTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/lerna/unit/LernaExternalDetectableTest.java
index 6f4751c246..af720ef59d 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/lerna/unit/LernaExternalDetectableTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/lerna/unit/LernaExternalDetectableTest.java
@@ -46,7 +46,8 @@ public void setup() throws IOException {
 
         addPackageJson(Paths.get(""), "lernaTest", "package-version", new NameVersion("concat-map", "~1"));
 
-        addFile(Paths.get("package-lock.json"),
+        addFile(
+            Paths.get("package-lock.json"),
             "{",
             "   \"name\": \"lerna-project-name\",",
             "   \"version\": \"1.0.0\",",
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/lerna/unit/LernaPackageDiscovererTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/lerna/unit/LernaPackageDiscovererTest.java
index b0ad5d9da7..fa57bc6fbe 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/lerna/unit/LernaPackageDiscovererTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/lerna/unit/LernaPackageDiscovererTest.java
@@ -28,7 +28,8 @@ void discoverLernaPackages() throws ExecutableRunnerException {
 
         DetectableExecutableRunner executableRunner = Mockito.mock(DetectableExecutableRunner.class);
         Mockito.when(executableRunner.execute(Mockito.any(Executable.class))).thenReturn(
-            new ExecutableOutput(0, String.join(System.lineSeparator(),
+            new ExecutableOutput(0, String.join(
+                System.lineSeparator(),
                 "[",
                 "  {",
                 "    \"name\": \"@lerna/packageA\",",
@@ -48,7 +49,8 @@ void discoverLernaPackages() throws ExecutableRunnerException {
                 "    \"private\": true,",
                 "    \"location\": \"/source/packages/packageC\"",
                 "  }",
-                "]"),
+                "]"
+            ),
                 ""
             )
         );
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/maven/functional/MavenParseDetectableTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/maven/functional/MavenParseDetectableTest.java
index 9aba1ca7b4..2056b9f6d9 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/maven/functional/MavenParseDetectableTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/maven/functional/MavenParseDetectableTest.java
@@ -24,7 +24,8 @@ public MavenParseDetectableTest() throws IOException {
 
     @Override
     protected void setup() throws IOException {
-        addFile(Paths.get("pom.xml"),
+        addFile(
+            Paths.get("pom.xml"),
             "<?xml version=\"1.0\" encoding=\"UTF-8\"?>",
             "<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">",
             "    <modelVersion>4.0.0</modelVersion>",
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/maven/functional/MavenProjectInspectorTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/maven/functional/MavenProjectInspectorTest.java
index c464d1c207..09f5c5f1c2 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/maven/functional/MavenProjectInspectorTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/maven/functional/MavenProjectInspectorTest.java
@@ -65,7 +65,8 @@ protected void setup() throws IOException {
             "         \"Strategy\": \"MAVEN\"\n",
             "      }\n",
             "   }\n",
-            "}\n");
+            "}\n"
+        );
     }
 
     @NotNull
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/npm/lockfile/functional/NpmLockDetectableTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/npm/lockfile/functional/NpmLockDetectableTest.java
index 5b7ff7594d..ae1ad34bff 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/npm/lockfile/functional/NpmLockDetectableTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/npm/lockfile/functional/NpmLockDetectableTest.java
@@ -23,7 +23,8 @@ public NpmLockDetectableTest() throws IOException {
 
     @Override
     public void setup() throws IOException {
-        addFile(Paths.get("package-lock.json"),
+        addFile(
+            Paths.get("package-lock.json"),
             "{",
             "   \"name\": \"knockout-tournament\",",
             "   \"version\": \"1.0.0\",",
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/npm/lockfile/functional/NpmOutputParserTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/npm/lockfile/functional/NpmOutputParserTest.java
index 7209286b21..34323a27d5 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/npm/lockfile/functional/NpmOutputParserTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/npm/lockfile/functional/NpmOutputParserTest.java
@@ -54,7 +54,8 @@ public void npmCliDependencyFinder() {
             "           }",
             "       }",
             "   }",
-            "}"));
+            "}"
+        ));
         NpmDependencyTypeFilter npmDependencyTypeFilter = new NpmDependencyTypeFilter(Collections.emptySet(), Collections.emptySet(), true, true);
         PackageJson packageJson = new PackageJson();
         NpmPackagerResult result = parser.convertNpmJsonFileToCodeLocation(testIn, packageJson);
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/npm/lockfile/functional/NpmShrinkwrapDetectableTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/npm/lockfile/functional/NpmShrinkwrapDetectableTest.java
index fd09e9441f..be42d4c391 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/npm/lockfile/functional/NpmShrinkwrapDetectableTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/npm/lockfile/functional/NpmShrinkwrapDetectableTest.java
@@ -23,7 +23,8 @@ public NpmShrinkwrapDetectableTest() throws IOException {
 
     @Override
     protected void setup() throws IOException {
-        addFile(Paths.get("npm-shrinkwrap.json"),
+        addFile(
+            Paths.get("npm-shrinkwrap.json"),
             "{",
             "   \"name\": \"fec-builder\",",
             "   \"version\": \"1.3.7\",",
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/nuget/functional/NugetInspectorParserPerfTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/nuget/functional/NugetInspectorParserPerfTest.java
index 48c2e74519..503cb0c6d6 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/nuget/functional/NugetInspectorParserPerfTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/nuget/functional/NugetInspectorParserPerfTest.java
@@ -17,9 +17,7 @@
 import com.synopsys.integration.bdio.graph.DependencyGraphTransformer;
 import com.synopsys.integration.bdio.model.BdioComponent;
 import com.synopsys.integration.bdio.model.BdioId;
-import com.synopsys.integration.bdio.model.BdioNode;
 import com.synopsys.integration.bdio.model.BdioProject;
-import com.synopsys.integration.bdio.model.externalid.ExternalId;
 import com.synopsys.integration.bdio.model.externalid.ExternalIdFactory;
 import com.synopsys.integration.detectable.detectable.codelocation.CodeLocation;
 import com.synopsys.integration.detectable.detectables.nuget.parse.NugetInspectorParser;
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/nuget/functional/NugetProjectInspectorTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/nuget/functional/NugetProjectInspectorTest.java
index fa1eab7a05..ab42b2e18c 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/nuget/functional/NugetProjectInspectorTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/nuget/functional/NugetProjectInspectorTest.java
@@ -43,7 +43,8 @@ protected void setup() throws IOException {
     @Override
     public Detectable create(@NotNull DetectableEnvironment detectableEnvironment) {
         return detectableFactory.createNugetParseDetectable(detectableEnvironment, new NugetInspectorOptions(false, Collections.emptyList(), Collections.emptyList(), Collections.emptyList(), null),
-            () -> ExecutableTarget.forFile(new File("inspector")), new ProjectInspectorOptions(null));
+            () -> ExecutableTarget.forFile(new File("inspector")), new ProjectInspectorOptions(null)
+        );
     }
 
     @Override
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/packagist/functional/PackagistDetectableTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/packagist/functional/PackagistDetectableTest.java
index 4183f26b4e..95af7a3de8 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/packagist/functional/PackagistDetectableTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/packagist/functional/PackagistDetectableTest.java
@@ -23,7 +23,8 @@ public PackagistDetectableTest() throws IOException {
 
     @Override
     protected void setup() throws IOException {
-        addFile(Paths.get("composer.lock"),
+        addFile(
+            Paths.get("composer.lock"),
             "{",
             "   \"_readme\": [\"dummy README\"],",
             "   \"hash\": \"3bedbf455f54168900e467a64bbe2b86\",",
@@ -57,7 +58,8 @@ protected void setup() throws IOException {
             "}"
         );
 
-        addFile(Paths.get("composer.json"),
+        addFile(
+            Paths.get("composer.json"),
             "{",
             "   \"name\": \"clue/graph-composer\",",
             "   \"version\": \"1.0.0\",",
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/pear/functional/PearCliDetectableTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/pear/functional/PearCliDetectableTest.java
index 4270695f2a..b300a8ebaf 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/pear/functional/PearCliDetectableTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/pear/functional/PearCliDetectableTest.java
@@ -28,7 +28,8 @@ public PearCliDetectableTest() throws IOException {
 
     @Override
     protected void setup() throws IOException {
-        addFile(Paths.get("package.xml"),
+        addFile(
+            Paths.get("package.xml"),
             "<?xml version=\"1.0\"?>",
             "<!DOCTYPE package SYSTEM \"http://pear.php.net/dtd/package-1.0\">",
             "<package xmlns=\"http://pear.php.net/dtd/package-2.0\">",
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/pear/unit/PearRequiredOnlyTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/pear/unit/PearRequiredOnlyTest.java
index aa4a1e32cc..faf3a1557e 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/pear/unit/PearRequiredOnlyTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/pear/unit/PearRequiredOnlyTest.java
@@ -21,7 +21,8 @@
 
     @Test
     public void TestParse() throws IntegrationException {
-        List<String> pearList = Arrays.asList("Installed packages, channel pear.php.net:",
+        List<String> pearList = Arrays.asList(
+            "Installed packages, channel pear.php.net:",
             "=========================================",
             "Package           Version State",
             "Archive_Tar       1.4.3   stable",
@@ -36,15 +37,18 @@ public void TestParse() throws IntegrationException {
             "PEAR_Frontend_Gtk 0.4.0   beta",
             "PEAR_Frontend_Web 0.7.5   beta",
             "Structures_Graph  1.1.1   stable",
-            "XML_Util          1.4.2   stable");
+            "XML_Util          1.4.2   stable"
+        );
 
-        List<String> pearPackageDependencies = Arrays.asList("Dependencies for Net_SMTP",
+        List<String> pearPackageDependencies = Arrays.asList(
+            "Dependencies for Net_SMTP",
             "=========================",
             "Required? Type           Name            Versioning           Group",
             "Yes       Php                             (version >= 5.4.0)",
             "Yes       Pear Installer                  (version >= 1.10.1)",
             "Yes       Package        pear/Net_Socket  (version >= 1.0.7)",
-            "No        Package        pear/Auth_SASL   (version >= 1.0.5)");
+            "No        Package        pear/Auth_SASL   (version >= 1.0.5)"
+        );
 
         ExternalIdFactory factory = new ExternalIdFactory();
         Map<String, String> dependencyNameVersionMap = new PearListParser().parse(pearList);
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/pip/inspector/functional/PipInspectorDetectableTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/pip/inspector/functional/PipInspectorDetectableTest.java
index 64730cf38f..1a7d24243a 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/pip/inspector/functional/PipInspectorDetectableTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/pip/inspector/functional/PipInspectorDetectableTest.java
@@ -48,8 +48,13 @@ protected void setup() throws IOException {
     public Detectable create(@NotNull DetectableEnvironment detectableEnvironment) {
         List<Path> requirementTxtPaths = new ArrayList<>();
         PipInspectorDetectableOptions pipInspectorDetectableOptions = new PipInspectorDetectableOptions("project-name", requirementTxtPaths);
-        return detectableFactory.createPipInspectorDetectable(detectableEnvironment, pipInspectorDetectableOptions, () -> pipInspectorPath.toFile(), () -> ExecutableTarget.forCommand(PYTHON_CMD),
-            () -> ExecutableTarget.forCommand(PIP_CMD));
+        return detectableFactory.createPipInspectorDetectable(
+            detectableEnvironment,
+            pipInspectorDetectableOptions,
+            () -> pipInspectorPath.toFile(),
+            () -> ExecutableTarget.forCommand(PYTHON_CMD),
+            () -> ExecutableTarget.forCommand(PIP_CMD)
+        );
     }
 
     @Override
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/pip/inspector/functional/PoetryDetectableTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/pip/inspector/functional/PoetryDetectableTest.java
index 02aae67cf3..c434ba5124 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/pip/inspector/functional/PoetryDetectableTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/pip/inspector/functional/PoetryDetectableTest.java
@@ -21,11 +21,13 @@
 
     @Override
     protected void setup() throws IOException {
-        addFile(Paths.get("pyproject.toml"),
+        addFile(
+            Paths.get("pyproject.toml"),
             "[tool.poetry]"
         );
 
-        addFile(Paths.get("poetry.lock"),
+        addFile(
+            Paths.get("poetry.lock"),
             "[[package]]",
             "category = \"dev\"",
             "name = \"appdirs\"",
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/pnpm/functional/PnpmLockDetectableTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/pnpm/functional/PnpmLockDetectableTest.java
index f2e48d529e..860a4cbe5c 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/pnpm/functional/PnpmLockDetectableTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/pnpm/functional/PnpmLockDetectableTest.java
@@ -27,14 +27,16 @@ public PnpmLockDetectableTest() throws IOException {
 
     @Override
     protected void setup() throws IOException {
-        addFile(Paths.get("package.json"),
+        addFile(
+            Paths.get("package.json"),
             "{",
             "name: \"project\",",
             "version: \"version\"",
             "}"
         );
 
-        addFile(Paths.get("pnpm-lock.yaml"),
+        addFile(
+            Paths.get("pnpm-lock.yaml"),
             "lockfileVersion: 1.0.0",
             "",
             "dependencies:",
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/pnpm/unit/PnpmYamlTransformerTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/pnpm/unit/PnpmYamlTransformerTest.java
index 56e7563323..fb293c9ccd 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/pnpm/unit/PnpmYamlTransformerTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/pnpm/unit/PnpmYamlTransformerTest.java
@@ -90,7 +90,8 @@ public void testThrowExceptionOnNullPackagesSection() {
         PnpmLockYaml pnpmLockYaml = createPnpmLockYaml();
         PnpmYamlTransformer transformer = createTransformer();
         pnpmLockYaml.packages = null;
-        assertThrows(IntegrationException.class,
+        assertThrows(
+            IntegrationException.class,
             () -> transformer.generateCodeLocation(pnpmLockYamlFile, pnpmLockYaml, projectNameVersion, linkedPackageResolver)
         );
     }
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/rebar/functional/RebarDetectableTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/rebar/functional/RebarDetectableTest.java
index 488a1ee53e..f3ed200d7d 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/rebar/functional/RebarDetectableTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/rebar/functional/RebarDetectableTest.java
@@ -27,11 +27,13 @@ public RebarDetectableTest() throws IOException {
     public void setup() throws IOException {
         addFile(Paths.get("rebar.config"));
 
-        ExecutableOutput executableOutput = createStandardOutput("└─ project─1.0.0 (project app)",
+        ExecutableOutput executableOutput = createStandardOutput(
+            "└─ project─1.0.0 (project app)",
             "   ├─ git_inner_parent_dependency─0.0.2 (git repo)",
             "   │  └─ hex_inner_child_dependency─0.3.0 (hex package)",
             "   └─ git_outer_parent_dependency─0.0.7 (git repo)",
-            "      └─ git_outer_child_dependency─0.8.0 (git repo)");
+            "      └─ git_outer_child_dependency─0.8.0 (git repo)"
+        );
         Map<String, String> environment = new HashMap<>();
         environment.put("REBAR_COLOR", "none");
         addExecutableOutput(executableOutput, environment, "rebar", "tree");
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/rubygems/gemlock/functional/GemlockDetectableTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/rubygems/gemlock/functional/GemlockDetectableTest.java
index 4180a09331..d9ba48a4d7 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/rubygems/gemlock/functional/GemlockDetectableTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/rubygems/gemlock/functional/GemlockDetectableTest.java
@@ -21,7 +21,8 @@ public GemlockDetectableTest() throws IOException {
 
     @Override
     public void setup() throws IOException {
-        addFile(Paths.get("Gemfile.lock"),
+        addFile(
+            Paths.get("Gemfile.lock"),
             "GEM",
             "  remote:https://rubygems.org/",
             "  specs:",
@@ -46,7 +47,8 @@ public void setup() throws IOException {
             "  cocoapods-keys",
             "",
             "BUNDLED WITH",
-            "  1.14.6");
+            "  1.14.6"
+        );
     }
 
     @Override
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/sbt/unit/SbtDotOutputParserTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/sbt/unit/SbtDotOutputParserTest.java
index 2edadd3b11..e8bf35f309 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/sbt/unit/SbtDotOutputParserTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/sbt/unit/SbtDotOutputParserTest.java
@@ -21,12 +21,14 @@ public void canParseSingleDotFile() {
 
     @Test
     public void ignoresNonGraphLines() {
-        List<String> input = Arrays.asList("[info] welcome to sbt 1.4.7 (Oracle Corporation Java 1.8.0_161)",
+        List<String> input = Arrays.asList(
+            "[info] welcome to sbt 1.4.7 (Oracle Corporation Java 1.8.0_161)",
             "[info] loading settings for project scalafmt-build from plugins.sbt ...",
             "[info] loading project definition from C:\\Users\\jordanp\\Downloads\\scalafmt-master\\scalafmt\\project",
             "[info] loading settings for project scalafmt from build.sbt ...",
             "[info] set current project to scalafmtRoot (in build file:/C:/Users/jordanp/Downloads/scalafmt-master/scalafmt/)",
-            "[info] Wrote dependency graph to 'C:\\Users\\jordanp\\Downloads\\scalafmt-master\\scalafmt\\scalafmt-interfaces\\target\\dependencies-compile.dot'");
+            "[info] Wrote dependency graph to 'C:\\Users\\jordanp\\Downloads\\scalafmt-master\\scalafmt\\scalafmt-interfaces\\target\\dependencies-compile.dot'"
+        );
         SbtDotOutputParser parser = new SbtDotOutputParser();
         List<File> results = parser.parseGeneratedGraphFiles(input);
         Assertions.assertEquals(1, results.size());
@@ -35,9 +37,11 @@ public void ignoresNonGraphLines() {
 
     @Test
     public void parsesMultipleGraphs() {
-        List<String> input = Arrays.asList("[info] Wrote dependency graph to 'C:\\Users\\jordanp\\Downloads\\scalafmt-master\\scalafmt\\scalafmt-interfaces\\target\\dependencies-compile.dot'",
+        List<String> input = Arrays.asList(
+            "[info] Wrote dependency graph to 'C:\\Users\\jordanp\\Downloads\\scalafmt-master\\scalafmt\\scalafmt-interfaces\\target\\dependencies-compile.dot'",
             "[info] Wrote dependency graph to 'C:\\Users\\jordanp\\Downloads\\scalafmt-master\\scalafmt\\target\\dependencies-compile.dot'",
-            "[info] Wrote dependency graph to 'C:\\Users\\jordanp\\Downloads\\scalafmt-master\\scalafmt\\scalafmt-dynamic\\target\\dependencies-compile.dot'");
+            "[info] Wrote dependency graph to 'C:\\Users\\jordanp\\Downloads\\scalafmt-master\\scalafmt\\scalafmt-dynamic\\target\\dependencies-compile.dot'"
+        );
         SbtDotOutputParser parser = new SbtDotOutputParser();
         List<File> results = parser.parseGeneratedGraphFiles(input);
         Assertions.assertEquals(3, results.size());
@@ -54,7 +58,8 @@ public void parsesMultipleGraphsNIXPaths() {
             "[warn] There may be incompatibilities among your library dependencies; run 'evicted' to see detailed eviction warnings.",
             "[warn] There may be incompatibilities among your library dependencies; run 'evicted' to see detailed eviction warnings.",
             "[info] Wrote dependency graph to '/Users/jordanp/scalafmt-master/scalafmt/target/dependencies-compile.dot'",
-            "[info] Wrote dependency graph to '/Users/jordanp/scalafmt-master/scalafmt/scalafmt-dynamic/target/dependencies-compile.dot'");
+            "[info] Wrote dependency graph to '/Users/jordanp/scalafmt-master/scalafmt/scalafmt-dynamic/target/dependencies-compile.dot'"
+        );
         SbtDotOutputParser parser = new SbtDotOutputParser();
         List<File> results = parser.parseGeneratedGraphFiles(input);
         Assertions.assertEquals(3, results.size());
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/sbt/unit/SbtPluginFinderTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/sbt/unit/SbtPluginFinderTest.java
index f0b0a1b758..2ccafc284e 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/sbt/unit/SbtPluginFinderTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/sbt/unit/SbtPluginFinderTest.java
@@ -29,35 +29,40 @@ public void pluginNotFoundEvenWithWordGraph() {
     @Test
     public void pluginFoundNormally() {
         SbtPluginFinder parser = new SbtPluginFinder(null, new SbtCommandArgumentGenerator());
-        List<String> input = Arrays.asList("[info] welcome to sbt 1.4.7 (Oracle Corporation Java 1.8.0_161)", //standard sbt preamble
+        List<String> input = Arrays.asList(
+            "[info] welcome to sbt 1.4.7 (Oracle Corporation Java 1.8.0_161)", //standard sbt preamble
             "[info] loading settings for project scalafmt-build from plugins.sbt ...",
             "[info] loading project definition from C:\\Users\\jordanp\\Downloads\\scalafmt-master\\scalafmt\\project",
             "[info] loading settings for project scalafmt from build.sbt ...",
             "[info] set current project to scalafmtRoot (in build file:/C:/Users/jordanp/Downloads/scalafmt-master/scalafmt/)",
             "In build /C:/Users/jordanp/Downloads/scalafmt-master/scalafmt/:",
             "  Enabled plugins in benchmarks:",
-            "    net.virtualvoid.sbt.graph.DependencyGraphPlugin"); //plugin we should find.
+            "    net.virtualvoid.sbt.graph.DependencyGraphPlugin"
+        ); //plugin we should find.
         Assertions.assertTrue(parser.determineInstalledPlugin(input), "Plugin should have been found!");
     }
 
     @Test
     public void pluginInternalFoundNormally() {
         SbtPluginFinder parser = new SbtPluginFinder(null, new SbtCommandArgumentGenerator());
-        List<String> input = Arrays.asList("[info] welcome to sbt 1.4.7 (Oracle Corporation Java 1.8.0_161)", //standard sbt preamble
+        List<String> input = Arrays.asList(
+            "[info] welcome to sbt 1.4.7 (Oracle Corporation Java 1.8.0_161)", //standard sbt preamble
             "[info] loading settings for project scalafmt-build from plugins.sbt ...",
             "[info] loading project definition from C:\\Users\\jordanp\\Downloads\\scalafmt-master\\scalafmt\\project",
             "[info] loading settings for project scalafmt from build.sbt ...",
             "[info] set current project to scalafmtRoot (in build file:/C:/Users/jordanp/Downloads/scalafmt-master/scalafmt/)",
             "In build /C:/Users/jordanp/Downloads/scalafmt-master/scalafmt/:",
             "  Enabled plugins in benchmarks:",
-            "    sbt.plugins.DependencyTreePlugin"); //plugin we should find.
+            "    sbt.plugins.DependencyTreePlugin"
+        ); //plugin we should find.
         Assertions.assertTrue(parser.determineInstalledPlugin(input), "Plugin should have been found!");
     }
 
     @Test
     public void pluginNotFoundNormally() {
         SbtPluginFinder parser = new SbtPluginFinder(null, new SbtCommandArgumentGenerator());
-        List<String> input = Arrays.asList("[info] welcome to sbt 1.4.7 (Oracle Corporation Java 1.8.0_161)", //standard sbt preamble
+        List<String> input = Arrays.asList(
+            "[info] welcome to sbt 1.4.7 (Oracle Corporation Java 1.8.0_161)", //standard sbt preamble
             "[info] loading settings for project scalafmt-build from plugins.sbt ...",
             "[info] loading project definition from C:\\Users\\jordanp\\Downloads\\scalafmt-master\\scalafmt\\project",
             "[info] loading settings for project scalafmt from build.sbt ...",
@@ -66,7 +71,8 @@ public void pluginNotFoundNormally() {
             "  Enabled plugins in compile:",
             "    com.typesafe.sbt.packager.archetypes.JavaServerAppPackaging",//should ignore
             "    com.typesafe.sbt.packager.archetypes.jar.ClasspathJarPlugin",//should ignore
-            "    com.typesafe.sbt.packager.archetypes.jar.LauncherJarPlugin"); //should ignore
+            "    com.typesafe.sbt.packager.archetypes.jar.LauncherJarPlugin"
+        ); //should ignore
         Assertions.assertFalse(parser.determineInstalledPlugin(input), "Plugin should NOT have been found!");
     }
 }
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/yarn/functional/YarnLockDetectableTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/yarn/functional/YarnLockDetectableTest.java
index a68208c38a..7d81092346 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/yarn/functional/YarnLockDetectableTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/yarn/functional/YarnLockDetectableTest.java
@@ -26,7 +26,8 @@ public YarnLockDetectableTest() throws IOException {
 
     @Override
     protected void setup() throws IOException {
-        addFile(Paths.get("yarn.lock"),
+        addFile(
+            Paths.get("yarn.lock"),
             "async@2.5.0:",
             "   version \"2.5.0\"",
             "   dependencies:",
@@ -36,7 +37,8 @@ protected void setup() throws IOException {
             "   version \"4.17.4\""
         );
 
-        addFile(Paths.get("package.json"),
+        addFile(
+            Paths.get("package.json"),
             "{",
             "   \"name\": \"babel\",",
             "   \"version\": \"1.2.3\",",
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/yarn/unit/YarnTransformerTest.java b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/yarn/unit/YarnTransformerTest.java
index 5bda4edf77..f3451c0683 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/detectables/yarn/unit/YarnTransformerTest.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/detectables/yarn/unit/YarnTransformerTest.java
@@ -235,7 +235,8 @@ private void addWorkspaceToYarnLockEntries(List<YarnLockEntry> yarnLockEntries,
         List<YarnLockDependency> dependencyRefsToWkspDeps = Collections.singletonList(new YarnLockDependency(workspaceDepName, workspace.getVersion(), false));
         List<YarnLockEntryId> yarnLockEntryIdsWkspEntryIds = Arrays.asList(
             new YarnLockEntryId(workspace.getName(), workspace.getVersion()),
-            new YarnLockEntryId(workspace.getName(), "workspace:packages/" + workspace.getName()));
+            new YarnLockEntryId(workspace.getName(), "workspace:packages/" + workspace.getName())
+        );
         yarnLockEntries.add(new YarnLockEntry(false, yarnLockEntryIdsWkspEntryIds, workspace.getVersion(), dependencyRefsToWkspDeps));
     }
 
diff --git a/detectable/src/test/java/com/synopsys/integration/detectable/util/graph/NameVersionGraphAssert.java b/detectable/src/test/java/com/synopsys/integration/detectable/util/graph/NameVersionGraphAssert.java
index 9be6566331..dca8491a9a 100644
--- a/detectable/src/test/java/com/synopsys/integration/detectable/util/graph/NameVersionGraphAssert.java
+++ b/detectable/src/test/java/com/synopsys/integration/detectable/util/graph/NameVersionGraphAssert.java
@@ -24,7 +24,9 @@ public ExternalId hasNoDependency(String name, String version) {
     }
 
     public void hasParentChildRelationship(String parentName, String parentVersion, String childName, String childVersion) {
-        Assertions.assertTrue(graph.getChildrenExternalIdsForParent(externalIdFactory.createNameVersionExternalId(forge, parentName, parentVersion)).contains(externalIdFactory.createNameVersionExternalId(forge, childName, childVersion)),
-            "Expected dependency " + parentName + " " + parentVersion + " to have dependency of " + childName + " " + childVersion);
+        Assertions.assertTrue(
+            graph.getChildrenExternalIdsForParent(externalIdFactory.createNameVersionExternalId(forge, parentName, parentVersion)).contains(externalIdFactory.createNameVersionExternalId(forge, childName, childVersion)),
+            "Expected dependency " + parentName + " " + parentVersion + " to have dependency of " + childName + " " + childVersion
+        );
     }
 }
diff --git a/detector/src/main/java/com/synopsys/integration/detector/evaluation/ApplicableEvaluator.java b/detector/src/main/java/com/synopsys/integration/detector/evaluation/ApplicableEvaluator.java
index 5a52a80494..22af04c73f 100644
--- a/detector/src/main/java/com/synopsys/integration/detector/evaluation/ApplicableEvaluator.java
+++ b/detector/src/main/java/com/synopsys/integration/detector/evaluation/ApplicableEvaluator.java
@@ -40,8 +40,14 @@ public void searchAndApplicableEvaluation(DetectorEvaluationTree detectorEvaluat
             DetectorRule detectorRule = detectorEvaluation.getDetectorRule();
             logger.trace("Evaluating detector: {}", detectorRule.getDescriptiveName());
 
-            SearchEnvironment searchEnvironment = new SearchEnvironment(detectorEvaluationTree.getDepthFromRoot(), getEvaluationOptions().getDetectorFilter(), getEvaluationOptions().isForceNested(),
-                getEvaluationOptions().isFollowSymLinks(), appliedInParent, appliedSoFar);
+            SearchEnvironment searchEnvironment = new SearchEnvironment(
+                detectorEvaluationTree.getDepthFromRoot(),
+                getEvaluationOptions().getDetectorFilter(),
+                getEvaluationOptions().isForceNested(),
+                getEvaluationOptions().isFollowSymLinks(),
+                appliedInParent,
+                appliedSoFar
+            );
             detectorEvaluation.setSearchEnvironment(searchEnvironment);
 
             DetectorResult searchableResult = detectorRuleSetEvaluator.evaluateSearchable(detectorEvaluationTree.getDetectorRuleSet(), detectorEvaluation.getDetectorRule(), searchEnvironment);
diff --git a/detector/src/main/java/com/synopsys/integration/detector/evaluation/ExtractableEvaluator.java b/detector/src/main/java/com/synopsys/integration/detector/evaluation/ExtractableEvaluator.java
index 70c0bace64..1fad7e3b61 100644
--- a/detector/src/main/java/com/synopsys/integration/detector/evaluation/ExtractableEvaluator.java
+++ b/detector/src/main/java/com/synopsys/integration/detector/evaluation/ExtractableEvaluator.java
@@ -43,8 +43,13 @@ public void extractableEvaluation(DetectorEvaluationTree detectorEvaluationTree)
 
                 DetectableResult detectableExtractableResult = getDetectableExtractableResult(detectorEvaluation);
 
-                DetectorResult extractableResult = new DetectorResult(detectableExtractableResult.getPassed(), detectableExtractableResult.toDescription(), detectableExtractableResult.getClass(),
-                    detectableExtractableResult.getExplanation(), detectableExtractableResult.getRelevantFiles());
+                DetectorResult extractableResult = new DetectorResult(
+                    detectableExtractableResult.getPassed(),
+                    detectableExtractableResult.toDescription(),
+                    detectableExtractableResult.getClass(),
+                    detectableExtractableResult.getExplanation(),
+                    detectableExtractableResult.getRelevantFiles()
+                );
                 detectorEvaluation.setExtractable(extractableResult);
                 if (detectorEvaluation.isExtractable()) {
                     logger.trace("Extractable passed. Done evaluating for now.");
diff --git a/detector/src/main/java/com/synopsys/integration/detector/evaluation/SearchEnvironment.java b/detector/src/main/java/com/synopsys/integration/detector/evaluation/SearchEnvironment.java
index 8092048269..9058706cc9 100644
--- a/detector/src/main/java/com/synopsys/integration/detector/evaluation/SearchEnvironment.java
+++ b/detector/src/main/java/com/synopsys/integration/detector/evaluation/SearchEnvironment.java
@@ -14,8 +14,7 @@
     private final Set<DetectorRule> appliedToParent;
     private final Set<DetectorRule> appliedSoFar;
 
-    public SearchEnvironment(int depth, Predicate<DetectorRule> detectorFilter, boolean forceNestedSearch, boolean followSymLinks, Set<DetectorRule> appliedToParent,
-        Set<DetectorRule> appliedSoFar) {
+    public SearchEnvironment(int depth, Predicate<DetectorRule> detectorFilter, boolean forceNestedSearch, boolean followSymLinks, Set<DetectorRule> appliedToParent, Set<DetectorRule> appliedSoFar) {
         this.depth = depth;
         this.detectorFilter = detectorFilter;
         this.forceNestedSearch = forceNestedSearch;
diff --git a/detector/src/main/java/com/synopsys/integration/detector/rule/DetectorRule.java b/detector/src/main/java/com/synopsys/integration/detector/rule/DetectorRule.java
index 0113240205..ec624fe961 100644
--- a/detector/src/main/java/com/synopsys/integration/detector/rule/DetectorRule.java
+++ b/detector/src/main/java/com/synopsys/integration/detector/rule/DetectorRule.java
@@ -16,8 +16,7 @@
     private final String name;
     private final boolean nestInvisible;
 
-    public DetectorRule(DetectableCreatable detectableCreatable, Class<T> detectableClass, int maxDepth, boolean nestable, boolean selfNestable, DetectorType detectorType, String name,
-        boolean nestInvisible) {
+    public DetectorRule(DetectableCreatable detectableCreatable, Class<T> detectableClass, int maxDepth, boolean nestable, boolean selfNestable, DetectorType detectorType, String name, boolean nestInvisible) {
         this.detectableCreatable = detectableCreatable;
         this.detectableClass = detectableClass;
         this.maxDepth = maxDepth;
diff --git a/src/main/java/com/synopsys/integration/detect/Application.java b/src/main/java/com/synopsys/integration/detect/Application.java
index d4893b74ca..e698d673e4 100644
--- a/src/main/java/com/synopsys/integration/detect/Application.java
+++ b/src/main/java/com/synopsys/integration/detect/Application.java
@@ -139,8 +139,16 @@ public void run(ApplicationArguments applicationArguments) {
         exitApplication(exitManager, startTime, shouldForceSuccess);
     }
 
-    private Optional<DetectBootResult> bootApplication(DetectRunId detectRunId, String[] sourceArgs, EventSystem eventSystem, ExitCodeManager exitCodeManager, Gson gson, DetectInfo detectInfo,
-        FileFinder fileFinder, InstalledToolManager installedToolManager) {
+    private Optional<DetectBootResult> bootApplication(
+        DetectRunId detectRunId,
+        String[] sourceArgs,
+        EventSystem eventSystem,
+        ExitCodeManager exitCodeManager,
+        Gson gson,
+        DetectInfo detectInfo,
+        FileFinder fileFinder,
+        InstalledToolManager installedToolManager
+    ) {
         Optional<DetectBootResult> bootResult = Optional.empty();
         try {
             logger.debug("Detect boot begin.");
diff --git a/src/main/java/com/synopsys/integration/detect/configuration/DetectProperties.java b/src/main/java/com/synopsys/integration/detect/configuration/DetectProperties.java
index ed2ff3e02c..6357034f0e 100644
--- a/src/main/java/com/synopsys/integration/detect/configuration/DetectProperties.java
+++ b/src/main/java/com/synopsys/integration/detect/configuration/DetectProperties.java
@@ -101,8 +101,10 @@ private DetectProperties() {
     public static final StringListProperty BLACKDUCK_PROXY_IGNORED_HOSTS =
         StringListProperty.newBuilder("blackduck.proxy.ignored.hosts", emptyList())
             .setInfo("Bypass Proxy Hosts", DetectPropertyFromVersion.VERSION_4_2_0)
-            .setHelp("A comma separated list of regular expression host patterns that should not use the proxy.",
-                "This property accepts Java regular expressions. Refer to the <i>Configuring Synopsys Detect</i> > <i>Java regular expression support</i> page for more details.")
+            .setHelp(
+                "A comma separated list of regular expression host patterns that should not use the proxy.",
+                "This property accepts Java regular expressions. Refer to the <i>Configuring Synopsys Detect</i> > <i>Java regular expression support</i> page for more details."
+            )
             .setGroups(DetectGroup.PROXY, DetectGroup.BLACKDUCK, DetectGroup.DEFAULT)
             .setCategory(DetectCategory.Advanced)
             .setExample("blackduck[0-9]+.mycompany.com")
@@ -204,7 +206,9 @@ private DetectProperties() {
     public static final AllNoneEnumListProperty<WorkspaceRule> DETECT_BAZEL_WORKSPACE_RULES =
         AllNoneEnumListProperty.newBuilder("detect.bazel.workspace.rules", emptyList(), WorkspaceRule.class)
             .setInfo("Bazel workspace rules", DetectPropertyFromVersion.VERSION_7_12_0)
-            .setHelp("By default Detect discovers Bazel dependencies using all of the supported Bazel workspace rules that it finds in the WORKSPACE file. Alternatively you can use this property to specify the list of Bazel workspace rules Detect should use.")
+            .setHelp(
+                "By default Detect discovers Bazel dependencies using all of the supported Bazel workspace rules that it finds in the WORKSPACE file. Alternatively you can use this property to specify the list of Bazel workspace rules Detect should use."
+            )
             .setGroups(DetectGroup.BAZEL, DetectGroup.SOURCE_SCAN)
             .build();
 
@@ -240,8 +244,10 @@ private DetectProperties() {
 
     public static final BooleanProperty DETECT_CONAN_REQUIRE_PREV_MATCH =
         BooleanProperty.newBuilder("detect.conan.attempt.package.revision.match", false)
-            .setInfo("Attempt Package Revision Match",
-                DetectPropertyFromVersion.VERSION_6_8_0)
+            .setInfo(
+                "Attempt Package Revision Match",
+                DetectPropertyFromVersion.VERSION_6_8_0
+            )
             .setHelp(
                 "If package revisions are available (a Conan lock file is found or provided, and Conan's revisions feature is enabled), require that each dependency's package revision match the package revision of the component in the KB.")
             .setGroups(DetectGroup.CONAN, DetectGroup.SOURCE_SCAN)
@@ -316,8 +322,10 @@ private DetectProperties() {
     public static final NoneEnumListProperty<BitbakeDependencyType> DETECT_BITBAKE_DEPENDENCY_TYPES_EXCLUDED =
         NoneEnumListProperty.newBuilder("detect.bitbake.dependency.types.excluded", NoneEnum.NONE, BitbakeDependencyType.class)
             .setInfo("Bitbake Excluded Dependency Types", DetectPropertyFromVersion.VERSION_7_10_0)
-            .setHelp("The dependency types to exclude from the results.",
-                "BUILD dependencies include recipes that are not declared in the license.manifest file, and native recipes. When excluding BUILD dependencies, Detect requires the license.manifest file (found under the {builddir}/tmp directory).")
+            .setHelp(
+                "The dependency types to exclude from the results.",
+                "BUILD dependencies include recipes that are not declared in the license.manifest file, and native recipes. When excluding BUILD dependencies, Detect requires the license.manifest file (found under the {builddir}/tmp directory)."
+            )
             .setExample("BUILD")
             .setGroups(DetectGroup.BITBAKE, DetectGroup.SOURCE_SCAN)
             .build();
@@ -325,8 +333,10 @@ private DetectProperties() {
     public static final NullableStringProperty DETECT_BLACKDUCK_SIGNATURE_SCANNER_ARGUMENTS =
         NullableStringProperty.newBuilder("detect.blackduck.signature.scanner.arguments")
             .setInfo("Signature Scanner Arguments", DetectPropertyFromVersion.VERSION_4_2_0)
-            .setHelp("Additional arguments to use when running the Black Duck signature scanner.",
-                "For example: Suppose you are running in bash on Linux and want to use the signature scanner's ability to read a list of directories to exclude from a file (using the signature scanner --exclude-from option). You tell the signature scanner read excluded directories from a file named excludes.txt in your home directory with: --detect.blackduck.signature.scanner.arguments='--exclude-from \\${HOME}/excludes.txt'")
+            .setHelp(
+                "Additional arguments to use when running the Black Duck signature scanner.",
+                "For example: Suppose you are running in bash on Linux and want to use the signature scanner's ability to read a list of directories to exclude from a file (using the signature scanner --exclude-from option). You tell the signature scanner read excluded directories from a file named excludes.txt in your home directory with: --detect.blackduck.signature.scanner.arguments='--exclude-from \\${HOME}/excludes.txt'"
+            )
             .setGroups(DetectGroup.SIGNATURE_SCANNER, DetectGroup.GLOBAL)
             .build();
 
@@ -353,8 +363,7 @@ private DetectProperties() {
             .build();
 
     public static final ExtendedEnumProperty<ExtendedIndividualFileMatchingMode, IndividualFileMatching> DETECT_BLACKDUCK_SIGNATURE_SCANNER_INDIVIDUAL_FILE_MATCHING =
-        ExtendedEnumProperty.newBuilderExtendedDefault("detect.blackduck.signature.scanner.individual.file.matching", ExtendedIndividualFileMatchingMode.NONE, ExtendedIndividualFileMatchingMode.class,
-                IndividualFileMatching.class)
+        ExtendedEnumProperty.newBuilderExtendedDefault("detect.blackduck.signature.scanner.individual.file.matching", ExtendedIndividualFileMatchingMode.NONE, ExtendedIndividualFileMatchingMode.class, IndividualFileMatching.class)
             .setInfo("Individual File Matching", DetectPropertyFromVersion.VERSION_6_2_0)
             .setHelp("Users may set this property to indicate what types of files they want to match. Corresponding Signature Scanner CLI Argument: --individualFileMatching.")
             .setGroups(DetectGroup.SIGNATURE_SCANNER)
@@ -501,8 +510,10 @@ private DetectProperties() {
     public static final IntegerProperty DETECT_DETECTOR_SEARCH_DEPTH =
         IntegerProperty.newBuilder("detect.detector.search.depth", 0)
             .setInfo("Detector Search Depth", DetectPropertyFromVersion.VERSION_3_2_0)
-            .setHelp("Depth of subdirectories within the source directory to which Detect will search for files that indicate whether a detector applies.",
-                "A value of 0 (the default) tells Detect not to search any subdirectories, a value of 1 tells Detect to search first-level subdirectories, etc.")
+            .setHelp(
+                "Depth of subdirectories within the source directory to which Detect will search for files that indicate whether a detector applies.",
+                "A value of 0 (the default) tells Detect not to search any subdirectories, a value of 1 tells Detect to search first-level subdirectories, etc."
+            )
             .setGroups(DetectGroup.PATHS, DetectGroup.DETECTOR, DetectGroup.GLOBAL, DetectGroup.SOURCE_SCAN)
             .build();
 
@@ -535,8 +546,10 @@ private DetectProperties() {
     public static final BooleanProperty DETECT_IGNORE_CONNECTION_FAILURES =
         BooleanProperty.newBuilder("detect.ignore.connection.failures", false)
             .setInfo("Detect Ignore Connection Failures", DetectPropertyFromVersion.VERSION_5_3_0)
-            .setHelp("If true, Detect will ignore any products that it cannot connect to.",
-                "If true, when Detect attempts to boot a product it will also check if it can communicate with it - if it cannot, it will not run the product.")
+            .setHelp(
+                "If true, Detect will ignore any products that it cannot connect to.",
+                "If true, when Detect attempts to boot a product it will also check if it can communicate with it - if it cannot, it will not run the product."
+            )
             .setGroups(DetectGroup.GENERAL, DetectGroup.BLACKDUCK_SERVER, DetectGroup.POLARIS)
             .setCategory(DetectCategory.Advanced)
             .build();
@@ -564,7 +577,8 @@ private DetectProperties() {
             .setInfo("Docker Image Name", DetectPropertyFromVersion.VERSION_3_0_0)
             .setHelp(
                 "The Docker image name (repo:tag) to inspect.",
-                "For Detect to run Docker Inspector, either this property, detect.docker.tar, or detect.docker.image.id must be set. Docker Inspector finds packages installed by the Linux package manager in Linux-based images. detect.docker.image, detect.docker.tar, and detect.docker.image.id are three alternative ways to specify an image (you should only set one of these properties). When a value of this property is provided, Docker Inspector will use the Docker engine to pull the image.")
+                "For Detect to run Docker Inspector, either this property, detect.docker.tar, or detect.docker.image.id must be set. Docker Inspector finds packages installed by the Linux package manager in Linux-based images. detect.docker.image, detect.docker.tar, and detect.docker.image.id are three alternative ways to specify an image (you should only set one of these properties). When a value of this property is provided, Docker Inspector will use the Docker engine to pull the image."
+            )
             .setExample("centos:centos8")
             .setGroups(DetectGroup.DOCKER, DetectGroup.SOURCE_PATH)
             .build();
@@ -574,7 +588,8 @@ private DetectProperties() {
             .setInfo("Docker Image ID", DetectPropertyFromVersion.VERSION_6_1_0)
             .setHelp(
                 "The ID (shown in the 'IMAGE ID' column of 'docker images' output) of the target Docker image. The target image must already be local (must appear in the output of 'docker images').",
-                "detect.docker.image, detect.docker.tar, and detect.docker.image.id are three alternative ways to specify an image (you should only set one of these properties).")
+                "detect.docker.image, detect.docker.tar, and detect.docker.image.id are three alternative ways to specify an image (you should only set one of these properties)."
+            )
             .setExample("0d120b6ccaa8")
             .setGroups(DetectGroup.DOCKER, DetectGroup.SOURCE_PATH)
             .setExample("fe1cc5b91830")
@@ -584,7 +599,8 @@ private DetectProperties() {
         NullablePathProperty.newBuilder("detect.docker.inspector.path")
             .setInfo("Docker Inspector .jar File Path", DetectPropertyFromVersion.VERSION_3_0_0)
             .setHelp(
-                "This is used to override using the hosted Docker Inspector .jar file by binary repository url. You can use a compatible (the same major version that Detect downloads by default) local Docker Inspector .jar file at this path.")
+                "This is used to override using the hosted Docker Inspector .jar file by binary repository url. You can use a compatible (the same major version that Detect downloads by default) local Docker Inspector .jar file at this path."
+            )
             .setGroups(DetectGroup.DOCKER, DetectGroup.GLOBAL)
             .setCategory(DetectCategory.Advanced)
             .build();
@@ -631,7 +647,8 @@ private DetectProperties() {
             .setInfo("Image Archive File", DetectPropertyFromVersion.VERSION_3_0_0)
             .setHelp(
                 "An image .tar file which is either a Docker image saved to a file using the 'docker save' command, or an Open Container Initiative (OCI) image .tar file. The file must be readable by all.",
-                "detect.docker.image, detect.docker.tar, and detect.docker.image.id are three alternative ways to specify an image (you should only set one of these properties).")
+                "detect.docker.image, detect.docker.tar, and detect.docker.image.id are three alternative ways to specify an image (you should only set one of these properties)."
+            )
             .setExample("./ubuntu21_04.tar")
             .setGroups(DetectGroup.DOCKER, DetectGroup.SOURCE_PATH)
             .build();
@@ -701,8 +718,10 @@ private DetectProperties() {
     public static final CaseSensitiveStringListProperty DETECT_GRADLE_EXCLUDED_CONFIGURATIONS =
         CaseSensitiveStringListProperty.newBuilder("detect.gradle.excluded.configurations", Collections.emptyList())
             .setInfo("Gradle Exclude Configurations", DetectPropertyFromVersion.VERSION_3_0_0)
-            .setHelp("A comma-separated list of Gradle configurations to exclude.",
-                "As Detect examines the Gradle project for dependencies, Detect will skip any Gradle configurations specified via this property. This property accepts filename globbing-style wildcards. Refer to the <i>Configuring Synopsys Detect</i> > <i>Property wildcard support</i> page for more details.")
+            .setHelp(
+                "A comma-separated list of Gradle configurations to exclude.",
+                "As Detect examines the Gradle project for dependencies, Detect will skip any Gradle configurations specified via this property. This property accepts filename globbing-style wildcards. Refer to the <i>Configuring Synopsys Detect</i> > <i>Property wildcard support</i> page for more details."
+            )
             .setGroups(DetectGroup.GRADLE, DetectGroup.SOURCE_SCAN)
             .setCategory(DetectCategory.Advanced)
             .build();
@@ -710,8 +729,10 @@ private DetectProperties() {
     public static final CaseSensitiveStringListProperty DETECT_GRADLE_EXCLUDED_PROJECTS =
         CaseSensitiveStringListProperty.newBuilder("detect.gradle.excluded.projects")
             .setInfo("Gradle Exclude Projects", DetectPropertyFromVersion.VERSION_3_0_0)
-            .setHelp("A comma-separated list of Gradle sub-projects to exclude.",
-                "As Detect examines the Gradle project for dependencies, Detect will skip any Gradle sub-projects specified via this property. This property accepts filename globbing-style wildcards. Refer to the <i>Configuring Synopsys Detect</i> > <i>Property wildcard support</i> page for more details.")
+            .setHelp(
+                "A comma-separated list of Gradle sub-projects to exclude.",
+                "As Detect examines the Gradle project for dependencies, Detect will skip any Gradle sub-projects specified via this property. This property accepts filename globbing-style wildcards. Refer to the <i>Configuring Synopsys Detect</i> > <i>Property wildcard support</i> page for more details."
+            )
             .setGroups(DetectGroup.GRADLE, DetectGroup.SOURCE_SCAN)
             .setCategory(DetectCategory.Advanced)
             .build();
@@ -719,8 +740,10 @@ private DetectProperties() {
     public static final CaseSensitiveStringListProperty DETECT_GRADLE_INCLUDED_CONFIGURATIONS =
         CaseSensitiveStringListProperty.newBuilder("detect.gradle.included.configurations")
             .setInfo("Gradle Include Configurations", DetectPropertyFromVersion.VERSION_3_0_0)
-            .setHelp("A comma-separated list of Gradle configurations to include.",
-                "As Detect examines the Gradle project for dependencies, if this property is set, Detect will include only those Gradle configurations specified via this property that are not excluded. Leaving this unset implies 'include all'. Exclusion rules always win. This property accepts filename globbing-style wildcards. Refer to the <i>Configuring Synopsys Detect</i> > <i>Property wildcard support</i> page for more details.")
+            .setHelp(
+                "A comma-separated list of Gradle configurations to include.",
+                "As Detect examines the Gradle project for dependencies, if this property is set, Detect will include only those Gradle configurations specified via this property that are not excluded. Leaving this unset implies 'include all'. Exclusion rules always win. This property accepts filename globbing-style wildcards. Refer to the <i>Configuring Synopsys Detect</i> > <i>Property wildcard support</i> page for more details."
+            )
             .setGroups(DetectGroup.GRADLE, DetectGroup.SOURCE_SCAN)
             .setCategory(DetectCategory.Advanced)
             .build();
@@ -728,8 +751,10 @@ private DetectProperties() {
     public static final NoneEnumListProperty<GradleConfigurationType> DETECT_GRADLE_CONFIGURATION_TYPES_EXCLUDED =
         NoneEnumListProperty.newBuilder("detect.gradle.configuration.types.excluded", NoneEnum.NONE, GradleConfigurationType.class)
             .setInfo("Gradle Configuration Types Excluded", DetectPropertyFromVersion.VERSION_7_10_0)
-            .setHelp(createDefaultDrivenPropertyHelpText("Gradle configuration types", "detect.gradle.include.unresolved.configurations"),
-                "Including dependencies from unresolved Gradle configurations could lead to false positives. Dependency versions from an unresolved configuration may differ from a resolved one. See https://docs.gradle.org/7.2/userguide/declaring_dependencies.html#sec:resolvable-consumable-configs")
+            .setHelp(
+                createDefaultDrivenPropertyHelpText("Gradle configuration types", "detect.gradle.include.unresolved.configurations"),
+                "Including dependencies from unresolved Gradle configurations could lead to false positives. Dependency versions from an unresolved configuration may differ from a resolved one. See https://docs.gradle.org/7.2/userguide/declaring_dependencies.html#sec:resolvable-consumable-configs"
+            )
             .setExample(GradleConfigurationType.UNRESOLVED.name())
             .setGroups(DetectGroup.GRADLE, DetectGroup.SOURCE_SCAN)
             .build();
@@ -737,8 +762,10 @@ private DetectProperties() {
     public static final CaseSensitiveStringListProperty DETECT_GRADLE_INCLUDED_PROJECTS =
         CaseSensitiveStringListProperty.newBuilder("detect.gradle.included.projects")
             .setInfo("Gradle Include Projects", DetectPropertyFromVersion.VERSION_3_0_0)
-            .setHelp("A comma-separated list of Gradle sub-projects to include.",
-                "As Detect examines the Gradle project for dependencies, if this property is set, Detect will include only those sub-projects specified via this property that are not excluded. Leaving this unset implies 'include all'. Exclusion rules always win. This property accepts filename globbing-style wildcards. Refer to the <i>Configuring Synopsys Detect</i> > <i>Property wildcard support</i> page for more details.")
+            .setHelp(
+                "A comma-separated list of Gradle sub-projects to include.",
+                "As Detect examines the Gradle project for dependencies, if this property is set, Detect will include only those sub-projects specified via this property that are not excluded. Leaving this unset implies 'include all'. Exclusion rules always win. This property accepts filename globbing-style wildcards. Refer to the <i>Configuring Synopsys Detect</i> > <i>Property wildcard support</i> page for more details."
+            )
             .setGroups(DetectGroup.GRADLE, DetectGroup.SOURCE_SCAN)
             .setCategory(DetectCategory.Advanced)
             .build();
@@ -760,7 +787,8 @@ private DetectProperties() {
     public static final StringListProperty DETECT_EXCLUDED_DIRECTORIES =
         StringListProperty.newBuilder("detect.excluded.directories", emptyList())
             .setInfo("Detect Excluded Directories", DetectPropertyFromVersion.VERSION_7_0_0)
-            .setHelp("A comma-separated list of names, name patterns, relative paths, or path patterns of directories that Detect should exclude.",
+            .setHelp(
+                "A comma-separated list of names, name patterns, relative paths, or path patterns of directories that Detect should exclude.",
                 "Subdirectories whose name or path is resolved from the patterns in this list will not be searched when determining which detectors to run, and will be excluded from signature scan using the Scan CLI '--exclude' flag. Refer to the <i>Downloading and Running Synopsys Detect</i> > <i>Including and Excluding Tools, Detectors, Directories, etc.</i> page for more details."
             )
             .setGroups(DetectGroup.PATHS, DetectGroup.DETECTOR, DetectGroup.GLOBAL, DetectGroup.SOURCE_SCAN)
@@ -771,7 +799,8 @@ private DetectProperties() {
     public static final BooleanProperty DETECT_EXCLUDED_DIRECTORIES_DEFAULTS_DISABLED =
         BooleanProperty.newBuilder("detect.excluded.directories.defaults.disabled", false)
             .setInfo("Detect Excluded Directories Defaults Disabled", DetectPropertyFromVersion.VERSION_7_0_0)
-            .setHelp("If false, Detect will exclude the default directory names. See the detailed help for more information.",
+            .setHelp(
+                "If false, Detect will exclude the default directory names. See the detailed help for more information.",
                 "If false, the following directories will be excluded by Detect when searching for detectors: bin, build, .git, .gradle, node_modules, out, packages, target, .synopsys, and the following directories will be excluded from signature scan using the Scan CLI '--exclude' flag: .git, .gradle, node_modules, .synopsys."
             )
             .setGroups(DetectGroup.PATHS, DetectGroup.DETECTOR, DetectGroup.GLOBAL, DetectGroup.SOURCE_SCAN)
@@ -796,8 +825,10 @@ private DetectProperties() {
     public static final NullablePathProperty DETECT_IMPACT_ANALYSIS_OUTPUT_PATH =
         NullablePathProperty.newBuilder("detect.impact.analysis.output.path")
             .setInfo("Impact Analysis Output Directory", DetectPropertyFromVersion.VERSION_6_5_0)
-            .setHelp("The path to the output directory for Impact Analysis reports.",
-                "If not set, the Impact Analysis reports are placed in a 'impact-analysis' subdirectory of the output directory.")
+            .setHelp(
+                "The path to the output directory for Impact Analysis reports.",
+                "If not set, the Impact Analysis reports are placed in a 'impact-analysis' subdirectory of the output directory."
+            )
             .setGroups(DetectGroup.IMPACT_ANALYSIS, DetectGroup.GLOBAL, DetectGroup.SOURCE_SCAN)
             .build();
 
@@ -823,8 +854,10 @@ private DetectProperties() {
     public static final CaseSensitiveStringListProperty DETECT_LERNA_EXCLUDED_PACKAGES =
         CaseSensitiveStringListProperty.newBuilder("detect.lerna.excluded.packages")
             .setInfo("Lerna Packages Excluded", DetectPropertyFromVersion.VERSION_7_0_0)
-            .setHelp("A comma-separated list of Lerna packages to exclude.",
-                "As Detect parses the output of lerna ls --all --json, Detect will exclude any Lerna packages specified via this property. This property accepts filename globbing-style wildcards. Refer to the <i>Configuring Synopsys Detect</i> > <i>Property wildcard support</i> page for more details.")
+            .setHelp(
+                "A comma-separated list of Lerna packages to exclude.",
+                "As Detect parses the output of lerna ls --all --json, Detect will exclude any Lerna packages specified via this property. This property accepts filename globbing-style wildcards. Refer to the <i>Configuring Synopsys Detect</i> > <i>Property wildcard support</i> page for more details."
+            )
             .setGroups(DetectGroup.LERNA, DetectGroup.SOURCE_SCAN)
             .setCategory(DetectCategory.Advanced)
             .build();
@@ -832,8 +865,10 @@ private DetectProperties() {
     public static final CaseSensitiveStringListProperty DETECT_LERNA_INCLUDED_PACKAGES =
         CaseSensitiveStringListProperty.newBuilder("detect.lerna.included.packages")
             .setInfo("Lerna Packages Included", DetectPropertyFromVersion.VERSION_7_0_0)
-            .setHelp("A comma-separated list of Lerna packages to include.",
-                "As Detect parses the output of lerna ls --all --json2, if this property is set, Detect will include only those Lerna packages specified via this property that are not excluded. Leaving this unset implies 'include all'. Exclusion rules always win. This property accepts filename globbing-style wildcards. Refer to the <i>Configuring Synopsys Detect</i> > <i>Property wildcard support</i> page for more details.")
+            .setHelp(
+                "A comma-separated list of Lerna packages to include.",
+                "As Detect parses the output of lerna ls --all --json2, if this property is set, Detect will include only those Lerna packages specified via this property that are not excluded. Leaving this unset implies 'include all'. Exclusion rules always win. This property accepts filename globbing-style wildcards. Refer to the <i>Configuring Synopsys Detect</i> > <i>Property wildcard support</i> page for more details."
+            )
             .setGroups(DetectGroup.LERNA, DetectGroup.SOURCE_SCAN)
             .setCategory(DetectCategory.Advanced)
             .build();
@@ -856,16 +891,20 @@ private DetectProperties() {
     public static final NullableStringProperty DETECT_MAVEN_BUILD_COMMAND =
         NullableStringProperty.newBuilder("detect.maven.build.command")
             .setInfo("Maven Build Command", DetectPropertyFromVersion.VERSION_3_0_0)
-            .setHelp("Maven command line arguments to add to the mvn/mvnw command line.",
-                "By default, Detect runs the mvn (or mvnw) command with one argument: dependency:tree. You can use this property to insert one or more additional mvn command line arguments (goals, etc.) before the dependency:tree argument. For example: suppose you are running in bash on Linux, and want to point maven to your settings file (maven_dev_settings.xml in your home directory) and assign the value 'other' to property 'reason'. You could do this with: --detect.maven.build.command='--settings \\${HOME}/maven_dev_settings.xml --define reason=other'")
+            .setHelp(
+                "Maven command line arguments to add to the mvn/mvnw command line.",
+                "By default, Detect runs the mvn (or mvnw) command with one argument: dependency:tree. You can use this property to insert one or more additional mvn command line arguments (goals, etc.) before the dependency:tree argument. For example: suppose you are running in bash on Linux, and want to point maven to your settings file (maven_dev_settings.xml in your home directory) and assign the value 'other' to property 'reason'. You could do this with: --detect.maven.build.command='--settings \\${HOME}/maven_dev_settings.xml --define reason=other'"
+            )
             .setGroups(DetectGroup.MAVEN, DetectGroup.SOURCE_SCAN)
             .build();
 
     public static final CaseSensitiveStringListProperty DETECT_MAVEN_EXCLUDED_MODULES =
         CaseSensitiveStringListProperty.newBuilder("detect.maven.excluded.modules")
             .setInfo("Maven Modules Excluded", DetectPropertyFromVersion.VERSION_3_0_0)
-            .setHelp("A comma-separated list of Maven modules (sub-projects) to exclude.",
-                "As Detect parses the mvn dependency:tree output for dependencies, Detect will skip any Maven modules specified via this property. This property accepts filename globbing-style wildcards. Refer to the <i>Configuring Synopsys Detect</i> > <i>Property wildcard support</i> page for more details.")
+            .setHelp(
+                "A comma-separated list of Maven modules (sub-projects) to exclude.",
+                "As Detect parses the mvn dependency:tree output for dependencies, Detect will skip any Maven modules specified via this property. This property accepts filename globbing-style wildcards. Refer to the <i>Configuring Synopsys Detect</i> > <i>Property wildcard support</i> page for more details."
+            )
             .setGroups(DetectGroup.MAVEN, DetectGroup.SOURCE_SCAN)
             .setCategory(DetectCategory.Advanced)
             .build();
@@ -873,8 +912,10 @@ private DetectProperties() {
     public static final CaseSensitiveStringListProperty DETECT_MAVEN_INCLUDED_MODULES =
         CaseSensitiveStringListProperty.newBuilder("detect.maven.included.modules")
             .setInfo("Maven Modules Included", DetectPropertyFromVersion.VERSION_3_0_0)
-            .setHelp("A comma-separated list of Maven modules (sub-projects) to include.",
-                "As Detect parses the mvn dependency:tree output for dependencies, if this property is set, Detect will include only those Maven modules specified via this property that are not excluded. Leaving this unset implies 'include all'. Exclusion rules always win. This property accepts filename globbing-style wildcards. Refer to the <i>Configuring Synopsys Detect</i> > <i>Property wildcard support</i> page for more details.")
+            .setHelp(
+                "A comma-separated list of Maven modules (sub-projects) to include.",
+                "As Detect parses the mvn dependency:tree output for dependencies, if this property is set, Detect will include only those Maven modules specified via this property that are not excluded. Leaving this unset implies 'include all'. Exclusion rules always win. This property accepts filename globbing-style wildcards. Refer to the <i>Configuring Synopsys Detect</i> > <i>Property wildcard support</i> page for more details."
+            )
             .setGroups(DetectGroup.MAVEN, DetectGroup.SOURCE_SCAN)
             .setCategory(DetectCategory.Advanced)
             .build();
@@ -889,16 +930,20 @@ private DetectProperties() {
     public static final CaseSensitiveStringListProperty DETECT_MAVEN_INCLUDED_SCOPES =
         CaseSensitiveStringListProperty.newBuilder("detect.maven.included.scopes")
             .setInfo("Dependency Scope Included", DetectPropertyFromVersion.VERSION_6_0_0)
-            .setHelp("A comma separated list of Maven scopes. Output will be limited to dependencies within these scopes (overridden by exclude).",
-                "If set, Detect will include only dependencies of the given Maven scope. This property accepts filename globbing-style wildcards. This property accepts filename globbing-style wildcards. Refer to the <i>Configuring Synopsys Detect</i> > <i>Property wildcard support</i> page for more details.")
+            .setHelp(
+                "A comma separated list of Maven scopes. Output will be limited to dependencies within these scopes (overridden by exclude).",
+                "If set, Detect will include only dependencies of the given Maven scope. This property accepts filename globbing-style wildcards. This property accepts filename globbing-style wildcards. Refer to the <i>Configuring Synopsys Detect</i> > <i>Property wildcard support</i> page for more details."
+            )
             .setGroups(DetectGroup.MAVEN, DetectGroup.SOURCE_SCAN)
             .build();
 
     public static final CaseSensitiveStringListProperty DETECT_MAVEN_EXCLUDED_SCOPES =
         CaseSensitiveStringListProperty.newBuilder("detect.maven.excluded.scopes")
             .setInfo("Dependency Scope Excluded", DetectPropertyFromVersion.VERSION_6_0_0)
-            .setHelp("A comma separated list of Maven scopes. Output will be limited to dependencies outside these scopes (overrides include).",
-                "If set, Detect will include only dependencies outside of the given Maven scope. This property accepts filename globbing-style wildcards. Refer to the <i>Configuring Synopsys Detect</i> > <i>Property wildcard support</i> page for more details.")
+            .setHelp(
+                "A comma separated list of Maven scopes. Output will be limited to dependencies outside these scopes (overrides include).",
+                "If set, Detect will include only dependencies outside of the given Maven scope. This property accepts filename globbing-style wildcards. Refer to the <i>Configuring Synopsys Detect</i> > <i>Property wildcard support</i> page for more details."
+            )
             .setGroups(DetectGroup.MAVEN, DetectGroup.SOURCE_SCAN)
             .build();
 
@@ -995,8 +1040,10 @@ private DetectProperties() {
     public static final NullablePathProperty DETECT_OUTPUT_PATH =
         NullablePathProperty.newBuilder("detect.output.path")
             .setInfo("Detect Output Path", DetectPropertyFromVersion.VERSION_3_0_0)
-            .setHelp("The path to the output directory.",
-                "If set, Detect will use the given directory to store files that it downloads and creates, instead of using the default location (~/blackduck).")
+            .setHelp(
+                "The path to the output directory.",
+                "If set, Detect will use the given directory to store files that it downloads and creates, instead of using the default location (~/blackduck)."
+            )
             .setGroups(DetectGroup.PATHS, DetectGroup.GLOBAL)
             .build();
 
@@ -1050,8 +1097,10 @@ private DetectProperties() {
     public static final PathListProperty DETECT_PIP_REQUIREMENTS_PATH =
         PathListProperty.newBuilder("detect.pip.requirements.path", emptyList())
             .setInfo("PIP Requirements Path", DetectPropertyFromVersion.VERSION_3_0_0)
-            .setHelp("A comma-separated list of paths to requirements files, to be used to analyze requirements files with a filename other than requirements.txt or to specify which requirements files should be analyzed.",
-                "This property should only be set if you want the PIP Inspector Detector to run. For example: If your project uses Pipenv, do not set this property.")
+            .setHelp(
+                "A comma-separated list of paths to requirements files, to be used to analyze requirements files with a filename other than requirements.txt or to specify which requirements files should be analyzed.",
+                "This property should only be set if you want the PIP Inspector Detector to run. For example: If your project uses Pipenv, do not set this property."
+            )
             .setGroups(DetectGroup.PIP, DetectGroup.SOURCE_SCAN)
             .build();
 
@@ -1120,7 +1169,8 @@ private DetectProperties() {
             .setInfo("Custom Fields", DetectPropertyFromVersion.VERSION_5_6_0)
             .setHelp(
                 "A  list of custom fields with a label and comma-separated value starting from index 0. For each index, provide one label and one value. For example, to set a custom field with label 'example' to 'one,two': `detect.custom.fields.project[0].label='example'` and `detect.custom.fields.project[0].value='one,two'`. To set another field, use index 1. Note that these will not show up in the detect configuration log.",
-                "When assigning a value that contains a comma to a single-value field such as a text field, append '[0]' to the end of the value property name. For example, to set the value of the first field you are setting ('detect.custom.fields.version[0]') to 'text1,text2', use 'detect.custom.fields.version[0].value[0]=text1,text2'.")
+                "When assigning a value that contains a comma to a single-value field such as a text field, append '[0]' to the end of the value property name. For example, to set the value of the first field you are setting ('detect.custom.fields.version[0]') to 'text1,text2', use 'detect.custom.fields.version[0].value[0]=text1,text2'."
+            )
             .setGroups(DetectGroup.PROJECT, DetectGroup.PROJECT_SETTING)
             .setCategory(DetectCategory.Advanced)
             .build();
@@ -1131,7 +1181,8 @@ private DetectProperties() {
             .setInfo("Custom Fields", DetectPropertyFromVersion.VERSION_5_6_0)
             .setHelp(
                 "A  list of custom fields with a label and comma-separated value starting from index 0. For each index, provide one label and one value. For example , to set a custom field with label 'example' to 'one,two': `detect.custom.fields.version[0].label='example'` and `detect.custom.fields.version[0].value='one,two'`. To set another field, use index 1. Note that these will not show up in the detect configuration log.",
-                "When assigning a value that contains a comma to a single-value field such as a text field, append '[0]' to the end of the value property name. For example, to set the value of the first field you are setting ('detect.custom.fields.version[0]') to 'text1,text2', use 'detect.custom.fields.version[0].value[0]=text1,text2'.")
+                "When assigning a value that contains a comma to a single-value field such as a text field, append '[0]' to the end of the value property name. For example, to set the value of the first field you are setting ('detect.custom.fields.version[0]') to 'text1,text2', use 'detect.custom.fields.version[0].value[0]=text1,text2'."
+            )
             .setGroups(DetectGroup.PROJECT, DetectGroup.PROJECT_SETTING)
             .setCategory(DetectCategory.Advanced)
             .build();
@@ -1208,8 +1259,10 @@ private DetectProperties() {
     public static final BooleanProperty DETECT_PROJECT_LEVEL_ADJUSTMENTS =
         BooleanProperty.newBuilder("detect.project.level.adjustments", true)
             .setInfo("Allow Project Level Adjustments", DetectPropertyFromVersion.VERSION_3_0_0)
-            .setHelp("Sets the component adjustments setting on the Black Duck project.",
-                "Corresponds to the 'Always maintain component adjustments to all versions of this project' checkbox under 'Component Adjustments' on the Black Duck Project settings page.")
+            .setHelp(
+                "Sets the component adjustments setting on the Black Duck project.",
+                "Corresponds to the 'Always maintain component adjustments to all versions of this project' checkbox under 'Component Adjustments' on the Black Duck Project settings page."
+            )
             .setGroups(DetectGroup.PROJECT, DetectGroup.PROJECT_SETTING, DetectGroup.GLOBAL)
             .setCategory(DetectCategory.Advanced)
             .build();
@@ -1416,8 +1469,10 @@ private DetectProperties() {
     public static final EnumProperty<DetectTargetType> DETECT_TARGET_TYPE =
         EnumProperty.newBuilder("detect.target.type", DetectTargetType.SOURCE, DetectTargetType.class)
             .setInfo("Detect Target", DetectPropertyFromVersion.VERSION_7_0_0)
-            .setHelp("Informs detect of what is being scanned which allows improved user experience when scanning different types of targets.",
-                "Changes the behaviour of detect to better suite what is being scanned. For example, when IMAGE is selected, detect will not pick a source directory, will automatically disable the DETECTOR tool and run BINARY/SIGNATURE SCAN on the provided image.")
+            .setHelp(
+                "Informs detect of what is being scanned which allows improved user experience when scanning different types of targets.",
+                "Changes the behaviour of detect to better suite what is being scanned. For example, when IMAGE is selected, detect will not pick a source directory, will automatically disable the DETECTOR tool and run BINARY/SIGNATURE SCAN on the provided image."
+            )
             .setGroups(DetectGroup.GENERAL, DetectGroup.GLOBAL)
             .setCategory(DetectCategory.Simple)
             .build();
@@ -1471,8 +1526,10 @@ private DetectProperties() {
     public static final CaseSensitiveStringListProperty DETECT_YARN_EXCLUDED_WORKSPACES =
         CaseSensitiveStringListProperty.newBuilder("detect.yarn.excluded.workspaces")
             .setInfo("Yarn Exclude Workspaces", DetectPropertyFromVersion.VERSION_7_0_0)
-            .setHelp("A comma-separated list of Yarn workspaces (specified by the workspace directory's relative path) to exclude.",
-                "By default, Detect includes all workspaces, but will skip any Yarn workspaces specified via this property. This property accepts filename globbing-style wildcards. Refer to the <i>Configuring Synopsys Detect</i> > <i>Property wildcard support</i> page for more details.")
+            .setHelp(
+                "A comma-separated list of Yarn workspaces (specified by the workspace directory's relative path) to exclude.",
+                "By default, Detect includes all workspaces, but will skip any Yarn workspaces specified via this property. This property accepts filename globbing-style wildcards. Refer to the <i>Configuring Synopsys Detect</i> > <i>Property wildcard support</i> page for more details."
+            )
             .setGroups(DetectGroup.YARN, DetectGroup.SOURCE_SCAN)
             .setCategory(DetectCategory.Advanced)
             .setExample("workspaces/workspace-a,workspaces/*-test")
@@ -1481,8 +1538,10 @@ private DetectProperties() {
     public static final CaseSensitiveStringListProperty DETECT_YARN_INCLUDED_WORKSPACES =
         CaseSensitiveStringListProperty.newBuilder("detect.yarn.included.workspaces")
             .setInfo("Yarn Include Workspaces", DetectPropertyFromVersion.VERSION_7_0_0)
-            .setHelp("A comma-separated list of Yarn workspaces (specified by the workspace directory's relative path) to include.",
-                "By default, Detect includes all workspaces. If workspaces are excluded or included, Detect will include any workspace included by this property that is not excluded. Exclusion rules always win. This property accepts filename globbing-style wildcards. Refer to the <i>Configuring Synopsys Detect</i> > <i>Property wildcard support</i> page for more details.")
+            .setHelp(
+                "A comma-separated list of Yarn workspaces (specified by the workspace directory's relative path) to include.",
+                "By default, Detect includes all workspaces. If workspaces are excluded or included, Detect will include any workspace included by this property that is not excluded. Exclusion rules always win. This property accepts filename globbing-style wildcards. Refer to the <i>Configuring Synopsys Detect</i> > <i>Property wildcard support</i> page for more details."
+            )
             .setGroups(DetectGroup.YARN, DetectGroup.SOURCE_SCAN)
             .setCategory(DetectCategory.Advanced)
             .setExample("workspaces/workspace-a,workspaces/workspace-b")
@@ -1491,7 +1550,8 @@ private DetectProperties() {
     public static final EnumProperty<LogLevel> LOGGING_LEVEL_COM_SYNOPSYS_INTEGRATION =
         EnumProperty.newBuilder("logging.level.com.synopsys.integration", LogLevel.INFO, LogLevel.class)
             .setInfo("Logging Level", DetectPropertyFromVersion.VERSION_5_3_0)
-            .setHelp("The logging level of Detect.",
+            .setHelp(
+                "The logging level of Detect.",
                 "To keep the log file size manageable, use INFO level logging for normal use. Use DEBUG or TRACE for troubleshooting.<p/>" +
                     "Detect logging uses Spring Boot logging, which uses Logback (https://logback.qos.ch). " +
                     "The format of this property name is <i>logging.level.{package}[.{class}]</i>. " +
@@ -1504,15 +1564,18 @@ private DetectProperties() {
                     "For log message format, Detect uses a default value of <i>%d{yyyy-MM-dd HH:mm:ss z} ${LOG_LEVEL_PATTERN:%-6p}[%thread] %clr(---){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:%wEx}</i>. " +
                     "You can change your log message format by setting the Spring Boot <i>logging.pattern.console</i> property to a different pattern. " +
                     "<p/>" +
-                    "Refer to the Spring Boot logging and Logback Project documentation for more details.")
+                    "Refer to the Spring Boot logging and Logback Project documentation for more details."
+            )
             .setGroups(DetectGroup.LOGGING, DetectGroup.GLOBAL)
             .build();
 
     public static final EnumProperty<LogLevel> LOGGING_LEVEL_DETECT =
         EnumProperty.newBuilder("logging.level.detect", LogLevel.INFO, LogLevel.class)
             .setInfo("Logging Level Shorthand", DetectPropertyFromVersion.VERSION_5_5_0)
-            .setHelp("Shorthand for the logging level of detect. Equivalent to setting <i>logging.level.com.synopsys.integration</i>.",
-                "Refer to the description of property <i>logging.level.com.synopsys.integration</i> for additional details.")
+            .setHelp(
+                "Shorthand for the logging level of detect. Equivalent to setting <i>logging.level.com.synopsys.integration</i>.",
+                "Refer to the description of property <i>logging.level.com.synopsys.integration</i> for additional details."
+            )
             .setGroups(DetectGroup.LOGGING, DetectGroup.GLOBAL)
             .build();
 
@@ -1534,8 +1597,10 @@ private DetectProperties() {
     public static final EnumProperty<BlackduckScanMode> DETECT_BLACKDUCK_SCAN_MODE =
         EnumProperty.newBuilder("detect.blackduck.scan.mode", BlackduckScanMode.INTELLIGENT, BlackduckScanMode.class)
             .setInfo("Detect Scan Mode", DetectPropertyFromVersion.VERSION_6_9_0)
-            .setHelp("Set the Black Duck scanning mode of Detect",
-                "Set the scanning mode of Detect to control how Detect will send data to Black Duck. RAPID will not persist the results and disables select Detect functionality for faster results. INTELLIGENT persists the results and permits all features of Detect.")
+            .setHelp(
+                "Set the Black Duck scanning mode of Detect",
+                "Set the scanning mode of Detect to control how Detect will send data to Black Duck. RAPID will not persist the results and disables select Detect functionality for faster results. INTELLIGENT persists the results and permits all features of Detect."
+            )
             .setGroups(DetectGroup.BLACKDUCK_SERVER, DetectGroup.BLACKDUCK)
             .setCategory(DetectCategory.Advanced)
             .build();
@@ -1565,7 +1630,8 @@ private DetectProperties() {
             .setCategory(DetectCategory.Advanced)
             .setDeprecated(
                 "This property is being removed, use detect.bdio.file.name to control the name of the bdio file Detect generates, currently it works the same as this property. In the future, Detect will only operate in SUBPROJECT aggregation mode and the new property will not control aggregation, only the file name.",
-                DetectMajorVersion.EIGHT)
+                DetectMajorVersion.EIGHT
+            )
             .build();
 
     @Deprecated
@@ -1617,7 +1683,8 @@ private DetectProperties() {
             .setCategory(DetectCategory.Advanced)
             .setDeprecated(
                 "This property is being removed because it no longer provides functionality. The gradle inspector library is no longer used to gather Gradle dependencies. The init script generated by Detect has all the necessary functionality.",
-                DetectMajorVersion.EIGHT)
+                DetectMajorVersion.EIGHT
+            )
             .build();
 
     @Deprecated
@@ -1674,8 +1741,10 @@ private DetectProperties() {
     public static final BooleanProperty DETECT_GRADLE_INCLUDE_UNRESOLVED_CONFIGURATIONS =
         BooleanProperty.newBuilder("detect.gradle.include.unresolved.configurations", false)
             .setInfo("Gradle Include Unresolved Configurations", DetectPropertyFromVersion.VERSION_7_6_0)
-            .setHelp("When set to true, dependencies discovered from unresolved Gradle configurations will be included. It is set to false by default for a more accurate BOM.",
-                "Including dependencies from unresolved Gradle configurations could lead to false positives. Dependency versions from an unresolved configuration may differ from a resolved one. See https://docs.gradle.org/7.2/userguide/declaring_dependencies.html#sec:resolvable-consumable-configs")
+            .setHelp(
+                "When set to true, dependencies discovered from unresolved Gradle configurations will be included. It is set to false by default for a more accurate BOM.",
+                "Including dependencies from unresolved Gradle configurations could lead to false positives. Dependency versions from an unresolved configuration may differ from a resolved one. See https://docs.gradle.org/7.2/userguide/declaring_dependencies.html#sec:resolvable-consumable-configs"
+            )
             .setGroups(DetectGroup.GRADLE, DetectGroup.SOURCE_SCAN)
             .setCategory(DetectCategory.Advanced)
             .setDeprecated(createDetectorPropertyDeprecationMessage(DETECT_GRADLE_CONFIGURATION_TYPES_EXCLUDED), DetectMajorVersion.EIGHT)
@@ -1757,8 +1826,10 @@ private DetectProperties() {
     public static final AllNoneEnumListProperty<PnpmDependencyType> DETECT_PNPM_DEPENDENCY_TYPES =
         AllNoneEnumListProperty.newBuilder("detect.pnpm.dependency.types", AllNoneEnum.ALL, PnpmDependencyType.class)
             .setInfo("pnpm Dependency Types", DetectPropertyFromVersion.VERSION_7_8_0)
-            .setHelp("Set this value to indicate which pnpm dependency types for should include in the BOM.",
-                "If you want Detect to report a specific type(s) of dependencies, pass a comma-separated list of such types (ex. APP, DEV, OPTIONAL).  By default, all types will be reported.")
+            .setHelp(
+                "Set this value to indicate which pnpm dependency types for should include in the BOM.",
+                "If you want Detect to report a specific type(s) of dependencies, pass a comma-separated list of such types (ex. APP, DEV, OPTIONAL).  By default, all types will be reported."
+            )
             .setGroups(DetectGroup.PNPM, DetectGroup.GLOBAL, DetectGroup.SOURCE_SCAN)
             .setDeprecated(createDetectorPropertyDeprecationMessage(DETECT_PNPM_DEPENDENCY_TYPES_EXCLUDED), DetectMajorVersion.EIGHT)
             .build();
@@ -1777,8 +1848,10 @@ private static String createDefaultDrivenPropertyHelpText(String exclusionTypePl
 
     // TODO: Remove in 8.0.0
     private static String createDetectorPropertyDeprecationMessage(@NotNull Property replacementProperty) {
-        return String.format("This property is being removed in favor of %s. If the replacement property is set, this property is ignored. The default value of this property is used if both properties are not set.",
-            replacementProperty.getKey());
+        return String.format(
+            "This property is being removed in favor of %s. If the replacement property is set, this property is ignored. The default value of this property is used if both properties are not set.",
+            replacementProperty.getKey()
+        );
     }
 
     // Accessor to get all properties
diff --git a/src/main/java/com/synopsys/integration/detect/configuration/DetectableOptionFactory.java b/src/main/java/com/synopsys/integration/detect/configuration/DetectableOptionFactory.java
index 37b1048ca9..b23b7f9908 100644
--- a/src/main/java/com/synopsys/integration/detect/configuration/DetectableOptionFactory.java
+++ b/src/main/java/com/synopsys/integration/detect/configuration/DetectableOptionFactory.java
@@ -155,8 +155,17 @@ public DockerDetectableOptions createDockerDetectableOptions() {
 
         Path dockerInspectorPath = detectConfiguration.getPathOrNull(DetectProperties.DETECT_DOCKER_INSPECTOR_PATH);
         String dockerPlatformTopLayerId = detectConfiguration.getNullableValue(DetectProperties.DETECT_DOCKER_PLATFORM_TOP_LAYER_ID);
-        return new DockerDetectableOptions(dockerPathRequired, suppliedDockerImage, dockerImageId, suppliedDockerTar, dockerInspectorLoggingLevel, dockerInspectorVersion, additionalDockerProperties, dockerInspectorPath,
-            dockerPlatformTopLayerId);
+        return new DockerDetectableOptions(
+            dockerPathRequired,
+            suppliedDockerImage,
+            dockerImageId,
+            suppliedDockerTar,
+            dockerInspectorLoggingLevel,
+            dockerInspectorVersion,
+            additionalDockerProperties,
+            dockerInspectorPath,
+            dockerPlatformTopLayerId
+        );
     }
 
     public GoModCliDetectableOptions createGoModCliDetectableOptions() {
diff --git a/src/main/java/com/synopsys/integration/detect/configuration/connection/BlackDuckConnectionDetails.java b/src/main/java/com/synopsys/integration/detect/configuration/connection/BlackDuckConnectionDetails.java
index 1bb0dda976..615326dfa1 100644
--- a/src/main/java/com/synopsys/integration/detect/configuration/connection/BlackDuckConnectionDetails.java
+++ b/src/main/java/com/synopsys/integration/detect/configuration/connection/BlackDuckConnectionDetails.java
@@ -14,8 +14,7 @@
     private final Integer parallelProcessors;
     private final ConnectionDetails connectionDetails;
 
-    public BlackDuckConnectionDetails(Boolean offline, @Nullable String blackDuckUrl, Map<String, String> blackduckProperties, Integer parallelProcessors,
-        ConnectionDetails connectionDetails) {
+    public BlackDuckConnectionDetails(Boolean offline, @Nullable String blackDuckUrl, Map<String, String> blackduckProperties, Integer parallelProcessors, ConnectionDetails connectionDetails) {
         this.offline = offline;
         this.blackDuckUrl = blackDuckUrl;
         this.blackduckProperties = blackduckProperties;
diff --git a/src/main/java/com/synopsys/integration/detect/configuration/help/DetectArgumentState.java b/src/main/java/com/synopsys/integration/detect/configuration/help/DetectArgumentState.java
index 6b0d6bc341..ed8f230f3a 100644
--- a/src/main/java/com/synopsys/integration/detect/configuration/help/DetectArgumentState.java
+++ b/src/main/java/com/synopsys/integration/detect/configuration/help/DetectArgumentState.java
@@ -17,8 +17,17 @@
 
     private final boolean isGenerateAirGapZip;
 
-    public DetectArgumentState(boolean isHelp, boolean isHelpJsonDocument, boolean isInteractive, boolean isVerboseHelp, boolean isDeprecatedHelp, @Nullable String parsedValue, boolean isDiagnostic, boolean isDiagnosticExtended,
-        boolean isGenerateAirGapZip) {
+    public DetectArgumentState(
+        boolean isHelp,
+        boolean isHelpJsonDocument,
+        boolean isInteractive,
+        boolean isVerboseHelp,
+        boolean isDeprecatedHelp,
+        @Nullable String parsedValue,
+        boolean isDiagnostic,
+        boolean isDiagnosticExtended,
+        boolean isGenerateAirGapZip
+    ) {
         this.isHelp = isHelp;
         this.isHelpJsonDocument = isHelpJsonDocument;
         this.isInteractive = isInteractive;
diff --git a/src/main/java/com/synopsys/integration/detect/configuration/help/json/HelpJsonWriter.java b/src/main/java/com/synopsys/integration/detect/configuration/help/json/HelpJsonWriter.java
index f861cbe586..972c74ad2b 100644
--- a/src/main/java/com/synopsys/integration/detect/configuration/help/json/HelpJsonWriter.java
+++ b/src/main/java/com/synopsys/integration/detect/configuration/help/json/HelpJsonWriter.java
@@ -96,7 +96,7 @@ public HelpJsonOption convertOption(Property property) {
         helpJsonOption.setDeprecatedValues(property.getPropertyDeprecationInfo().getDeprecatedValues().stream()
             .map(value -> new HelpJsonOptionDeprecatedValue(value.getValueDescription(), value.getReason()))
             .collect(Collectors.toList()));
-        
+
         helpJsonOption.setStrictValues(property.isOnlyExampleValues());
         helpJsonOption.setCaseSensitiveValues(property.isCaseSensitive());
         helpJsonOption.setAcceptableValues(property.listExampleValues().stream().map(Objects::toString).collect(Collectors.toList()));
diff --git a/src/main/java/com/synopsys/integration/detect/interactive/BlackDuckConnectionDecisionBranch.java b/src/main/java/com/synopsys/integration/detect/interactive/BlackDuckConnectionDecisionBranch.java
index f60974a098..eed6b5c802 100644
--- a/src/main/java/com/synopsys/integration/detect/interactive/BlackDuckConnectionDecisionBranch.java
+++ b/src/main/java/com/synopsys/integration/detect/interactive/BlackDuckConnectionDecisionBranch.java
@@ -56,7 +56,7 @@ public void traverse(InteractivePropertySourceBuilder propertySourceBuilder, Int
 
                     blackDuckConnectivityResult = blackDuckConnectivityChecker.determineConnectivity(blackDuckServerConfig);
                 } catch (Exception e) {
-                    blackDuckConnectivityResult = BlackDuckConnectivityResult.failure("Failed to test connection. " + System.lineSeparator() + e.toString());
+                    blackDuckConnectivityResult = BlackDuckConnectivityResult.failure("Failed to test connection. " + System.lineSeparator() + e);
                 }
 
                 if (!blackDuckConnectivityResult.isSuccessfullyConnected()) {
diff --git a/src/main/java/com/synopsys/integration/detect/interactive/reader/InteractiveReader.java b/src/main/java/com/synopsys/integration/detect/interactive/reader/InteractiveReader.java
index ee9e042063..a90e685066 100644
--- a/src/main/java/com/synopsys/integration/detect/interactive/reader/InteractiveReader.java
+++ b/src/main/java/com/synopsys/integration/detect/interactive/reader/InteractiveReader.java
@@ -1,8 +1,8 @@
 package com.synopsys.integration.detect.interactive.reader;
 
 public interface InteractiveReader {
-    public String readLine();
+    String readLine();
 
-    public String readPassword();
+    String readPassword();
 
 }
diff --git a/src/main/java/com/synopsys/integration/detect/lifecycle/boot/DetectBoot.java b/src/main/java/com/synopsys/integration/detect/lifecycle/boot/DetectBoot.java
index 10a4ec3aad..20e7042700 100644
--- a/src/main/java/com/synopsys/integration/detect/lifecycle/boot/DetectBoot.java
+++ b/src/main/java/com/synopsys/integration/detect/lifecycle/boot/DetectBoot.java
@@ -158,8 +158,12 @@ public DetectBoot(EventSystem eventSystem, Gson gson, DetectBootFactory detectBo
         try {
 
             ProductDecider productDecider = new ProductDecider();
-            BlackDuckDecision blackDuckDecision = productDecider.decideBlackDuck(detectConfigurationFactory.createBlackDuckConnectionDetails(), detectConfigurationFactory.createBlackDuckSignatureScannerOptions(),
-                detectConfigurationFactory.createScanMode(), detectConfigurationFactory.createBdioOptions());
+            BlackDuckDecision blackDuckDecision = productDecider.decideBlackDuck(
+                detectConfigurationFactory.createBlackDuckConnectionDetails(),
+                detectConfigurationFactory.createBlackDuckSignatureScannerOptions(),
+                detectConfigurationFactory.createScanMode(),
+                detectConfigurationFactory.createBdioOptions()
+            );
             RunDecision runDecision = new RunDecision(detectConfigurationFactory.createDetectTarget() == DetectTargetType.IMAGE); //TODO: Move to proper decision home. -jp
             DetectToolFilter detectToolFilter = detectConfigurationFactory.createToolFilter(runDecision, blackDuckDecision);
 
@@ -186,7 +190,8 @@ public DetectBoot(EventSystem eventSystem, Gson gson, DetectBootFactory detectBo
 
         BootSingletons bootSingletons = detectBootFactory
             .createRunDependencies(productRunData, propertyConfiguration, detectableOptionFactory, detectConfigurationFactory, directoryManager, freemarkerConfiguration, installedToolManager,
-                installedToolLocator);
+                installedToolLocator
+            );
         return Optional.of(DetectBootResult.run(bootSingletons, propertyConfiguration, productRunData, directoryManager, diagnosticSystem));
     }
 
diff --git a/src/main/java/com/synopsys/integration/detect/lifecycle/boot/DetectBootFactory.java b/src/main/java/com/synopsys/integration/detect/lifecycle/boot/DetectBootFactory.java
index 1cd9769b64..933c4a09c2 100644
--- a/src/main/java/com/synopsys/integration/detect/lifecycle/boot/DetectBootFactory.java
+++ b/src/main/java/com/synopsys/integration/detect/lifecycle/boot/DetectBootFactory.java
@@ -85,10 +85,32 @@ public DetectBootFactory(DetectRunId detectRunId, DetectInfo detectInfo, Gson gs
         this.fileFinder = fileFinder;
     }
 
-    public BootSingletons createRunDependencies(ProductRunData productRunData, PropertyConfiguration detectConfiguration, DetectableOptionFactory detectableOptionFactory, DetectConfigurationFactory detectConfigurationFactory,
-        DirectoryManager directoryManager, Configuration configuration, InstalledToolManager installedToolManager, InstalledToolLocator installedToolLocator) {
-        return new BootSingletons(productRunData, detectRunId, gson, detectInfo, fileFinder, eventSystem, createDetectorProfiler(), detectConfiguration, detectableOptionFactory, detectConfigurationFactory, directoryManager, configuration,
-            installedToolManager, installedToolLocator);
+    public BootSingletons createRunDependencies(
+        ProductRunData productRunData,
+        PropertyConfiguration detectConfiguration,
+        DetectableOptionFactory detectableOptionFactory,
+        DetectConfigurationFactory detectConfigurationFactory,
+        DirectoryManager directoryManager,
+        Configuration configuration,
+        InstalledToolManager installedToolManager,
+        InstalledToolLocator installedToolLocator
+    ) {
+        return new BootSingletons(
+            productRunData,
+            detectRunId,
+            gson,
+            detectInfo,
+            fileFinder,
+            eventSystem,
+            createDetectorProfiler(),
+            detectConfiguration,
+            detectableOptionFactory,
+            detectConfigurationFactory,
+            directoryManager,
+            configuration,
+            installedToolManager,
+            installedToolLocator
+        );
     }
 
     public Configuration createFreemarkerConfiguration() {
@@ -117,8 +139,10 @@ public DiagnosticSystem createDiagnosticSystem(boolean isDiagnosticExtended, Pro
         return new DiagnosticSystem(isDiagnosticExtended, detectConfiguration, detectRunId, detectInfo, directoryManager, eventSystem, maskedRawPropertyValues, propertyKeys);
     }
 
-    public AirGapCreator createAirGapCreator(ConnectionDetails connectionDetails, DetectExecutableOptions detectExecutableOptions, Configuration freemarkerConfiguration, InstalledToolManager installedToolManager,
-        InstalledToolLocator installedToolLocator) {
+    public AirGapCreator createAirGapCreator(
+        ConnectionDetails connectionDetails, DetectExecutableOptions detectExecutableOptions, Configuration freemarkerConfiguration, InstalledToolManager installedToolManager,
+        InstalledToolLocator installedToolLocator
+    ) {
         ConnectionFactory connectionFactory = new ConnectionFactory(connectionDetails);
         ArtifactResolver artifactResolver = new ArtifactResolver(connectionFactory, gson);
         ArtifactoryZipInstaller artifactoryZipInstaller = new ArtifactoryZipInstaller(artifactResolver);
diff --git a/src/main/java/com/synopsys/integration/detect/lifecycle/boot/decision/BlackDuckDecision.java b/src/main/java/com/synopsys/integration/detect/lifecycle/boot/decision/BlackDuckDecision.java
index 0271fc0952..f4fab805c4 100644
--- a/src/main/java/com/synopsys/integration/detect/lifecycle/boot/decision/BlackDuckDecision.java
+++ b/src/main/java/com/synopsys/integration/detect/lifecycle/boot/decision/BlackDuckDecision.java
@@ -3,9 +3,9 @@
 import com.synopsys.integration.detect.configuration.enumeration.BlackduckScanMode;
 
 public class BlackDuckDecision {
-    private boolean shouldRun;
-    private boolean isOffline;
-    private BlackduckScanMode scanMode;
+    private final boolean shouldRun;
+    private final boolean isOffline;
+    private final BlackduckScanMode scanMode;
 
     public BlackDuckDecision(boolean shouldRun, boolean isOffline, BlackduckScanMode scanMode) {
         this.shouldRun = shouldRun;
diff --git a/src/main/java/com/synopsys/integration/detect/lifecycle/boot/product/BlackDuckConnectivityResult.java b/src/main/java/com/synopsys/integration/detect/lifecycle/boot/product/BlackDuckConnectivityResult.java
index acbd67ca08..585b8fe967 100644
--- a/src/main/java/com/synopsys/integration/detect/lifecycle/boot/product/BlackDuckConnectivityResult.java
+++ b/src/main/java/com/synopsys/integration/detect/lifecycle/boot/product/BlackDuckConnectivityResult.java
@@ -4,17 +4,16 @@
 import com.synopsys.integration.blackduck.service.BlackDuckServicesFactory;
 
 public class BlackDuckConnectivityResult {
-    private boolean successfullyConnected;
+    private final boolean successfullyConnected;
 
     //if failure, the following is populated
-    private String failureReason;
+    private final String failureReason;
 
     //if success, the following is populated
-    private BlackDuckServicesFactory blackDuckServicesFactory;
-    private BlackDuckServerConfig blackDuckServerConfig;
+    private final BlackDuckServicesFactory blackDuckServicesFactory;
+    private final BlackDuckServerConfig blackDuckServerConfig;
 
-    private BlackDuckConnectivityResult(boolean successfullyConnected, String failureReason,
-        BlackDuckServicesFactory blackDuckServicesFactory, BlackDuckServerConfig blackDuckServerConfig) {
+    private BlackDuckConnectivityResult(boolean successfullyConnected, String failureReason, BlackDuckServicesFactory blackDuckServicesFactory, BlackDuckServerConfig blackDuckServerConfig) {
         this.successfullyConnected = successfullyConnected;
         this.failureReason = failureReason;
         this.blackDuckServicesFactory = blackDuckServicesFactory;
diff --git a/src/main/java/com/synopsys/integration/detect/lifecycle/boot/product/ProductBoot.java b/src/main/java/com/synopsys/integration/detect/lifecycle/boot/product/ProductBoot.java
index ffcde32b2c..5cb764fc8c 100644
--- a/src/main/java/com/synopsys/integration/detect/lifecycle/boot/product/ProductBoot.java
+++ b/src/main/java/com/synopsys/integration/detect/lifecycle/boot/product/ProductBoot.java
@@ -29,8 +29,7 @@
     private final ProductBootFactory productBootFactory;
     private final ProductBootOptions productBootOptions;
 
-    public ProductBoot(BlackDuckConnectivityChecker blackDuckConnectivityChecker, AnalyticsConfigurationService analyticsConfigurationService, ProductBootFactory productBootFactory,
-        ProductBootOptions productBootOptions) {
+    public ProductBoot(BlackDuckConnectivityChecker blackDuckConnectivityChecker, AnalyticsConfigurationService analyticsConfigurationService, ProductBootFactory productBootFactory, ProductBootOptions productBootOptions) {
         this.blackDuckConnectivityChecker = blackDuckConnectivityChecker;
         this.analyticsConfigurationService = analyticsConfigurationService;
         this.productBootFactory = productBootFactory;
@@ -41,7 +40,8 @@ public ProductRunData boot(BlackDuckDecision blackDuckDecision, DetectToolFilter
         if (!blackDuckDecision.shouldRun()) {
             throw new DetectUserFriendlyException(
                 "Your environment was not sufficiently configured to run Black Duck or Polaris. Please configure your environment for at least one product.  See online help at: https://detect.synopsys.com/doc/",
-                ExitCodeType.FAILURE_CONFIGURATION);
+                ExitCodeType.FAILURE_CONFIGURATION
+            );
 
         }
 
@@ -59,9 +59,13 @@ public ProductRunData boot(BlackDuckDecision blackDuckDecision, DetectToolFilter
     }
 
     @Nullable
-    private BlackDuckRunData getBlackDuckRunData(BlackDuckDecision blackDuckDecision, ProductBootFactory productBootFactory, BlackDuckConnectivityChecker blackDuckConnectivityChecker, ProductBootOptions productBootOptions,
-        AnalyticsConfigurationService analyticsConfigurationService) throws DetectUserFriendlyException {
-
+    private BlackDuckRunData getBlackDuckRunData(
+        BlackDuckDecision blackDuckDecision,
+        ProductBootFactory productBootFactory,
+        BlackDuckConnectivityChecker blackDuckConnectivityChecker,
+        ProductBootOptions productBootOptions,
+        AnalyticsConfigurationService analyticsConfigurationService
+    ) throws DetectUserFriendlyException {
         if (!blackDuckDecision.shouldRun()) {
             return null;
         }
diff --git a/src/main/java/com/synopsys/integration/detect/lifecycle/run/data/DockerTargetData.java b/src/main/java/com/synopsys/integration/detect/lifecycle/run/data/DockerTargetData.java
index fcc600e197..3388520dfe 100644
--- a/src/main/java/com/synopsys/integration/detect/lifecycle/run/data/DockerTargetData.java
+++ b/src/main/java/com/synopsys/integration/detect/lifecycle/run/data/DockerTargetData.java
@@ -11,11 +11,11 @@
 public class DockerTargetData {
 
     @Nullable
-    private File squashedImage;
+    private final File squashedImage;
     @Nullable
-    private File containerFilesystem;
+    private final File containerFilesystem;
     @Nullable
-    private File providedImageTar;
+    private final File providedImageTar;
 
     public static DockerTargetData NO_DOCKER_TARGET = new DockerTargetData(null, null, null);
 
diff --git a/src/main/java/com/synopsys/integration/detect/lifecycle/run/operation/OperationFactory.java b/src/main/java/com/synopsys/integration/detect/lifecycle/run/operation/OperationFactory.java
index b072a48684..58fc19a997 100644
--- a/src/main/java/com/synopsys/integration/detect/lifecycle/run/operation/OperationFactory.java
+++ b/src/main/java/com/synopsys/integration/detect/lifecycle/run/operation/OperationFactory.java
@@ -204,8 +204,14 @@
 
     //Internal: Operation -> Action
     //Leave OperationSystem but it becomes 'user facing groups of actions or steps'
-    public OperationFactory(DetectDetectableFactory detectDetectableFactory, DetectFontLoaderFactory detectFontLoaderFactory, BootSingletons bootSingletons, UtilitySingletons utilitySingletons, EventSingletons eventSingletons,
-        ExitCodeManager exitCodeManager) {
+    public OperationFactory(
+        DetectDetectableFactory detectDetectableFactory,
+        DetectFontLoaderFactory detectFontLoaderFactory,
+        BootSingletons bootSingletons,
+        UtilitySingletons utilitySingletons,
+        EventSingletons eventSingletons,
+        ExitCodeManager exitCodeManager
+    ) {
         this.detectDetectableFactory = detectDetectableFactory;
         this.detectFontLoaderFactory = detectFontLoaderFactory;
 
@@ -239,7 +245,8 @@ public OperationFactory(DetectDetectableFactory detectDetectableFactory, DetectF
         return auditLog.namedInternal("Check For Docker", () -> {
             DetectableTool detectableTool = new DetectableTool(detectDetectableFactory::createDockerDetectable,
                 extractionEnvironmentProvider, codeLocationConverter, "DOCKER", DetectTool.DOCKER,
-                statusEventPublisher, exitCodePublisher);
+                statusEventPublisher, exitCodePublisher
+            );
 
             if (detectableTool.initializeAndCheckForApplicable(directoryManager.getSourceDirectory())) {
                 return Optional.of(detectableTool);
@@ -253,7 +260,8 @@ public OperationFactory(DetectDetectableFactory detectDetectableFactory, DetectF
         return auditLog.namedInternal("Check For Bazel", () -> {
             DetectableTool detectableTool = new DetectableTool(detectDetectableFactory::createBazelDetectable,
                 extractionEnvironmentProvider, codeLocationConverter, "BAZEL", DetectTool.BAZEL,
-                statusEventPublisher, exitCodePublisher);
+                statusEventPublisher, exitCodePublisher
+            );
 
             if (detectableTool.initializeAndCheckForApplicable(directoryManager.getSourceDirectory())) {
                 return Optional.of(detectableTool);
@@ -277,9 +285,11 @@ public final DetectorToolResult executeDetectors() throws DetectUserFriendlyExce
             DetectorRuleFactory detectorRuleFactory = new DetectorRuleFactory();
             DetectorRuleSet detectRuleSet = detectorRuleFactory.createRules(detectDetectableFactory, detectorToolOptions.isBuildless());
             DetectorTool detectorTool = new DetectorTool(new DetectorFinder(), extractionEnvironmentProvider, eventSystem, codeLocationConverter, new DetectorIssuePublisher(), statusEventPublisher, exitCodePublisher,
-                detectorEventPublisher);
+                detectorEventPublisher
+            );
             return detectorTool.performDetectors(directoryManager.getSourceDirectory(), detectRuleSet, detectConfigurationFactory.createDetectorFinderOptions(),
-                detectConfigurationFactory.createDetectorEvaluationOptions(), detectorToolOptions.getProjectBomTool(), detectorToolOptions.getRequiredDetectors(), fileFinder);
+                detectConfigurationFactory.createDetectorEvaluationOptions(), detectorToolOptions.getProjectBomTool(), detectorToolOptions.getRequiredDetectors(), fileFinder
+            );
         });
     }
 
@@ -364,8 +374,10 @@ public final Path generateImpactAnalysisFile(String codeLocationName) throws Det
         });
     }
 
-    public final void mapImpactAnalysisCodeLocations(Path impactAnalysisFile, CodeLocationCreationData<ImpactAnalysisBatchOutput> impactCodeLocationData, ProjectVersionWrapper projectVersionWrapper,
-        BlackDuckServicesFactory blackDuckServicesFactory) throws DetectUserFriendlyException {
+    public final void mapImpactAnalysisCodeLocations(
+        Path impactAnalysisFile, CodeLocationCreationData<ImpactAnalysisBatchOutput> impactCodeLocationData, ProjectVersionWrapper projectVersionWrapper,
+        BlackDuckServicesFactory blackDuckServicesFactory
+    ) throws DetectUserFriendlyException {
         auditLog.namedInternal("Map Impact Analysis Code Locations", () -> {
             ImpactAnalysisMapCodeLocationsOperation mapCodeLocationsOperation = new ImpactAnalysisMapCodeLocationsOperation(blackDuckServicesFactory.getBlackDuckApiClient());
             mapCodeLocationsOperation.mapCodeLocations(impactAnalysisFile, impactCodeLocationData, projectVersionWrapper);
@@ -396,7 +408,8 @@ public File createRiskReportFile(BlackDuckRunData blackDuckRunData, ProjectVersi
             DetectFontLoader detectFontLoader = detectFontLoaderFactory.detectFontLoader();
             ReportService reportService = creatReportService(blackDuckRunData);
             File createdPdf = reportService.createReportPdfFile(reportDirectory, projectVersionWrapper.getProjectView(), projectVersionWrapper.getProjectVersionView(), detectFontLoader::loadFont,
-                detectFontLoader::loadBoldFont);
+                detectFontLoader::loadBoldFont
+            );
             return createdPdf;
         });
     }
@@ -419,7 +432,8 @@ private ReportService creatReportService(BlackDuckRunData blackDuckRunData) thro
             IntegrationEscapeUtil integrationEscapeUtil = blackDuckServicesFactory.createIntegrationEscapeUtil();
             long reportServiceTimeout = detectConfigurationFactory.findTimeoutInSeconds() * 1000;
             return new ReportService(gson, blackDuckUrl, blackDuckApiClient,
-                apiDiscovery, reportServiceLogger, integrationEscapeUtil, reportServiceTimeout);
+                apiDiscovery, reportServiceLogger, integrationEscapeUtil, reportServiceTimeout
+            );
         });
     }
 
@@ -432,28 +446,33 @@ public void publishResult(DetectResult detectResult) {
     }
 
     public List<SignatureScanPath> createScanPaths(NameVersion projectNameVersion, DockerTargetData dockerTargetData) throws DetectUserFriendlyException {
-        return auditLog.namedInternal("Calculate Signature Scan Paths",
+        return auditLog.namedInternal(
+            "Calculate Signature Scan Paths",
             () -> {
                 List<String> exclusions = detectConfigurationFactory.collectSignatureScannerDirectoryExclusions();
                 DetectExcludedDirectoryFilter detectExcludedDirectoryFilter = new DetectExcludedDirectoryFilter(exclusions);
                 return new CalculateScanPathsOperation(detectConfigurationFactory.createBlackDuckSignatureScannerOptions(), directoryManager, fileFinder,
-                    detectExcludedDirectoryFilter::isExcluded)
+                    detectExcludedDirectoryFilter::isExcluded
+                )
                     .determinePathsAndExclusions(projectNameVersion, detectConfigurationFactory.createBlackDuckSignatureScannerOptions().getMaxDepth(), dockerTargetData);
-            });
+            }
+        );
     }
 
     public ScanBatch createScanBatchOnline(List<SignatureScanPath> scanPaths, NameVersion projectNameVersion, DockerTargetData dockerTargetData, BlackDuckRunData blackDuckRunData)
         throws DetectUserFriendlyException {
         return auditLog.namedPublic("Create Online Signature Scan Batch", "OnlineSigScan",
             () -> new CreateScanBatchOperation(detectConfigurationFactory.createBlackDuckSignatureScannerOptions(), directoryManager, codeLocationNameManager)
-                .createScanBatchWithBlackDuck(projectNameVersion, scanPaths, blackDuckRunData.getBlackDuckServerConfig(), dockerTargetData));
+                .createScanBatchWithBlackDuck(projectNameVersion, scanPaths, blackDuckRunData.getBlackDuckServerConfig(), dockerTargetData)
+        );
     }
 
     public ScanBatch createScanBatchOffline(List<SignatureScanPath> scanPaths, NameVersion projectNameVersion, DockerTargetData dockerTargetData)
         throws DetectUserFriendlyException {
         return auditLog.namedPublic("Create Offline Signature Scan Batch", "OfflineSigScan",
             () -> new CreateScanBatchOperation(detectConfigurationFactory.createBlackDuckSignatureScannerOptions(), directoryManager, codeLocationNameManager)
-                .createScanBatchWithoutBlackDuck(projectNameVersion, scanPaths, dockerTargetData));
+                .createScanBatchWithoutBlackDuck(projectNameVersion, scanPaths, dockerTargetData)
+        );
     }
 
     public File calculateDetectControlledInstallDirectory() throws DetectUserFriendlyException {
@@ -551,7 +570,8 @@ public void waitForCodeLocations(BlackDuckRunData blackDuckRunData, CodeLocation
             // In order to wait the full timeout, we have to not use that start time and instead use now().
             //TODO: Handle the possible null pointer here.
             NotificationTaskRange notificationTaskRange = new NotificationTaskRange(System.currentTimeMillis(), codeLocationWaitData.getNotificationRange().getStartDate(),
-                codeLocationWaitData.getNotificationRange().getEndDate());
+                codeLocationWaitData.getNotificationRange().getEndDate()
+            );
             CodeLocationCreationService codeLocationCreationService = blackDuckRunData.getBlackDuckServicesFactory().createCodeLocationCreationService(); //TODO: Is this the way? - jp
             CodeLocationWaitResult result = codeLocationCreationService.waitForCodeLocations(
                 notificationTaskRange,
@@ -602,12 +622,14 @@ public DependencyGraph aggregateDirect(List<DetectCodeLocation> detectCodeLocati
 
     public DependencyGraph aggregateTransitive(List<DetectCodeLocation> detectCodeLocations) throws DetectUserFriendlyException {
         return auditLog.namedPublic("Transitive Aggregate", "TransitiveAggregate",
-            () -> (new FullAggregateGraphCreator(new SimpleBdioFactory())).aggregateCodeLocations(Dependency::new, directoryManager.getSourceDirectory(), detectCodeLocations));
+            () -> (new FullAggregateGraphCreator(new SimpleBdioFactory())).aggregateCodeLocations(Dependency::new, directoryManager.getSourceDirectory(), detectCodeLocations)
+        );
     }
 
     public DependencyGraph aggregateSubProject(List<DetectCodeLocation> detectCodeLocations) throws DetectUserFriendlyException {
         return auditLog.namedPublic("SubProject Aggregate", "SubProjectAggregate",
-            () -> (new FullAggregateGraphCreator(new SimpleBdioFactory())).aggregateCodeLocations(ProjectDependency::new, directoryManager.getSourceDirectory(), detectCodeLocations));
+            () -> (new FullAggregateGraphCreator(new SimpleBdioFactory())).aggregateCodeLocations(ProjectDependency::new, directoryManager.getSourceDirectory(), detectCodeLocations)
+        );
     }
 
     public void createAggregateBdio1File(AggregateCodeLocation aggregateCodeLocation) throws DetectUserFriendlyException {
@@ -665,8 +687,10 @@ public void publishImpactSuccess() {
         });
     }
 
-    public ProjectVersionWrapper syncProjectVersion(NameVersion projectNameVersion, ProjectGroupFindResult projectGroupFindResult, CloneFindResult cloneFindResult, ProjectVersionLicenseFindResult projectVersionLicensesFindResult,
-        BlackDuckRunData blackDuckRunData) throws DetectUserFriendlyException {
+    public ProjectVersionWrapper syncProjectVersion(
+        NameVersion projectNameVersion, ProjectGroupFindResult projectGroupFindResult, CloneFindResult cloneFindResult, ProjectVersionLicenseFindResult projectVersionLicensesFindResult,
+        BlackDuckRunData blackDuckRunData
+    ) throws DetectUserFriendlyException {
         return auditLog.namedInternal("Sync Project", () -> {
             return new SyncProjectOperation(blackDuckRunData.getBlackDuckServicesFactory().createProjectService())
                 .sync(projectNameVersion, projectGroupFindResult, cloneFindResult, projectVersionLicensesFindResult, detectConfigurationFactory.createDetectProjectServiceOptions());
@@ -680,7 +704,8 @@ public ParentProjectMapOptions calculateParentProjectMapOptions() {
     public void mapToParentProject(String parentProjectName, String parentProjectVersionName, ProjectVersionWrapper projectVersion, BlackDuckRunData blackDuckRunData) throws DetectUserFriendlyException {
         auditLog.namedInternal("Map to Parent Project", () -> {
             new MapToParentOperation(blackDuckRunData.getBlackDuckServicesFactory().getBlackDuckApiClient(), blackDuckRunData.getBlackDuckServicesFactory().createProjectService(),
-                blackDuckRunData.getBlackDuckServicesFactory().createProjectBomService())
+                blackDuckRunData.getBlackDuckServicesFactory().createProjectBomService()
+            )
                 .mapToParentProjectVersion(parentProjectName, parentProjectVersionName, projectVersion);
         });
     }
diff --git a/src/main/java/com/synopsys/integration/detect/lifecycle/run/operation/blackduck/BdioUploadResult.java b/src/main/java/com/synopsys/integration/detect/lifecycle/run/operation/blackduck/BdioUploadResult.java
index be3458d53c..fb5863543e 100644
--- a/src/main/java/com/synopsys/integration/detect/lifecycle/run/operation/blackduck/BdioUploadResult.java
+++ b/src/main/java/com/synopsys/integration/detect/lifecycle/run/operation/blackduck/BdioUploadResult.java
@@ -6,7 +6,7 @@
 import com.synopsys.integration.blackduck.codelocation.upload.UploadBatchOutput;
 
 public class BdioUploadResult { //TODO: Static creation with success/failure?
-    private CodeLocationCreationData<UploadBatchOutput> uploadOutput;
+    private final CodeLocationCreationData<UploadBatchOutput> uploadOutput;
 
     public BdioUploadResult(CodeLocationCreationData<UploadBatchOutput> uploadOutput) {
         this.uploadOutput = uploadOutput;
diff --git a/src/main/java/com/synopsys/integration/detect/lifecycle/run/singleton/BootSingletons.java b/src/main/java/com/synopsys/integration/detect/lifecycle/run/singleton/BootSingletons.java
index 488baa6a99..19d9db1797 100644
--- a/src/main/java/com/synopsys/integration/detect/lifecycle/run/singleton/BootSingletons.java
+++ b/src/main/java/com/synopsys/integration/detect/lifecycle/run/singleton/BootSingletons.java
@@ -38,11 +38,22 @@
     private final InstalledToolManager installedToolManager;
     private final InstalledToolLocator installedToolLocator;
 
-    public BootSingletons(ProductRunData productRunData, DetectRunId detectRunId, Gson gson, DetectInfo detectInfo, FileFinder fileFinder, EventSystem eventSystem,
+    public BootSingletons(
+        ProductRunData productRunData,
+        DetectRunId detectRunId,
+        Gson gson,
+        DetectInfo detectInfo,
+        FileFinder fileFinder,
+        EventSystem eventSystem,
         DetectorProfiler detectorProfiler,
-        PropertyConfiguration detectConfiguration, DetectableOptionFactory detectableOptionFactory, DetectConfigurationFactory detectConfigurationFactory,
+        PropertyConfiguration detectConfiguration,
+        DetectableOptionFactory detectableOptionFactory,
+        DetectConfigurationFactory detectConfigurationFactory,
         DirectoryManager directoryManager,
-        Configuration configuration, InstalledToolManager installedToolManager, InstalledToolLocator installedToolLocator) {
+        Configuration configuration,
+        InstalledToolManager installedToolManager,
+        InstalledToolLocator installedToolLocator
+    ) {
         this.productRunData = productRunData;
         this.detectRunId = detectRunId;
         this.gson = gson;
diff --git a/src/main/java/com/synopsys/integration/detect/lifecycle/run/singleton/EventSingletons.java b/src/main/java/com/synopsys/integration/detect/lifecycle/run/singleton/EventSingletons.java
index fd5ba909f4..4a0c11ca5c 100644
--- a/src/main/java/com/synopsys/integration/detect/lifecycle/run/singleton/EventSingletons.java
+++ b/src/main/java/com/synopsys/integration/detect/lifecycle/run/singleton/EventSingletons.java
@@ -13,8 +13,13 @@
     private final CodeLocationEventPublisher codeLocationEventPublisher;
     private final ProjectEventPublisher projectEventPublisher;
 
-    public EventSingletons(StatusEventPublisher statusEventPublisher, ExitCodePublisher exitCodePublisher, DetectorEventPublisher detectorEventPublisher,
-        CodeLocationEventPublisher codeLocationEventPublisher, ProjectEventPublisher projectEventPublisher) {
+    public EventSingletons(
+        StatusEventPublisher statusEventPublisher,
+        ExitCodePublisher exitCodePublisher,
+        DetectorEventPublisher detectorEventPublisher,
+        CodeLocationEventPublisher codeLocationEventPublisher,
+        ProjectEventPublisher projectEventPublisher
+    ) {
         this.statusEventPublisher = statusEventPublisher;
         this.exitCodePublisher = exitCodePublisher;
         this.detectorEventPublisher = detectorEventPublisher;
diff --git a/src/main/java/com/synopsys/integration/detect/lifecycle/run/singleton/SingletonFactory.java b/src/main/java/com/synopsys/integration/detect/lifecycle/run/singleton/SingletonFactory.java
index 96852f5e67..b0cceeea68 100644
--- a/src/main/java/com/synopsys/integration/detect/lifecycle/run/singleton/SingletonFactory.java
+++ b/src/main/java/com/synopsys/integration/detect/lifecycle/run/singleton/SingletonFactory.java
@@ -64,8 +64,20 @@ public UtilitySingletons createUtilitySingletons(EventSingletons eventSingletons
         OperationSystem operationSystem = new OperationSystem(eventSingletons.getStatusEventPublisher());
         OperationWrapper operationWrapper = new OperationWrapper(exitCodeManager);
 
-        return new UtilitySingletons(externalIdFactory, connectionDetails, artifactResolver, codeLocationNameManager, createBdioCodeLocationsFromDetectCodeLocationsOperation, airGapInspectorPaths, bdioTransformer,
-            executableRunner, detectExecutableResolver, operationSystem, operationWrapper, artifactoryZipInstaller);
+        return new UtilitySingletons(
+            externalIdFactory,
+            connectionDetails,
+            artifactResolver,
+            codeLocationNameManager,
+            createBdioCodeLocationsFromDetectCodeLocationsOperation,
+            airGapInspectorPaths,
+            bdioTransformer,
+            executableRunner,
+            detectExecutableResolver,
+            operationSystem,
+            operationWrapper,
+            artifactoryZipInstaller
+        );
     }
 
     public EventSingletons createEventSingletons() {
diff --git a/src/main/java/com/synopsys/integration/detect/lifecycle/run/step/BinaryScanStepRunner.java b/src/main/java/com/synopsys/integration/detect/lifecycle/run/step/BinaryScanStepRunner.java
index 75fde26f98..1932f41e2f 100644
--- a/src/main/java/com/synopsys/integration/detect/lifecycle/run/step/BinaryScanStepRunner.java
+++ b/src/main/java/com/synopsys/integration/detect/lifecycle/run/step/BinaryScanStepRunner.java
@@ -17,7 +17,7 @@
 import com.synopsys.integration.util.NameVersion;
 
 public class BinaryScanStepRunner {
-    private OperationFactory operationFactory;
+    private final OperationFactory operationFactory;
     private final Logger logger = LoggerFactory.getLogger(this.getClass());
 
     public BinaryScanStepRunner(OperationFactory operationFactory) {
diff --git a/src/main/java/com/synopsys/integration/detect/lifecycle/run/step/IntelligentModeStepRunner.java b/src/main/java/com/synopsys/integration/detect/lifecycle/run/step/IntelligentModeStepRunner.java
index ea07840857..0c5fa655b6 100644
--- a/src/main/java/com/synopsys/integration/detect/lifecycle/run/step/IntelligentModeStepRunner.java
+++ b/src/main/java/com/synopsys/integration/detect/lifecycle/run/step/IntelligentModeStepRunner.java
@@ -39,9 +39,9 @@
 import com.synopsys.integration.util.NameVersion;
 
 public class IntelligentModeStepRunner {
-    private OperationFactory operationFactory;
+    private final OperationFactory operationFactory;
     private final Logger logger = LoggerFactory.getLogger(this.getClass());
-    private StepHelper stepHelper;
+    private final StepHelper stepHelper;
 
     public IntelligentModeStepRunner(OperationFactory operationFactory, StepHelper stepHelper) {
         this.operationFactory = operationFactory;
@@ -53,8 +53,13 @@ public void runOffline(NameVersion projectNameVersion, DockerTargetData dockerTa
             SignatureScanStepRunner signatureScanStepRunner = new SignatureScanStepRunner(operationFactory);
             signatureScanStepRunner.runSignatureScannerOffline(projectNameVersion, dockerTargetData);
         });
-        stepHelper.runToolIfIncludedWithCallbacks(DetectTool.IMPACT_ANALYSIS, "Vulnerability Impact Analysis",  /* because it does not publish it's own status */ () -> generateImpactAnalysis(projectNameVersion),
-            operationFactory::publishImpactSuccess, operationFactory::publishImpactFailure);
+        stepHelper.runToolIfIncludedWithCallbacks(
+            DetectTool.IMPACT_ANALYSIS,
+            "Vulnerability Impact Analysis",
+            () -> generateImpactAnalysis(projectNameVersion),
+            operationFactory::publishImpactSuccess,
+            operationFactory::publishImpactFailure
+        );
     }
 
     //TODO: Change black duck post options to a decision and stick it in Run Data somewhere.
@@ -83,9 +88,13 @@ public void runOnline(BlackDuckRunData blackDuckRunData, BdioResult bdioResult,
             binaryScanStepRunner.runBinaryScan(dockerTargetData, projectNameVersion, blackDuckRunData).ifPresent(codeLocationAccumulator::addWaitableCodeLocation);
         });
 
-        stepHelper.runToolIfIncludedWithCallbacks(DetectTool.IMPACT_ANALYSIS, "Vulnerability Impact Analysis",
+        stepHelper.runToolIfIncludedWithCallbacks(
+            DetectTool.IMPACT_ANALYSIS,
+            "Vulnerability Impact Analysis",
             () -> runImpactAnalysisOnline(projectNameVersion, projectVersion, codeLocationAccumulator, blackDuckRunData.getBlackDuckServicesFactory()),
-            operationFactory::publishImpactSuccess, operationFactory::publishImpactFailure);
+            operationFactory::publishImpactSuccess,
+            operationFactory::publishImpactFailure
+        );
 
         stepHelper.runAsGroup("Wait for Results", OperationType.INTERNAL, () -> {
             CodeLocationResults codeLocationResults = calculateCodeLocations(codeLocationAccumulator);
@@ -154,8 +163,12 @@ public void waitForCodeLocations(CodeLocationWaitData codeLocationWaitData, Name
         }
     }
 
-    public void runImpactAnalysisOnline(NameVersion projectNameVersion, ProjectVersionWrapper projectVersionWrapper, CodeLocationAccumulator codeLocationAccumulator,
-        BlackDuckServicesFactory blackDuckServicesFactory) throws DetectUserFriendlyException {
+    public void runImpactAnalysisOnline(
+        NameVersion projectNameVersion,
+        ProjectVersionWrapper projectVersionWrapper,
+        CodeLocationAccumulator codeLocationAccumulator,
+        BlackDuckServicesFactory blackDuckServicesFactory
+    ) throws DetectUserFriendlyException {
         String impactAnalysisName = operationFactory.generateImpactAnalysisCodeLocationName(projectNameVersion);
         Path impactFile = operationFactory.generateImpactAnalysisFile(impactAnalysisName);
         CodeLocationCreationData<ImpactAnalysisBatchOutput> uploadData = operationFactory.uploadImpactAnalysisFile(impactFile, projectNameVersion, impactAnalysisName, blackDuckServicesFactory);
diff --git a/src/main/java/com/synopsys/integration/detect/lifecycle/run/step/RapidModeStepRunner.java b/src/main/java/com/synopsys/integration/detect/lifecycle/run/step/RapidModeStepRunner.java
index c0485e3dfc..7b3b433277 100644
--- a/src/main/java/com/synopsys/integration/detect/lifecycle/run/step/RapidModeStepRunner.java
+++ b/src/main/java/com/synopsys/integration/detect/lifecycle/run/step/RapidModeStepRunner.java
@@ -28,7 +28,7 @@ public RapidModeStepRunner(OperationFactory operationFactory) {
     public void runOnline(BlackDuckRunData blackDuckRunData, NameVersion projectVersion, BdioResult bdioResult) throws DetectUserFriendlyException, IOException {
         operationFactory.phoneHome(blackDuckRunData);
         Optional<File> rapidScanConfig = operationFactory.findRapidScanConfig();
-        rapidScanConfig.ifPresent(config -> logger.info("Found rapid scan config file: " + config.toString()));
+        rapidScanConfig.ifPresent(config -> logger.info("Found rapid scan config file: " + config));
         List<HttpUrl> rapidScanUrls = operationFactory.performRapidUpload(blackDuckRunData, bdioResult, rapidScanConfig.orElse(null));
         List<DeveloperScanComponentResultView> rapidResults = operationFactory.waitForRapidResults(blackDuckRunData, rapidScanUrls);
         File jsonFile = operationFactory.generateRapidJsonFile(projectVersion, rapidResults);
diff --git a/src/main/java/com/synopsys/integration/detect/lifecycle/run/step/UniversalStepRunner.java b/src/main/java/com/synopsys/integration/detect/lifecycle/run/step/UniversalStepRunner.java
index 9754c6d7d1..b4c7b8e720 100644
--- a/src/main/java/com/synopsys/integration/detect/lifecycle/run/step/UniversalStepRunner.java
+++ b/src/main/java/com/synopsys/integration/detect/lifecycle/run/step/UniversalStepRunner.java
@@ -104,7 +104,8 @@ private BdioResult generateAggregateBdio(AggregateDecision aggregateDecision, Un
         } else {
             throw new DetectUserFriendlyException(
                 String.format("The %s property was set to an unsupported aggregation mode, will not aggregate at this time.", DetectProperties.DETECT_BOM_AGGREGATE_REMEDIATION_MODE.getKey()),
-                ExitCodeType.FAILURE_GENERAL_ERROR);
+                ExitCodeType.FAILURE_GENERAL_ERROR
+            );
         }
 
         boolean isBdio2 = operationFactory.calculateBdioOptions().isBdio2Enabled();
diff --git a/src/main/java/com/synopsys/integration/detect/lifecycle/run/step/utility/OperationWrapper.java b/src/main/java/com/synopsys/integration/detect/lifecycle/run/step/utility/OperationWrapper.java
index cc1be4bc25..ff6e5def6c 100644
--- a/src/main/java/com/synopsys/integration/detect/lifecycle/run/step/utility/OperationWrapper.java
+++ b/src/main/java/com/synopsys/integration/detect/lifecycle/run/step/utility/OperationWrapper.java
@@ -59,11 +59,11 @@ public void named(String name, Operation operation, OperationFunction supplier)
 
     @FunctionalInterface
     public interface OperationSupplier<T> {
-        public T execute() throws DetectUserFriendlyException, IntegrationException, InterruptedException, IOException, IntegrationRestException, BlackDuckTimeoutExceededException; //basically all known detect exceptions.
+        T execute() throws DetectUserFriendlyException, IntegrationException, InterruptedException, IOException; //basically all known detect exceptions.
     }
 
     @FunctionalInterface
     public interface OperationFunction {
-        public void execute() throws DetectUserFriendlyException, IntegrationException, InterruptedException, IOException, IntegrationRestException, BlackDuckTimeoutExceededException; //basically all known detect exceptions.
+        void execute() throws DetectUserFriendlyException, IntegrationException, InterruptedException, IOException; //basically all known detect exceptions.
     }
 }
diff --git a/src/main/java/com/synopsys/integration/detect/lifecycle/shutdown/ExitCodePublisher.java b/src/main/java/com/synopsys/integration/detect/lifecycle/shutdown/ExitCodePublisher.java
index 047c51192f..113714f86b 100644
--- a/src/main/java/com/synopsys/integration/detect/lifecycle/shutdown/ExitCodePublisher.java
+++ b/src/main/java/com/synopsys/integration/detect/lifecycle/shutdown/ExitCodePublisher.java
@@ -5,7 +5,7 @@
 import com.synopsys.integration.detect.workflow.event.EventSystem;
 
 public class ExitCodePublisher {
-    private EventSystem eventSystem;
+    private final EventSystem eventSystem;
 
     public ExitCodePublisher(EventSystem eventSystem) {
         this.eventSystem = eventSystem;
diff --git a/src/main/java/com/synopsys/integration/detect/lifecycle/shutdown/ShutdownDecision.java b/src/main/java/com/synopsys/integration/detect/lifecycle/shutdown/ShutdownDecision.java
index 070568eb5c..38e188e501 100644
--- a/src/main/java/com/synopsys/integration/detect/lifecycle/shutdown/ShutdownDecision.java
+++ b/src/main/java/com/synopsys/integration/detect/lifecycle/shutdown/ShutdownDecision.java
@@ -14,8 +14,7 @@
     @NotNull
     private final CleanupDecision cleanupDecision;
 
-    public ShutdownDecision(@Nullable PhoneHomeManager phoneHomeManager, @Nullable DiagnosticSystem diagnosticSystem,
-        @NotNull CleanupDecision cleanupDecision) {
+    public ShutdownDecision(@Nullable PhoneHomeManager phoneHomeManager, @Nullable DiagnosticSystem diagnosticSystem, @NotNull CleanupDecision cleanupDecision) {
         this.phoneHomeManager = phoneHomeManager;
         this.diagnosticSystem = diagnosticSystem;
         this.cleanupDecision = cleanupDecision;
diff --git a/src/main/java/com/synopsys/integration/detect/lifecycle/shutdown/ShutdownManager.java b/src/main/java/com/synopsys/integration/detect/lifecycle/shutdown/ShutdownManager.java
index e5ec61bf63..cdcc65ed41 100644
--- a/src/main/java/com/synopsys/integration/detect/lifecycle/shutdown/ShutdownManager.java
+++ b/src/main/java/com/synopsys/integration/detect/lifecycle/shutdown/ShutdownManager.java
@@ -13,7 +13,7 @@
 public class ShutdownManager {
     private final Logger logger = LoggerFactory.getLogger(this.getClass());
 
-    private CleanupUtility cleanupUtility;
+    private final CleanupUtility cleanupUtility;
 
     public ShutdownManager(CleanupUtility cleanupUtility) {
         this.cleanupUtility = cleanupUtility;
diff --git a/src/main/java/com/synopsys/integration/detect/tool/DetectableToolResult.java b/src/main/java/com/synopsys/integration/detect/tool/DetectableToolResult.java
index 60fcdb5b97..cb3fe93ac7 100644
--- a/src/main/java/com/synopsys/integration/detect/tool/DetectableToolResult.java
+++ b/src/main/java/com/synopsys/integration/detect/tool/DetectableToolResult.java
@@ -28,8 +28,13 @@
     @Nullable
     private final DetectableResult failedExtractableResult;
 
-    public DetectableToolResult(DetectableToolResultType resultType, @Nullable DetectToolProjectInfo detectToolProjectInfo, List<DetectCodeLocation> detectCodeLocations, @Nullable DockerTargetData dockerTargetData,
-        @Nullable DetectableResult failedExtractableResult) {
+    public DetectableToolResult(
+        DetectableToolResultType resultType,
+        @Nullable DetectToolProjectInfo detectToolProjectInfo,
+        List<DetectCodeLocation> detectCodeLocations,
+        @Nullable DockerTargetData dockerTargetData,
+        @Nullable DetectableResult failedExtractableResult
+    ) {
         this.resultType = resultType;
         this.detectToolProjectInfo = detectToolProjectInfo;
         this.detectCodeLocations = detectCodeLocations;
diff --git a/src/main/java/com/synopsys/integration/detect/tool/UniversalToolsResult.java b/src/main/java/com/synopsys/integration/detect/tool/UniversalToolsResult.java
index bbe9902a42..d5b82826f7 100644
--- a/src/main/java/com/synopsys/integration/detect/tool/UniversalToolsResult.java
+++ b/src/main/java/com/synopsys/integration/detect/tool/UniversalToolsResult.java
@@ -12,8 +12,7 @@
     private final List<DetectToolProjectInfo> detectToolProjectInfo;
     private final List<DetectCodeLocation> detectCodeLocations;
 
-    public UniversalToolsResult(boolean anyFailed, DockerTargetData dockerTargetData, List<DetectToolProjectInfo> detectToolProjectInfo,
-        List<DetectCodeLocation> detectCodeLocations) {
+    public UniversalToolsResult(boolean anyFailed, DockerTargetData dockerTargetData, List<DetectToolProjectInfo> detectToolProjectInfo, List<DetectCodeLocation> detectCodeLocations) {
         this.anyFailed = anyFailed;
         this.dockerTargetData = dockerTargetData;
         this.detectToolProjectInfo = detectToolProjectInfo;
diff --git a/src/main/java/com/synopsys/integration/detect/tool/binaryscanner/BinaryScanFindMultipleTargetsOperation.java b/src/main/java/com/synopsys/integration/detect/tool/binaryscanner/BinaryScanFindMultipleTargetsOperation.java
index 22341fbdc7..5c4ccb01e9 100644
--- a/src/main/java/com/synopsys/integration/detect/tool/binaryscanner/BinaryScanFindMultipleTargetsOperation.java
+++ b/src/main/java/com/synopsys/integration/detect/tool/binaryscanner/BinaryScanFindMultipleTargetsOperation.java
@@ -20,8 +20,8 @@
 
 public class BinaryScanFindMultipleTargetsOperation {
     private final Logger logger = LoggerFactory.getLogger(this.getClass());
-    private FileFinder fileFinder;
-    private DirectoryManager directoryManager;
+    private final FileFinder fileFinder;
+    private final DirectoryManager directoryManager;
 
     public BinaryScanFindMultipleTargetsOperation(FileFinder fileFinder, DirectoryManager directoryManager) {
         this.fileFinder = fileFinder;
diff --git a/src/main/java/com/synopsys/integration/detect/tool/binaryscanner/BinaryUploadOperation.java b/src/main/java/com/synopsys/integration/detect/tool/binaryscanner/BinaryUploadOperation.java
index 9b1cfe7420..9d876bb050 100644
--- a/src/main/java/com/synopsys/integration/detect/tool/binaryscanner/BinaryUploadOperation.java
+++ b/src/main/java/com/synopsys/integration/detect/tool/binaryscanner/BinaryUploadOperation.java
@@ -70,9 +70,11 @@ private void throwExceptionForError(BinaryScanBatchOutput binaryScanBatchOutput)
                 // multi-line html with the message embedded (that mess up the log).
                 // cleanResponse() attempts to produce something reasonable to log in either case
                 String cleanedBlackDuckResponse = cleanResponse(binaryScanOutput.getResponse());
-                String uploadErrorMessage = String.format("Error when uploading binary scan: %s (Black Duck response: %s)",
+                String uploadErrorMessage = String.format(
+                    "Error when uploading binary scan: %s (Black Duck response: %s)",
                     binaryScanOutput.getErrorMessage().orElse(binaryScanOutput.getStatusMessage()),
-                    cleanedBlackDuckResponse);
+                    cleanedBlackDuckResponse
+                );
                 logger.error(uploadErrorMessage);
                 throw new BlackDuckIntegrationException(uploadErrorMessage);
             }
diff --git a/src/main/java/com/synopsys/integration/detect/tool/cache/InstalledToolLocator.java b/src/main/java/com/synopsys/integration/detect/tool/cache/InstalledToolLocator.java
index 32d896296e..c0f724d7b3 100644
--- a/src/main/java/com/synopsys/integration/detect/tool/cache/InstalledToolLocator.java
+++ b/src/main/java/com/synopsys/integration/detect/tool/cache/InstalledToolLocator.java
@@ -14,7 +14,7 @@
 public class InstalledToolLocator {
     private InstalledToolData installedToolData;
 
-    private Logger logger = LoggerFactory.getLogger(this.getClass());
+    private final Logger logger = LoggerFactory.getLogger(this.getClass());
 
     public InstalledToolLocator(Path pathToInstalledToolDataFile, Gson gson) {
         File installedToolDataFile = pathToInstalledToolDataFile.toFile();
diff --git a/src/main/java/com/synopsys/integration/detect/tool/cache/InstalledToolManager.java b/src/main/java/com/synopsys/integration/detect/tool/cache/InstalledToolManager.java
index d18d609083..769e48adb7 100644
--- a/src/main/java/com/synopsys/integration/detect/tool/cache/InstalledToolManager.java
+++ b/src/main/java/com/synopsys/integration/detect/tool/cache/InstalledToolManager.java
@@ -8,7 +8,7 @@
 
     private final String jsonFileFormatVersion = "0.1.0";
 
-    private Map<String, String> installedTools = new HashMap<>();
+    private final Map<String, String> installedTools = new HashMap<>();
 
     public InstalledToolData getInstalledToolData() {
         InstalledToolData installedToolData = new InstalledToolData();
diff --git a/src/main/java/com/synopsys/integration/detect/tool/detector/CodeLocationConverter.java b/src/main/java/com/synopsys/integration/detect/tool/detector/CodeLocationConverter.java
index 0b3e4910b9..75a20dafcb 100644
--- a/src/main/java/com/synopsys/integration/detect/tool/detector/CodeLocationConverter.java
+++ b/src/main/java/com/synopsys/integration/detect/tool/detector/CodeLocationConverter.java
@@ -54,7 +54,7 @@ public CodeLocationConverter(ExternalIdFactory externalIdFactory) {
                     externalId = externalIdFactory.createPathExternalId(detectForge, FileNameUtils.relativizeParent(detectSourcePath.getAbsolutePath(), sourcePath.getAbsolutePath()));
                 }
 
-                logger.debug("The external id that was created is: " + Arrays.asList(externalId.getExternalIdPieces()).toString());
+                logger.debug("The external id that was created is: " + Arrays.asList(externalId.getExternalIdPieces()));
             } else {
                 externalId = codeLocation.getExternalId().get();
             }
diff --git a/src/main/java/com/synopsys/integration/detect/tool/detector/DetectExtractionEnvironment.java b/src/main/java/com/synopsys/integration/detect/tool/detector/DetectExtractionEnvironment.java
index 2c24b41f8a..2f981d13b1 100644
--- a/src/main/java/com/synopsys/integration/detect/tool/detector/DetectExtractionEnvironment.java
+++ b/src/main/java/com/synopsys/integration/detect/tool/detector/DetectExtractionEnvironment.java
@@ -6,7 +6,7 @@
 import com.synopsys.integration.detectable.extraction.ExtractionEnvironment;
 
 public class DetectExtractionEnvironment extends ExtractionEnvironment {
-    private ExtractionId extractionId;
+    private final ExtractionId extractionId;
 
     public DetectExtractionEnvironment(File outputDirectory, ExtractionId extractionId) {
         super(outputDirectory);
diff --git a/src/main/java/com/synopsys/integration/detect/tool/detector/DetectorTool.java b/src/main/java/com/synopsys/integration/detect/tool/detector/DetectorTool.java
index eba70ea4c7..ef02896a53 100644
--- a/src/main/java/com/synopsys/integration/detect/tool/detector/DetectorTool.java
+++ b/src/main/java/com/synopsys/integration/detect/tool/detector/DetectorTool.java
@@ -52,8 +52,16 @@
     private final ExitCodePublisher exitCodePublisher;
     private final DetectorEventPublisher detectorEventPublisher;
 
-    public DetectorTool(DetectorFinder detectorFinder, ExtractionEnvironmentProvider extractionEnvironmentProvider, EventSystem eventSystem, CodeLocationConverter codeLocationConverter,
-        DetectorIssuePublisher detectorIssuePublisher, StatusEventPublisher statusEventPublisher, ExitCodePublisher exitCodePublisher, DetectorEventPublisher detectorEventPublisher) {
+    public DetectorTool(
+        DetectorFinder detectorFinder,
+        ExtractionEnvironmentProvider extractionEnvironmentProvider,
+        EventSystem eventSystem,
+        CodeLocationConverter codeLocationConverter,
+        DetectorIssuePublisher detectorIssuePublisher,
+        StatusEventPublisher statusEventPublisher,
+        ExitCodePublisher exitCodePublisher,
+        DetectorEventPublisher detectorEventPublisher
+    ) {
         this.detectorFinder = detectorFinder;
         this.extractionEnvironmentProvider = extractionEnvironmentProvider;
         this.eventSystem = eventSystem;
@@ -64,8 +72,15 @@ public DetectorTool(DetectorFinder detectorFinder, ExtractionEnvironmentProvider
         this.detectorEventPublisher = detectorEventPublisher;
     }
 
-    public DetectorToolResult performDetectors(File directory, DetectorRuleSet detectorRuleSet, DetectorFinderOptions detectorFinderOptions, DetectorEvaluationOptions evaluationOptions, String projectDetector,
-        List<DetectorType> requiredDetectors, FileFinder fileFinder) {
+    public DetectorToolResult performDetectors(
+        File directory,
+        DetectorRuleSet detectorRuleSet,
+        DetectorFinderOptions detectorFinderOptions,
+        DetectorEvaluationOptions evaluationOptions,
+        String projectDetector,
+        List<DetectorType> requiredDetectors,
+        FileFinder fileFinder
+    ) {
         logger.debug("Initializing detector system.");
         Optional<DetectorEvaluationTree> possibleRootEvaluation;
 
diff --git a/src/main/java/com/synopsys/integration/detect/tool/detector/DetectorToolResult.java b/src/main/java/com/synopsys/integration/detect/tool/detector/DetectorToolResult.java
index a7ed32322c..84ed0cd824 100644
--- a/src/main/java/com/synopsys/integration/detect/tool/detector/DetectorToolResult.java
+++ b/src/main/java/com/synopsys/integration/detect/tool/detector/DetectorToolResult.java
@@ -29,9 +29,14 @@
     private final DetectorEvaluationTree rootDetectorEvaluationTree;
     private final Map<CodeLocation, DetectCodeLocation> codeLocationMap;
 
-    public DetectorToolResult(@Nullable NameVersion bomToolProjectNameVersion, List<DetectCodeLocation> bomToolCodeLocations, Set<DetectorType> applicableDetectorTypes,
-        Set<DetectorType> failedDetectorTypes, @Nullable DetectorEvaluationTree rootDetectorEvaluationTree,
-        Map<CodeLocation, DetectCodeLocation> codeLocationMap) {
+    public DetectorToolResult(
+        @Nullable NameVersion bomToolProjectNameVersion,
+        List<DetectCodeLocation> bomToolCodeLocations,
+        Set<DetectorType> applicableDetectorTypes,
+        Set<DetectorType> failedDetectorTypes,
+        @Nullable DetectorEvaluationTree rootDetectorEvaluationTree,
+        Map<CodeLocation, DetectCodeLocation> codeLocationMap
+    ) {
         this.bomToolProjectNameVersion = bomToolProjectNameVersion;
         this.bomToolCodeLocations = bomToolCodeLocations;
         this.applicableDetectorTypes = applicableDetectorTypes;
diff --git a/src/main/java/com/synopsys/integration/detect/tool/detector/executable/DetectExecutableResolver.java b/src/main/java/com/synopsys/integration/detect/tool/detector/executable/DetectExecutableResolver.java
index 78f7d91e2b..b84bf4ee13 100644
--- a/src/main/java/com/synopsys/integration/detect/tool/detector/executable/DetectExecutableResolver.java
+++ b/src/main/java/com/synopsys/integration/detect/tool/detector/executable/DetectExecutableResolver.java
@@ -45,8 +45,7 @@
 
     private final Map<String, File> cachedExecutables = new HashMap<>();
 
-    public DetectExecutableResolver(DirectoryExecutableFinder directoryExecutableFinder, SystemPathExecutableFinder systemPathExecutableFinder,
-                                    DetectExecutableOptions detectExecutableOptions) {
+    public DetectExecutableResolver(DirectoryExecutableFinder directoryExecutableFinder, SystemPathExecutableFinder systemPathExecutableFinder, DetectExecutableOptions detectExecutableOptions) {
         this.directoryExecutableFinder = directoryExecutableFinder;
         this.systemPathExecutableFinder = systemPathExecutableFinder;
         this.detectExecutableOptions = detectExecutableOptions;
@@ -94,17 +93,20 @@ private File resolveCachedSystemExecutable(String executableName, Path override)
     }
 
     private File resolveCachedSystemExecutable(String cacheKey, String executableName, Path override) throws DetectableException {
-        return resolve(cacheKey,
+        return resolve(
+            cacheKey,
             () -> resolveOverride(override),
             () -> resolveCache(cacheKey),
-            () -> systemPathExecutableFinder.findExecutable(executableName));
+            () -> systemPathExecutableFinder.findExecutable(executableName)
+        );
     }
 
     private File resolveLocalNonCachedExecutable(String localName, String systemName, DetectableEnvironment environment, Path override) throws DetectableException {
         return resolve(/* not cached */ null,
             () -> resolveOverride(override),
             () -> directoryExecutableFinder.findExecutable(localName, environment.getDirectory()),
-            () -> systemPathExecutableFinder.findExecutable(systemName));
+            () -> systemPathExecutableFinder.findExecutable(systemName)
+        );
     }
 
     @Override
diff --git a/src/main/java/com/synopsys/integration/detect/tool/detector/executable/DetectExecutableRunner.java b/src/main/java/com/synopsys/integration/detect/tool/detector/executable/DetectExecutableRunner.java
index 3e7ca7d71c..e434742533 100644
--- a/src/main/java/com/synopsys/integration/detect/tool/detector/executable/DetectExecutableRunner.java
+++ b/src/main/java/com/synopsys/integration/detect/tool/detector/executable/DetectExecutableRunner.java
@@ -26,8 +26,8 @@
     private final Logger logger;
     private final EventSystem eventSystem;
     private final boolean shouldLogOutput;
-    private ProcessBuilderRunner runner;
-    private ProcessBuilderRunner secretRunner;
+    private final ProcessBuilderRunner runner;
+    private final ProcessBuilderRunner secretRunner;
 
     private DetectExecutableRunner(Logger logger, Consumer<String> outputConsumer, Consumer<String> traceConsumer, EventSystem eventSystem, boolean shouldLogOutput) {
         this.logger = logger;
diff --git a/src/main/java/com/synopsys/integration/detect/tool/detector/factory/DetectDetectableFactory.java b/src/main/java/com/synopsys/integration/detect/tool/detector/factory/DetectDetectableFactory.java
index 6b994f2504..5690f29f09 100644
--- a/src/main/java/com/synopsys/integration/detect/tool/detector/factory/DetectDetectableFactory.java
+++ b/src/main/java/com/synopsys/integration/detect/tool/detector/factory/DetectDetectableFactory.java
@@ -8,7 +8,6 @@
 import com.synopsys.integration.detectable.detectable.inspector.ProjectInspectorResolver;
 import com.synopsys.integration.detectable.detectable.inspector.nuget.NugetInspectorResolver;
 import com.synopsys.integration.detectable.detectables.bazel.BazelDetectable;
-import com.synopsys.integration.detectable.detectables.bazel.BazelProjectNameGenerator;
 import com.synopsys.integration.detectable.detectables.bitbake.BitbakeDetectable;
 import com.synopsys.integration.detectable.detectables.cargo.CargoDetectable;
 import com.synopsys.integration.detectable.detectables.carthage.CarthageDetectable;
@@ -71,9 +70,16 @@
     private final PipInspectorResolver pipInspectorResolver;
     private final ProjectInspectorResolver projectInspectorResolver;
 
-    public DetectDetectableFactory(DetectableFactory detectableFactory, DetectableOptionFactory detectableOptionFactory, DetectExecutableResolver detectExecutableResolver,
-        DockerInspectorResolver dockerInspectorResolver, GradleInspectorResolver gradleInspectorResolver, NugetInspectorResolver nugetInspectorResolver,
-        PipInspectorResolver pipInspectorResolver, ProjectInspectorResolver projectInspectorResolver) {
+    public DetectDetectableFactory(
+        DetectableFactory detectableFactory,
+        DetectableOptionFactory detectableOptionFactory,
+        DetectExecutableResolver detectExecutableResolver,
+        DockerInspectorResolver dockerInspectorResolver,
+        GradleInspectorResolver gradleInspectorResolver,
+        NugetInspectorResolver nugetInspectorResolver,
+        PipInspectorResolver pipInspectorResolver,
+        ProjectInspectorResolver projectInspectorResolver
+    ) {
         this.detectableFactory = detectableFactory;
         this.detectableOptionFactory = detectableOptionFactory;
         this.detectExecutableResolver = detectExecutableResolver;
@@ -261,7 +267,8 @@ public YarnLockDetectable createYarnLockDetectable(DetectableEnvironment environ
     }
 
     public LernaDetectable createLernaDetectable(DetectableEnvironment environment) {
-        return detectableFactory.createLernaDetectable(environment,
+        return detectableFactory.createLernaDetectable(
+            environment,
             detectExecutableResolver,
             detectableOptionFactory.createNpmLockfileOptions(),
             detectableOptionFactory.createLernaOptions(),
diff --git a/src/main/java/com/synopsys/integration/detect/tool/detector/inspectors/ArtifactoryDockerInspectorResolver.java b/src/main/java/com/synopsys/integration/detect/tool/detector/inspectors/ArtifactoryDockerInspectorResolver.java
index ba53939805..f968abfa8e 100644
--- a/src/main/java/com/synopsys/integration/detect/tool/detector/inspectors/ArtifactoryDockerInspectorResolver.java
+++ b/src/main/java/com/synopsys/integration/detect/tool/detector/inspectors/ArtifactoryDockerInspectorResolver.java
@@ -43,8 +43,15 @@
 
     private DockerInspectorInfo resolvedInfo;
 
-    public ArtifactoryDockerInspectorResolver(DirectoryManager directoryManager, AirGapInspectorPaths airGapInspectorPaths, FileFinder fileFinder, DockerInspectorInstaller dockerInspectorInstaller,
-        DockerDetectableOptions dockerDetectableOptions, InstalledToolManager installedToolManager, InstalledToolLocator installedToolLocator) {
+    public ArtifactoryDockerInspectorResolver(
+        DirectoryManager directoryManager,
+        AirGapInspectorPaths airGapInspectorPaths,
+        FileFinder fileFinder,
+        DockerInspectorInstaller dockerInspectorInstaller,
+        DockerDetectableOptions dockerDetectableOptions,
+        InstalledToolManager installedToolManager,
+        InstalledToolLocator installedToolLocator
+    ) {
         this.directoryManager = directoryManager;
         this.airGapInspectorPaths = airGapInspectorPaths;
         this.fileFinder = fileFinder;
diff --git a/src/main/java/com/synopsys/integration/detect/tool/detector/inspectors/ArtifactoryGradleInspectorResolver.java b/src/main/java/com/synopsys/integration/detect/tool/detector/inspectors/ArtifactoryGradleInspectorResolver.java
index e88d7f84c0..ce10b17200 100644
--- a/src/main/java/com/synopsys/integration/detect/tool/detector/inspectors/ArtifactoryGradleInspectorResolver.java
+++ b/src/main/java/com/synopsys/integration/detect/tool/detector/inspectors/ArtifactoryGradleInspectorResolver.java
@@ -29,9 +29,12 @@
     private File generatedGradleScriptPath = null;
     private boolean hasResolvedInspector = false;
 
-    public ArtifactoryGradleInspectorResolver(Configuration configuration, GradleInspectorScriptOptions gradleInspectorScriptOptions,
+    public ArtifactoryGradleInspectorResolver(
+        Configuration configuration,
+        GradleInspectorScriptOptions gradleInspectorScriptOptions,
         AirGapInspectorPaths airGapInspectorPaths,
-        DirectoryManager directoryManager) {
+        DirectoryManager directoryManager
+    ) {
         this.configuration = configuration;
         this.gradleInspectorScriptOptions = gradleInspectorScriptOptions;
         this.airGapInspectorPaths = airGapInspectorPaths;
diff --git a/src/main/java/com/synopsys/integration/detect/tool/detector/inspectors/DockerInspectorInstaller.java b/src/main/java/com/synopsys/integration/detect/tool/detector/inspectors/DockerInspectorInstaller.java
index 4a400925c2..7bebbe48f3 100644
--- a/src/main/java/com/synopsys/integration/detect/tool/detector/inspectors/DockerInspectorInstaller.java
+++ b/src/main/java/com/synopsys/integration/detect/tool/detector/inspectors/DockerInspectorInstaller.java
@@ -23,7 +23,8 @@ public DockerInspectorInstaller(ArtifactResolver artifactResolver) {
     public File installJar(File dockerDirectory, Optional<String> dockerVersion) throws IntegrationException, IOException, DetectUserFriendlyException {
         logger.info("Determining the location of the Docker inspector.");
         String location = artifactResolver.resolveArtifactLocation(ArtifactoryConstants.ARTIFACTORY_URL, ArtifactoryConstants.DOCKER_INSPECTOR_REPO, ArtifactoryConstants.DOCKER_INSPECTOR_PROPERTY, dockerVersion.orElse(""),
-            ArtifactoryConstants.DOCKER_INSPECTOR_VERSION_OVERRIDE);
+            ArtifactoryConstants.DOCKER_INSPECTOR_VERSION_OVERRIDE
+        );
         return download(location, dockerDirectory);
     }
 
diff --git a/src/main/java/com/synopsys/integration/detect/tool/detector/inspectors/nuget/LocatorNugetInspectorResolver.java b/src/main/java/com/synopsys/integration/detect/tool/detector/inspectors/nuget/LocatorNugetInspectorResolver.java
index 81e50d80af..84b3560d60 100644
--- a/src/main/java/com/synopsys/integration/detect/tool/detector/inspectors/nuget/LocatorNugetInspectorResolver.java
+++ b/src/main/java/com/synopsys/integration/detect/tool/detector/inspectors/nuget/LocatorNugetInspectorResolver.java
@@ -37,9 +37,15 @@
     private boolean hasResolvedInspector;
     private NugetInspector resolvedNugetInspector;
 
-    public LocatorNugetInspectorResolver(DetectExecutableResolver executableResolver, DetectableExecutableRunner executableRunner, DetectInfo detectInfo,
-        FileFinder fileFinder, List<String> packagesRepoUrl, NugetInspectorLocator nugetInspectorLocator,
-        DotNetRuntimeManager dotNetRuntimeManager) {
+    public LocatorNugetInspectorResolver(
+        DetectExecutableResolver executableResolver,
+        DetectableExecutableRunner executableRunner,
+        DetectInfo detectInfo,
+        FileFinder fileFinder,
+        List<String> packagesRepoUrl,
+        NugetInspectorLocator nugetInspectorLocator,
+        DotNetRuntimeManager dotNetRuntimeManager
+    ) {
         this.executableResolver = executableResolver;
         this.executableRunner = executableRunner;
         this.detectInfo = detectInfo;
@@ -117,7 +123,7 @@ private NugetInspector findInspector(File nupkgFolder, String inspectorName, Fun
             .stream()
             .findFirst()
             .filter(File::exists)
-            .orElseThrow(() -> new DetectableException(String.format("Unable to find nuget inspector, looking for %s in %s", inspectorName, toolsFolder.toString())));
+            .orElseThrow(() -> new DetectableException(String.format("Unable to find nuget inspector, looking for %s in %s", inspectorName, toolsFolder)));
         String inspectorExecutable = foundExecutable.getAbsolutePath();
         logger.debug("Found nuget inspector: {}", inspectorExecutable);
         return inspectorInitializer.apply(inspectorExecutable);
diff --git a/src/main/java/com/synopsys/integration/detect/tool/detector/inspectors/nuget/OnlineNugetInspectorLocator.java b/src/main/java/com/synopsys/integration/detect/tool/detector/inspectors/nuget/OnlineNugetInspectorLocator.java
index a9a1ee777e..40437ba986 100644
--- a/src/main/java/com/synopsys/integration/detect/tool/detector/inspectors/nuget/OnlineNugetInspectorLocator.java
+++ b/src/main/java/com/synopsys/integration/detect/tool/detector/inspectors/nuget/OnlineNugetInspectorLocator.java
@@ -27,8 +27,13 @@
     private final InstalledToolManager installedToolManager;
     private final InstalledToolLocator installedToolLocator;
 
-    public OnlineNugetInspectorLocator(NugetInspectorInstaller nugetInspectorInstaller, DirectoryManager directoryManager, @Nullable String overrideVersion,
-        InstalledToolManager installedToolManager, InstalledToolLocator installedToolLocator) {
+    public OnlineNugetInspectorLocator(
+        NugetInspectorInstaller nugetInspectorInstaller,
+        DirectoryManager directoryManager,
+        @Nullable String overrideVersion,
+        InstalledToolManager installedToolManager,
+        InstalledToolLocator installedToolLocator
+    ) {
         this.nugetInspectorInstaller = nugetInspectorInstaller;
         this.directoryManager = directoryManager;
         this.overrideVersion = overrideVersion;
diff --git a/src/main/java/com/synopsys/integration/detect/tool/detector/inspectors/projectinspector/ArtifactoryProjectInspectorInstaller.java b/src/main/java/com/synopsys/integration/detect/tool/detector/inspectors/projectinspector/ArtifactoryProjectInspectorInstaller.java
index 84293a7264..d34df38657 100644
--- a/src/main/java/com/synopsys/integration/detect/tool/detector/inspectors/projectinspector/ArtifactoryProjectInspectorInstaller.java
+++ b/src/main/java/com/synopsys/integration/detect/tool/detector/inspectors/projectinspector/ArtifactoryProjectInspectorInstaller.java
@@ -18,8 +18,10 @@
     private final ArtifactoryZipInstaller artifactoryZipInstaller;
     private final ProjectInspectorExecutableLocator projectInspectorExecutableLocator;
 
-    public ArtifactoryProjectInspectorInstaller(DetectInfo detectInfo,
-        ArtifactoryZipInstaller artifactoryZipInstaller, ProjectInspectorExecutableLocator projectInspectorExecutableLocator) {
+    public ArtifactoryProjectInspectorInstaller(
+        DetectInfo detectInfo,
+        ArtifactoryZipInstaller artifactoryZipInstaller, ProjectInspectorExecutableLocator projectInspectorExecutableLocator
+    ) {
         this.detectInfo = detectInfo;
         this.artifactoryZipInstaller = artifactoryZipInstaller;
         this.projectInspectorExecutableLocator = projectInspectorExecutableLocator;
diff --git a/src/main/java/com/synopsys/integration/detect/tool/detector/inspectors/projectinspector/ProjectInspectorExecutableLocator.java b/src/main/java/com/synopsys/integration/detect/tool/detector/inspectors/projectinspector/ProjectInspectorExecutableLocator.java
index 2006caa029..c8dd8baa73 100644
--- a/src/main/java/com/synopsys/integration/detect/tool/detector/inspectors/projectinspector/ProjectInspectorExecutableLocator.java
+++ b/src/main/java/com/synopsys/integration/detect/tool/detector/inspectors/projectinspector/ProjectInspectorExecutableLocator.java
@@ -41,15 +41,15 @@ public File findExecutable(File extractedZip, String executableName) throws Dete
         File bin = new File(extractedZip, "bin");
         File executable = new File(bin, executableName);
         if (executable.exists()) {
-            logger.debug("Found it: " + executable.toString());
+            logger.debug("Found it: " + executable);
             if (!executable.canExecute()) {
                 if (!executable.setExecutable(true)) {
-                    throw new DetectableException("Unable to set project inspector to executable: " + executable.toString());
+                    throw new DetectableException("Unable to set project inspector to executable: " + executable);
                 }
             }
             return executable;
         } else {
-            logger.debug("Could not find executable: " + executable.toString());
+            logger.debug("Could not find executable: " + executable);
             return null;
         }
     }
diff --git a/src/main/java/com/synopsys/integration/detect/tool/impactanalysis/service/ImpactAnalysisCallable.java b/src/main/java/com/synopsys/integration/detect/tool/impactanalysis/service/ImpactAnalysisCallable.java
index 7bdfcf33aa..d40b7c3de8 100644
--- a/src/main/java/com/synopsys/integration/detect/tool/impactanalysis/service/ImpactAnalysisCallable.java
+++ b/src/main/java/com/synopsys/integration/detect/tool/impactanalysis/service/ImpactAnalysisCallable.java
@@ -42,10 +42,22 @@ public ImpactAnalysisOutput call() {
                 return ImpactAnalysisOutput.FROM_RESPONSE(gson, projectAndVersion, codeLocationName, response);
             }
         } catch (BlackDuckApiException apiException) {
-            String errorMessage = String.format("Failed to upload impact analysis file: %s; Black Duck response: %s [Black Duck error code: %s]", impactAnalysis.getImpactAnalysisPath().toAbsolutePath(), apiException.getMessage(),
-                apiException.getBlackDuckErrorCode());
-            return ImpactAnalysisOutput.FAILURE(projectAndVersion, codeLocationName, errorMessage, apiException, apiException.getBlackDuckErrorCode(), apiException.getMessage(),
-                apiException.getOriginalIntegrationRestException().getHttpStatusCode(), apiException.getOriginalIntegrationRestException().getHttpResponseContent());
+            String errorMessage = String.format(
+                "Failed to upload impact analysis file: %s; Black Duck response: %s [Black Duck error code: %s]",
+                impactAnalysis.getImpactAnalysisPath().toAbsolutePath(),
+                apiException.getMessage(),
+                apiException.getBlackDuckErrorCode()
+            );
+            return ImpactAnalysisOutput.FAILURE(
+                projectAndVersion,
+                codeLocationName,
+                errorMessage,
+                apiException,
+                apiException.getBlackDuckErrorCode(),
+                apiException.getMessage(),
+                apiException.getOriginalIntegrationRestException().getHttpStatusCode(),
+                apiException.getOriginalIntegrationRestException().getHttpResponseContent()
+            );
         } catch (Exception e) {
             String errorMessage = String.format("Failed to upload impact analysis file: %s because %s", impactAnalysis.getImpactAnalysisPath().toAbsolutePath(), e.getMessage());
             return ImpactAnalysisOutput.FAILURE(projectAndVersion, codeLocationName, errorMessage, e, null, null, 0, null);
diff --git a/src/main/java/com/synopsys/integration/detect/tool/impactanalysis/service/ImpactAnalysisOutput.java b/src/main/java/com/synopsys/integration/detect/tool/impactanalysis/service/ImpactAnalysisOutput.java
index 124e0df56c..1a21add0c9 100644
--- a/src/main/java/com/synopsys/integration/detect/tool/impactanalysis/service/ImpactAnalysisOutput.java
+++ b/src/main/java/com/synopsys/integration/detect/tool/impactanalysis/service/ImpactAnalysisOutput.java
@@ -49,8 +49,18 @@ public static ImpactAnalysisOutput FROM_RESPONSE(Gson gson, NameVersion projectA
         return new ImpactAnalysisOutput(result, projectAndVersion, codeLocationName, errorMessage, contentStringException, responseString, statusMessage, statusCode, contentString, impactAnalysisUploadView);
     }
 
-    private ImpactAnalysisOutput(Result result, NameVersion projectAndVersion, String codeLocationName, String errorMessage, Exception exception, String response, String statusMessage, int statusCode, String contentString,
-        ImpactAnalysisUploadView impactAnalysisUploadView) {
+    private ImpactAnalysisOutput(
+        Result result,
+        NameVersion projectAndVersion,
+        String codeLocationName,
+        String errorMessage,
+        Exception exception,
+        String response,
+        String statusMessage,
+        int statusCode,
+        String contentString,
+        ImpactAnalysisUploadView impactAnalysisUploadView
+    ) {
         super(result, projectAndVersion, codeLocationName, 1, errorMessage, exception);
         this.response = response;
         this.statusMessage = statusMessage;
diff --git a/src/main/java/com/synopsys/integration/detect/tool/impactanalysis/service/ImpactAnalysisUploadService.java b/src/main/java/com/synopsys/integration/detect/tool/impactanalysis/service/ImpactAnalysisUploadService.java
index 89ba135f15..c5e1d52e04 100644
--- a/src/main/java/com/synopsys/integration/detect/tool/impactanalysis/service/ImpactAnalysisUploadService.java
+++ b/src/main/java/com/synopsys/integration/detect/tool/impactanalysis/service/ImpactAnalysisUploadService.java
@@ -20,9 +20,13 @@
 
     // TODO: Move to BlackDuckServicesFactory in blackduck-common
     public static ImpactAnalysisUploadService create(BlackDuckServicesFactory blackDuckServicesFactory) {
-        ImpactAnalysisBatchRunner impactAnalysisBatchRunner = new ImpactAnalysisBatchRunner(blackDuckServicesFactory.getLogger(), blackDuckServicesFactory.getBlackDuckApiClient(), blackDuckServicesFactory.getApiDiscovery(),
+        ImpactAnalysisBatchRunner impactAnalysisBatchRunner = new ImpactAnalysisBatchRunner(
+            blackDuckServicesFactory.getLogger(),
+            blackDuckServicesFactory.getBlackDuckApiClient(),
+            blackDuckServicesFactory.getApiDiscovery(),
             new NoThreadExecutorService(),
-            blackDuckServicesFactory.getGson());
+            blackDuckServicesFactory.getGson()
+        );
         return new ImpactAnalysisUploadService(impactAnalysisBatchRunner, blackDuckServicesFactory.createCodeLocationCreationService());
     }
 
diff --git a/src/main/java/com/synopsys/integration/detect/tool/signaturescanner/BlackDuckSignatureScannerOptions.java b/src/main/java/com/synopsys/integration/detect/tool/signaturescanner/BlackDuckSignatureScannerOptions.java
index 87d967bc63..0f3f771784 100644
--- a/src/main/java/com/synopsys/integration/detect/tool/signaturescanner/BlackDuckSignatureScannerOptions.java
+++ b/src/main/java/com/synopsys/integration/detect/tool/signaturescanner/BlackDuckSignatureScannerOptions.java
@@ -52,7 +52,8 @@ public BlackDuckSignatureScannerOptions(
         @Nullable IndividualFileMatching individualFileMatching,
         Boolean licenseSearch,
         Boolean copyrightSearch,
-        Boolean followSymLinks) {
+        Boolean followSymLinks
+    ) {
 
         this.signatureScannerPaths = signatureScannerPaths;
         this.exclusionPatterns = exclusionPatterns;
diff --git a/src/main/java/com/synopsys/integration/detect/tool/signaturescanner/operation/CreateScanBatchOperation.java b/src/main/java/com/synopsys/integration/detect/tool/signaturescanner/operation/CreateScanBatchOperation.java
index 66dc22209f..eff4f2c665 100644
--- a/src/main/java/com/synopsys/integration/detect/tool/signaturescanner/operation/CreateScanBatchOperation.java
+++ b/src/main/java/com/synopsys/integration/detect/tool/signaturescanner/operation/CreateScanBatchOperation.java
@@ -23,8 +23,7 @@
     private final DirectoryManager directoryManager;
     private final CodeLocationNameManager codeLocationNameManager;
 
-    public CreateScanBatchOperation(BlackDuckSignatureScannerOptions signatureScannerOptions, DirectoryManager directoryManager,
-        CodeLocationNameManager codeLocationNameManager) {
+    public CreateScanBatchOperation(BlackDuckSignatureScannerOptions signatureScannerOptions, DirectoryManager directoryManager, CodeLocationNameManager codeLocationNameManager) {
         this.signatureScannerOptions = signatureScannerOptions;
         this.directoryManager = directoryManager;
         this.codeLocationNameManager = codeLocationNameManager;
diff --git a/src/main/java/com/synopsys/integration/detect/tool/signaturescanner/operation/CreateScanBatchRunnerWithLocalInstall.java b/src/main/java/com/synopsys/integration/detect/tool/signaturescanner/operation/CreateScanBatchRunnerWithLocalInstall.java
index 101d3c09ee..ec86b6bd40 100644
--- a/src/main/java/com/synopsys/integration/detect/tool/signaturescanner/operation/CreateScanBatchRunnerWithLocalInstall.java
+++ b/src/main/java/com/synopsys/integration/detect/tool/signaturescanner/operation/CreateScanBatchRunnerWithLocalInstall.java
@@ -12,8 +12,7 @@
     private final ScanPathsUtility scanPathsUtility;
     private final ScanCommandRunner scanCommandRunner;
 
-    public CreateScanBatchRunnerWithLocalInstall(IntEnvironmentVariables intEnvironmentVariables, ScanPathsUtility scanPathsUtility,
-        ScanCommandRunner scanCommandRunner) {
+    public CreateScanBatchRunnerWithLocalInstall(IntEnvironmentVariables intEnvironmentVariables, ScanPathsUtility scanPathsUtility, ScanCommandRunner scanCommandRunner) {
         this.intEnvironmentVariables = intEnvironmentVariables;
         this.scanPathsUtility = scanPathsUtility;
         this.scanCommandRunner = scanCommandRunner;
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/airgap/AirGapCreator.java b/src/main/java/com/synopsys/integration/detect/workflow/airgap/AirGapCreator.java
index 7cf61e54d1..8e1478c4ae 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/airgap/AirGapCreator.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/airgap/AirGapCreator.java
@@ -27,8 +27,15 @@
     private final DetectFontAirGapCreator detectFontAirGapCreator;
     private final ProjectInspectorAirGapCreator projectInspectorAirGapCreator;
 
-    public AirGapCreator(AirGapPathFinder airGapPathFinder, EventSystem eventSystem, GradleAirGapCreator gradleAirGapCreator, NugetAirGapCreator nugetAirGapCreator, DockerAirGapCreator dockerAirGapCreator,
-        DetectFontAirGapCreator detectFontAirGapCreator, ProjectInspectorAirGapCreator projectInspectorAirGapCreator) {
+    public AirGapCreator(
+        AirGapPathFinder airGapPathFinder,
+        EventSystem eventSystem,
+        GradleAirGapCreator gradleAirGapCreator,
+        NugetAirGapCreator nugetAirGapCreator,
+        DockerAirGapCreator dockerAirGapCreator,
+        DetectFontAirGapCreator detectFontAirGapCreator,
+        ProjectInspectorAirGapCreator projectInspectorAirGapCreator
+    ) {
         this.airGapPathFinder = airGapPathFinder;
         this.eventSystem = eventSystem;
         this.gradleAirGapCreator = gradleAirGapCreator;
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/airgap/AirGapPathFinder.java b/src/main/java/com/synopsys/integration/detect/workflow/airgap/AirGapPathFinder.java
index 8e6a09a614..c3ea8e9d7d 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/airgap/AirGapPathFinder.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/airgap/AirGapPathFinder.java
@@ -21,7 +21,7 @@ public File findDetectJar() {
                 return null;
             } else {
                 File jarFile = new File(relativeJarFile).getCanonicalFile();
-                logger.debug("Checking for jar file: " + jarFile.toString());
+                logger.debug("Checking for jar file: " + jarFile);
                 if (jarFile.exists()) {
                     logger.debug("Found detect jar file.");
                     return jarFile;
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/airgap/AirGapTypeDecider.java b/src/main/java/com/synopsys/integration/detect/workflow/airgap/AirGapTypeDecider.java
index c4592db0c0..babddf2977 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/airgap/AirGapTypeDecider.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/airgap/AirGapTypeDecider.java
@@ -5,7 +5,7 @@
 public class AirGapTypeDecider {
     public AirGapType decide(DetectArgumentState detectArgumentState) {
         AirGapType airGapType = AirGapType.FULL;
-        if (detectArgumentState.getParsedValue() != null && detectArgumentState.getParsedValue().toLowerCase().equals("no_docker")) {
+        if (detectArgumentState.getParsedValue() != null && detectArgumentState.getParsedValue().equalsIgnoreCase("no_docker")) {
             airGapType = AirGapType.NO_DOCKER;
         }
         return airGapType;
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/airgap/DetectFontAirGapCreator.java b/src/main/java/com/synopsys/integration/detect/workflow/airgap/DetectFontAirGapCreator.java
index e5fb6bcf66..c72cecf7dc 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/airgap/DetectFontAirGapCreator.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/airgap/DetectFontAirGapCreator.java
@@ -5,7 +5,7 @@
 import com.synopsys.integration.detect.workflow.blackduck.font.DetectFontInstaller;
 
 public class DetectFontAirGapCreator {
-    private DetectFontInstaller detectFontInstaller;
+    private final DetectFontInstaller detectFontInstaller;
 
     public DetectFontAirGapCreator(DetectFontInstaller detectFontInstaller) {
         this.detectFontInstaller = detectFontInstaller;
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/bdio/AggregateDecision.java b/src/main/java/com/synopsys/integration/detect/workflow/bdio/AggregateDecision.java
index 956532b109..3415308ffe 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/bdio/AggregateDecision.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/bdio/AggregateDecision.java
@@ -9,9 +9,9 @@
 public class AggregateDecision {
 
     @Nullable
-    private String aggregateName;
-    private AggregateMode aggregateMode;
-    private boolean uploadEmptyAggregate;
+    private final String aggregateName;
+    private final AggregateMode aggregateMode;
+    private final boolean uploadEmptyAggregate;
 
     public AggregateDecision(@Nullable String aggregateName, AggregateMode aggregateMode, boolean uploadEmptyAggregate) {
         this.aggregateName = aggregateName;
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/bdio/CreateAggregateBdio1FileOperation.java b/src/main/java/com/synopsys/integration/detect/workflow/bdio/CreateAggregateBdio1FileOperation.java
index 1d4a91fd45..54ae5f8fe9 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/bdio/CreateAggregateBdio1FileOperation.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/bdio/CreateAggregateBdio1FileOperation.java
@@ -15,8 +15,13 @@ public CreateAggregateBdio1FileOperation(SimpleBdioFactory simpleBdioFactory, De
     }
 
     public void writeAggregateBdio1File(AggregateCodeLocation aggregateCodeLocation) throws DetectUserFriendlyException {
-        SimpleBdioDocument aggregateBdioDocument = simpleBdioFactory.createSimpleBdioDocument(aggregateCodeLocation.getCodeLocationName(), aggregateCodeLocation.getProjectNameVersion().getName(),
-            aggregateCodeLocation.getProjectNameVersion().getVersion(), aggregateCodeLocation.getProjectExternalId(), aggregateCodeLocation.getAggregateDependencyGraph());
+        SimpleBdioDocument aggregateBdioDocument = simpleBdioFactory.createSimpleBdioDocument(
+            aggregateCodeLocation.getCodeLocationName(),
+            aggregateCodeLocation.getProjectNameVersion().getName(),
+            aggregateCodeLocation.getProjectNameVersion().getVersion(),
+            aggregateCodeLocation.getProjectExternalId(),
+            aggregateCodeLocation.getAggregateDependencyGraph()
+        );
         detectBdioWriter.writeBdioFile(aggregateCodeLocation.getAggregateFile(), aggregateBdioDocument);
     }
 }
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/BlackDuckPostOptions.java b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/BlackDuckPostOptions.java
index 0292cf108b..f6a855fba6 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/BlackDuckPostOptions.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/BlackDuckPostOptions.java
@@ -17,8 +17,14 @@
     private final @Nullable Path noticesReportPath;
     private final List<PolicyRuleSeverityType> severitiesToFailPolicyCheck;
 
-    public BlackDuckPostOptions(boolean waitForResults, boolean generateRiskReport, boolean generateNoticesReport, @Nullable Path riskReportPdfPath, @Nullable Path noticesReportPath,
-        List<PolicyRuleSeverityType> severitiesToFailPolicyCheck) {
+    public BlackDuckPostOptions(
+        boolean waitForResults,
+        boolean generateRiskReport,
+        boolean generateNoticesReport,
+        @Nullable Path riskReportPdfPath,
+        @Nullable Path noticesReportPath,
+        List<PolicyRuleSeverityType> severitiesToFailPolicyCheck
+    ) {
         this.waitForResults = waitForResults;
         this.generateRiskReport = generateRiskReport;
         this.generateNoticesReport = generateNoticesReport;
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/DetectFontLoader.java b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/DetectFontLoader.java
index 805c1e6eb7..ecaf4c79b6 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/DetectFontLoader.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/DetectFontLoader.java
@@ -14,7 +14,7 @@
 
 public class DetectFontLoader {
     private final Logger logger = LoggerFactory.getLogger(this.getClass());
-    private DetectFontLocator detectFontLocator;
+    private final DetectFontLocator detectFontLocator;
 
     public DetectFontLoader(DetectFontLocator detectFontLocator) {
         this.detectFontLocator = detectFontLocator;
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/bdio/IntelligentPersistentUploadOperation.java b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/bdio/IntelligentPersistentUploadOperation.java
index 3719e3975a..9a4ef19b7c 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/bdio/IntelligentPersistentUploadOperation.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/bdio/IntelligentPersistentUploadOperation.java
@@ -7,7 +7,7 @@
 import com.synopsys.integration.exception.IntegrationException;
 
 public class IntelligentPersistentUploadOperation extends BdioUploadOperation {
-    private IntelligentPersistenceService intelligentPersistenceService;
+    private final IntelligentPersistenceService intelligentPersistenceService;
 
     public IntelligentPersistentUploadOperation(IntelligentPersistenceService intelligentPersistenceService) {
         this.intelligentPersistenceService = intelligentPersistenceService;
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/bdio/LegacyBdio1UploadOperation.java b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/bdio/LegacyBdio1UploadOperation.java
index 2c9d2dc312..24055db07c 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/bdio/LegacyBdio1UploadOperation.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/bdio/LegacyBdio1UploadOperation.java
@@ -7,7 +7,7 @@
 import com.synopsys.integration.exception.IntegrationException;
 
 public class LegacyBdio1UploadOperation extends BdioUploadOperation {
-    private BdioUploadService bdioUploadService;
+    private final BdioUploadService bdioUploadService;
 
     public LegacyBdio1UploadOperation(BdioUploadService bdioUploadService) {
         this.bdioUploadService = bdioUploadService;
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/bdio/LegacyBdio2UploadOperation.java b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/bdio/LegacyBdio2UploadOperation.java
index 3306b013ea..40e5e6fb1d 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/bdio/LegacyBdio2UploadOperation.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/bdio/LegacyBdio2UploadOperation.java
@@ -7,7 +7,7 @@
 import com.synopsys.integration.exception.IntegrationException;
 
 public class LegacyBdio2UploadOperation extends BdioUploadOperation {
-    private Bdio2UploadService bdioUploadService;
+    private final Bdio2UploadService bdioUploadService;
 
     public LegacyBdio2UploadOperation(Bdio2UploadService bdioUploadService) {
         this.bdioUploadService = bdioUploadService;
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/codelocation/CodeLocationWaitData.java b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/codelocation/CodeLocationWaitData.java
index 7103025e13..ce497ef8a6 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/codelocation/CodeLocationWaitData.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/codelocation/CodeLocationWaitData.java
@@ -10,7 +10,7 @@
     @Nullable
     private final NotificationTaskRange notificationRange;
     private final Set<String> codeLocationNames;
-    private int expectedNotificationCount;
+    private final int expectedNotificationCount;
 
     public CodeLocationWaitData(@Nullable NotificationTaskRange notificationRange, Set<String> codeLocationNames, int expectedNotificationCount) {
         this.notificationRange = notificationRange;
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/developer/RapidModeConfigFindOperation.java b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/developer/RapidModeConfigFindOperation.java
index 506ae5f2d0..5ed5859b23 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/developer/RapidModeConfigFindOperation.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/developer/RapidModeConfigFindOperation.java
@@ -6,7 +6,7 @@
 import com.synopsys.integration.common.util.finder.FileFinder;
 
 public class RapidModeConfigFindOperation {
-    private static String CONFIG_FILE_NAME = ".bd-rapid-scan.yaml";
+    private static final String CONFIG_FILE_NAME = ".bd-rapid-scan.yaml";
     private final FileFinder fileFinder;
 
     public RapidModeConfigFindOperation(FileFinder fileFinder) {
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/developer/RapidScanResult.java b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/developer/RapidScanResult.java
index 18262c59e7..5db1ccde68 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/developer/RapidScanResult.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/developer/RapidScanResult.java
@@ -7,8 +7,8 @@
 import com.synopsys.integration.rest.HttpUrl;
 
 public class RapidScanResult {
-    private List<HttpUrl> scanIds;
-    private List<DeveloperScanComponentResultView> componentResultViews;
+    private final List<HttpUrl> scanIds;
+    private final List<DeveloperScanComponentResultView> componentResultViews;
 
     public RapidScanResult(List<HttpUrl> scanIds, List<DeveloperScanComponentResultView> componentResultViews) {
         this.scanIds = scanIds;
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/developer/aggregate/RapidScanAggregateResult.java b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/developer/aggregate/RapidScanAggregateResult.java
index 607d70a02a..711981ca99 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/developer/aggregate/RapidScanAggregateResult.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/developer/aggregate/RapidScanAggregateResult.java
@@ -8,8 +8,7 @@
     private final RapidScanComponentGroupDetail securityDetails;
     private final RapidScanComponentGroupDetail licenseDetails;
 
-    public RapidScanAggregateResult(RapidScanResultSummary summary, RapidScanComponentGroupDetail componentDetails, RapidScanComponentGroupDetail securityDetails,
-        RapidScanComponentGroupDetail licenseDetails) {
+    public RapidScanAggregateResult(RapidScanResultSummary summary, RapidScanComponentGroupDetail componentDetails, RapidScanComponentGroupDetail securityDetails, RapidScanComponentGroupDetail licenseDetails) {
         this.summary = summary;
         this.componentDetails = componentDetails;
         this.securityDetails = securityDetails;
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/developer/aggregate/RapidScanComponentDetail.java b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/developer/aggregate/RapidScanComponentDetail.java
index 1b906b39cd..0a7765b823 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/developer/aggregate/RapidScanComponentDetail.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/developer/aggregate/RapidScanComponentDetail.java
@@ -8,8 +8,14 @@
     private final RapidScanComponentGroupDetail securityDetails;
     private final RapidScanComponentGroupDetail licenseDetails;
 
-    public RapidScanComponentDetail(String component, String version, String componentIdentifier, RapidScanComponentGroupDetail componentDetails,
-        RapidScanComponentGroupDetail securityDetails, RapidScanComponentGroupDetail licenseDetails) {
+    public RapidScanComponentDetail(
+        String component,
+        String version,
+        String componentIdentifier,
+        RapidScanComponentGroupDetail componentDetails,
+        RapidScanComponentGroupDetail securityDetails,
+        RapidScanComponentGroupDetail licenseDetails
+    ) {
         this.component = component;
         this.version = version;
         this.componentIdentifier = componentIdentifier;
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/developer/aggregate/RapidScanComponentGroupDetail.java b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/developer/aggregate/RapidScanComponentGroupDetail.java
index d9188ff275..cde088b748 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/developer/aggregate/RapidScanComponentGroupDetail.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/developer/aggregate/RapidScanComponentGroupDetail.java
@@ -7,10 +7,10 @@
 import org.apache.commons.lang3.StringUtils;
 
 public class RapidScanComponentGroupDetail {
-    private RapidScanDetailGroup group;
-    private Set<String> errorMessages = new LinkedHashSet<>();
-    private Set<String> warningMessages = new LinkedHashSet<>();
-    private Set<String> policyNames = new LinkedHashSet<>();
+    private final RapidScanDetailGroup group;
+    private final Set<String> errorMessages = new LinkedHashSet<>();
+    private final Set<String> warningMessages = new LinkedHashSet<>();
+    private final Set<String> policyNames = new LinkedHashSet<>();
 
     public RapidScanComponentGroupDetail(RapidScanDetailGroup group) {
         this.group = group;
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/developer/aggregate/RapidScanDetailGroup.java b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/developer/aggregate/RapidScanDetailGroup.java
index ef8732de9a..deab0c5be0 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/developer/aggregate/RapidScanDetailGroup.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/developer/aggregate/RapidScanDetailGroup.java
@@ -5,7 +5,7 @@
     POLICY("Components"),
     SECURITY("Security");
 
-    private String displayName;
+    private final String displayName;
 
     RapidScanDetailGroup(String displayName) {
         this.displayName = displayName;
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/developer/aggregate/RapidScanResultSummary.java b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/developer/aggregate/RapidScanResultSummary.java
index 1d33379b6c..6d916b0a03 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/developer/aggregate/RapidScanResultSummary.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/developer/aggregate/RapidScanResultSummary.java
@@ -15,8 +15,17 @@
     private final Set<String> componentsViolatingPolicy;
     private final Set<String> componentsViolatingPolicyWarnings;
 
-    private RapidScanResultSummary(int policyErrorCount, int policyWarningCount, int securityErrorCount, int securityWarningCount, int licenseErrorCount, int licenseWarningCount,
-        Set<String> policyViolationNames, Set<String> componentsViolatingPolicy, Set<String> componentsViolatingPolicyWarnings) {
+    private RapidScanResultSummary(
+        int policyErrorCount,
+        int policyWarningCount,
+        int securityErrorCount,
+        int securityWarningCount,
+        int licenseErrorCount,
+        int licenseWarningCount,
+        Set<String> policyViolationNames,
+        Set<String> componentsViolatingPolicy,
+        Set<String> componentsViolatingPolicyWarnings
+    ) {
         this.policyErrorCount = policyErrorCount;
         this.policyWarningCount = policyWarningCount;
         this.securityErrorCount = securityErrorCount;
@@ -76,9 +85,9 @@ public int getLicenseWarningCount() {
         private int licenseErrors;
         private int licenseWarnings;
 
-        private Set<String> violatedPolicyNames;
-        private Set<String> componentsViolatingPolicy;
-        private Set<String> componentsViolatingPolicyWarnings;
+        private final Set<String> violatedPolicyNames;
+        private final Set<String> componentsViolatingPolicy;
+        private final Set<String> componentsViolatingPolicyWarnings;
 
         public Builder() {
             this.policyErrors = 0;
@@ -150,9 +159,17 @@ public void addDetailData(RapidScanComponentDetail detail) {
         }
 
         public RapidScanResultSummary build() {
-            return new RapidScanResultSummary(this.policyErrors, this.policyWarnings, this.securityErrors, this.securityWarnings,
-                this.licenseErrors, this.licenseWarnings, violatedPolicyNames, componentsViolatingPolicy,
-                componentsViolatingPolicyWarnings);
+            return new RapidScanResultSummary(
+                this.policyErrors,
+                this.policyWarnings,
+                this.securityErrors,
+                this.securityWarnings,
+                this.licenseErrors,
+                this.licenseWarnings,
+                violatedPolicyNames,
+                componentsViolatingPolicy,
+                componentsViolatingPolicyWarnings
+            );
         }
     }
 }
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/developer/blackduck/RapidScanUploadService.java b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/developer/blackduck/RapidScanUploadService.java
index 5fe7874db6..42f784d3f7 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/developer/blackduck/RapidScanUploadService.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/developer/blackduck/RapidScanUploadService.java
@@ -34,8 +34,13 @@
     private final Bdio2ContentExtractor bdio2Extractor;
     private final RapidScanConfigBdio2StreamUploader bdio2Uploader;
 
-    public RapidScanUploadService(BlackDuckApiClient blackDuckApiClient, ApiDiscovery apiDiscovery,
-        IntLogger logger, Bdio2ContentExtractor bdio2Extractor, RapidScanConfigBdio2StreamUploader bdio2Uploader) {
+    public RapidScanUploadService(
+        BlackDuckApiClient blackDuckApiClient,
+        ApiDiscovery apiDiscovery,
+        IntLogger logger,
+        Bdio2ContentExtractor bdio2Extractor,
+        RapidScanConfigBdio2StreamUploader bdio2Uploader
+    ) {
         super(blackDuckApiClient, apiDiscovery, logger);
         this.bdio2Extractor = bdio2Extractor;
         this.bdio2Uploader = bdio2Uploader;
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/policy/PolicyChecker.java b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/policy/PolicyChecker.java
index f18252486b..620a71d6aa 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/policy/PolicyChecker.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/policy/PolicyChecker.java
@@ -75,7 +75,8 @@ public void fetchAndLogPolicyViolations(ProjectVersionView projectVersionView) t
                 if (StringUtils.isNotBlank(projectVersionComponentView.getComponentVersion())) {
                     policyRuleComponentVersionSuffix = String.format(" (%s).", projectVersionComponentView.getComponentVersion());
                 }
-                logger.info(String.format("Policy rule \"%s\" was violated by component \"%s\"%s",
+                logger.info(String.format(
+                    "Policy rule \"%s\" was violated by component \"%s\"%s",
                     componentPolicyRulesView.getName(),
                     componentId,
                     policyRuleComponentVersionSuffix
@@ -86,7 +87,8 @@ public void fetchAndLogPolicyViolations(ProjectVersionView projectVersionView) t
                     policyRuleSuffix = String.format(" with description: %s", componentPolicyRulesView.getDescription());
                 }
 
-                logger.info(String.format("Policy rule \"%s\" has a severity type of %s%s",
+                logger.info(String.format(
+                    "Policy rule \"%s\" has a severity type of %s%s",
                     componentPolicyRulesView.getName(),
                     componentPolicyRulesView.getSeverity().prettyPrint(),
                     policyRuleSuffix
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/project/AddUserGroupsToProjectOperation.java b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/project/AddUserGroupsToProjectOperation.java
index 43e62d2f79..b4f4ee23bf 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/project/AddUserGroupsToProjectOperation.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/project/AddUserGroupsToProjectOperation.java
@@ -12,7 +12,7 @@
 
 public class AddUserGroupsToProjectOperation {
     private final Logger logger = LoggerFactory.getLogger(this.getClass());
-    private ProjectUsersService projectUsersService;
+    private final ProjectUsersService projectUsersService;
 
     public AddUserGroupsToProjectOperation(ProjectUsersService projectUsersService) {
         this.projectUsersService = projectUsersService;
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/project/MapToParentOperation.java b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/project/MapToParentOperation.java
index 87615213d2..2a0ac35add 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/project/MapToParentOperation.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/project/MapToParentOperation.java
@@ -23,8 +23,8 @@
 public class MapToParentOperation {
     private final Logger logger = LoggerFactory.getLogger(this.getClass());
     private final BlackDuckApiClient blackDuckService;
-    private ProjectService projectService;
-    private ProjectBomService projectBomService;
+    private final ProjectService projectService;
+    private final ProjectBomService projectBomService;
 
     public MapToParentOperation(BlackDuckApiClient blackDuckService, ProjectService projectService, ProjectBomService projectBomService) {
         this.blackDuckService = blackDuckService;
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/project/SyncProjectOperation.java b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/project/SyncProjectOperation.java
index 11147790f2..babcb08386 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/project/SyncProjectOperation.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/project/SyncProjectOperation.java
@@ -28,15 +28,25 @@ public SyncProjectOperation(ProjectService projectService) {
         this.projectService = projectService;
     }
 
-    public ProjectVersionWrapper sync(NameVersion projectNameVersion, ProjectGroupFindResult projectGroupFindResult, CloneFindResult cloneFindResult, ProjectVersionLicenseFindResult projectVersionLicensesFindResult,
-        ProjectSyncOptions projectSyncOptions) throws DetectUserFriendlyException, IntegrationException {
+    public ProjectVersionWrapper sync(
+        NameVersion projectNameVersion,
+        ProjectGroupFindResult projectGroupFindResult,
+        CloneFindResult cloneFindResult,
+        ProjectVersionLicenseFindResult projectVersionLicensesFindResult,
+        ProjectSyncOptions projectSyncOptions
+    ) throws DetectUserFriendlyException, IntegrationException {
         ProjectSyncModel projectSyncModel = createProjectSyncModel(projectNameVersion, projectGroupFindResult, cloneFindResult, projectVersionLicensesFindResult, projectSyncOptions);
         boolean forceUpdate = projectSyncOptions.isForceProjectVersionUpdate();
         return projectService.syncProjectAndVersion(projectSyncModel, forceUpdate);
     }
 
-    public ProjectSyncModel createProjectSyncModel(NameVersion projectNameVersion, ProjectGroupFindResult projectGroupFindResult, CloneFindResult cloneFindResult, ProjectVersionLicenseFindResult projectVersionLicensesFindResult,
-        ProjectSyncOptions projectSyncOptions) {
+    public ProjectSyncModel createProjectSyncModel(
+        NameVersion projectNameVersion,
+        ProjectGroupFindResult projectGroupFindResult,
+        CloneFindResult cloneFindResult,
+        ProjectVersionLicenseFindResult projectVersionLicensesFindResult,
+        ProjectSyncOptions projectSyncOptions
+    ) {
         ProjectSyncModel projectSyncModel = ProjectSyncModel.createWithDefaults(projectNameVersion.getName(), projectNameVersion.getVersion());
 
         // TODO: Handle a boolean property not being set in detect configuration - ie need to determine if this property actually exists in the ConfigurableEnvironment - just omit this one?
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/project/UpdateCustomFieldsOperation.java b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/project/UpdateCustomFieldsOperation.java
index 8df5cf177e..445ffcd40e 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/project/UpdateCustomFieldsOperation.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/project/UpdateCustomFieldsOperation.java
@@ -97,8 +97,10 @@ private void executeCustomFieldOperations(List<CustomFieldOperation> operations,
                     if (option.isPresent()) {
                         values.add(option.get().getHref().string());
                     } else {
-                        throw new DetectUserFriendlyException(String.format("Unable to update custom field '%s', unable to find option for value '%s'", element.getLabel(), value),
-                            ExitCodeType.FAILURE_BLACKDUCK_FEATURE_ERROR);
+                        throw new DetectUserFriendlyException(
+                            String.format("Unable to update custom field '%s', unable to find option for value '%s'", element.getLabel(), value),
+                            ExitCodeType.FAILURE_BLACKDUCK_FEATURE_ERROR
+                        );
                     }
                 }
             }
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/report/BomComponent.java b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/report/BomComponent.java
index cf03cd7612..1c9b345f4c 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/report/BomComponent.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/report/BomComponent.java
@@ -14,9 +14,9 @@
     private String componentVersion;
     private String componentVersionURL;
     private String license;
-    private BomRiskCounts securityRiskCounts = new BomRiskCounts();
-    private BomRiskCounts licenseRiskCounts = new BomRiskCounts();
-    private BomRiskCounts operationalRiskCounts = new BomRiskCounts();
+    private final BomRiskCounts securityRiskCounts = new BomRiskCounts();
+    private final BomRiskCounts licenseRiskCounts = new BomRiskCounts();
+    private final BomRiskCounts operationalRiskCounts = new BomRiskCounts();
 
     public void addSecurityRiskProfile(RiskProfileView securityRiskProfile) {
         addRiskProfile(securityRiskProfile, securityRiskCounts);
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/report/ReportData.java b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/report/ReportData.java
index 1c90003a12..1f3d61b080 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/report/ReportData.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/report/ReportData.java
@@ -18,9 +18,9 @@
     private int totalComponents;
     private LocalDateTime dateTimeOfLatestScan;
 
-    private BomRiskCounts securityRiskCounts = new BomRiskCounts();
-    private BomRiskCounts licenseRiskCounts = new BomRiskCounts();
-    private BomRiskCounts operationalRiskCounts = new BomRiskCounts();
+    private final BomRiskCounts securityRiskCounts = new BomRiskCounts();
+    private final BomRiskCounts licenseRiskCounts = new BomRiskCounts();
+    private final BomRiskCounts operationalRiskCounts = new BomRiskCounts();
 
     private int vulnerabilityRiskNoneCount;
     private int licenseRiskNoneCount;
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/report/pdf/PDFBoxManager.java b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/report/pdf/PDFBoxManager.java
index f291cedbc9..3f3c5a4dd9 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/report/pdf/PDFBoxManager.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/report/pdf/PDFBoxManager.java
@@ -182,8 +182,17 @@ public PDRectangle writeWrappedLink(float x, float y, float width, String linkTe
         return rectangle;
     }
 
-    public PDRectangle writeWrappedVerticalCenteredLink(float x, float cellUpperY, float width, float height, List<String> linkTextLines, String linkURL, PDFont font, float fontSize,
-        Color color) throws IOException {
+    public PDRectangle writeWrappedVerticalCenteredLink(
+        float x,
+        float cellUpperY,
+        float width,
+        float height,
+        List<String> linkTextLines,
+        String linkURL,
+        PDFont font,
+        float fontSize,
+        Color color
+    ) throws IOException {
         PDRectangle rectangle = writeWrappedVerticalCenteredText(x, cellUpperY, width, height, linkTextLines, font, fontSize, color);
         addAnnotationLinkRectangle(rectangle.getLowerLeftX(), rectangle.getLowerLeftY(), rectangle.getWidth(), rectangle.getHeight(), linkURL);
         return rectangle;
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/report/pdf/RiskReportPdfWriter.java b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/report/pdf/RiskReportPdfWriter.java
index b5354253df..a3d9399ee2 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/blackduck/report/pdf/RiskReportPdfWriter.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/blackduck/report/pdf/RiskReportPdfWriter.java
@@ -27,17 +27,17 @@
     public static String BASIC_RED = "#b52b24";
     public static String SALMON_RED = "#eca4a0";
 
-    private String CRITICAL_RISK = "Critical Risk";
-    private String HIGH_RISK = "High Risk";
-    private String MED_RISK = "Medium Risk";
-    private String LOW_RISK = "Low Risk";
-    private String NO_RISK = "No Risk";
-
-    private IntLogger logger;
-    private FontLoader fontLoader;
-    private FontLoader boldFontLoader;
-    private Color textColor;
-    private float fontSize;
+    private final String CRITICAL_RISK = "Critical Risk";
+    private final String HIGH_RISK = "High Risk";
+    private final String MED_RISK = "Medium Risk";
+    private final String LOW_RISK = "Low Risk";
+    private final String NO_RISK = "No Risk";
+
+    private final IntLogger logger;
+    private final FontLoader fontLoader;
+    private final FontLoader boldFontLoader;
+    private final Color textColor;
+    private final float fontSize;
 
     private PDFBoxManager pdfManager;
     private PDFont font;
@@ -132,11 +132,14 @@ private PDRectangle writeSummaryTables(float pageWidth, float startingHeight, Re
 
         float height = startingHeight - 40;
         writeSummaryTable(center - 180, height, "Security Risk", reportData.getVulnerabilityRiskCriticalCount(), reportData.getVulnerabilityRiskHighCount(), reportData.getVulnerabilityRiskMediumCount(),
-            reportData.getVulnerabilityRiskLowCount(), reportData.getVulnerabilityRiskNoneCount(), reportData.getTotalComponents());
+            reportData.getVulnerabilityRiskLowCount(), reportData.getVulnerabilityRiskNoneCount(), reportData.getTotalComponents()
+        );
         writeSummaryTable(center, height, "License Risk", -1, reportData.getLicenseRiskHighCount(), reportData.getLicenseRiskMediumCount(), reportData.getLicenseRiskLowCount(),
-            reportData.getLicenseRiskNoneCount(), reportData.getTotalComponents());
+            reportData.getLicenseRiskNoneCount(), reportData.getTotalComponents()
+        );
         PDRectangle rectangle = writeSummaryTable(center + 180, height, "Operational Risk", -1, reportData.getOperationalRiskHighCount(), reportData.getOperationalRiskMediumCount(),
-            reportData.getOperationalRiskLowCount(), reportData.getOperationalRiskNoneCount(), reportData.getTotalComponents());
+            reportData.getOperationalRiskLowCount(), reportData.getOperationalRiskNoneCount(), reportData.getTotalComponents()
+        );
         logger.trace("Finished writing the summary tables.");
         return rectangle;
     }
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/codelocation/CreateBdioCodeLocationsFromDetectCodeLocationsOperation.java b/src/main/java/com/synopsys/integration/detect/workflow/codelocation/CreateBdioCodeLocationsFromDetectCodeLocationsOperation.java
index 7bb6b44573..653f0c162b 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/codelocation/CreateBdioCodeLocationsFromDetectCodeLocationsOperation.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/codelocation/CreateBdioCodeLocationsFromDetectCodeLocationsOperation.java
@@ -37,8 +37,7 @@ public BdioCodeLocationResult transformDetectCodeLocations(List<DetectCodeLocati
         return new BdioCodeLocationResult(bdioCodeLocations, codeLocationsAndNames);
     }
 
-    private Map<DetectCodeLocation, String> createCodeLocationNameMap(List<DetectCodeLocation> codeLocations, File detectSourcePath, NameVersion projectNameVersion, String prefix,
-        String suffix) {
+    private Map<DetectCodeLocation, String> createCodeLocationNameMap(List<DetectCodeLocation> codeLocations, File detectSourcePath, NameVersion projectNameVersion, String prefix, String suffix) {
         Map<DetectCodeLocation, String> nameMap = new HashMap<>();
         for (DetectCodeLocation detectCodeLocation : codeLocations) {
             String codeLocationName = codeLocationNameManager.createCodeLocationName(detectCodeLocation, detectSourcePath, projectNameVersion.getName(), projectNameVersion.getVersion(), prefix, suffix);
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/codelocation/DetectCodeLocation.java b/src/main/java/com/synopsys/integration/detect/workflow/codelocation/DetectCodeLocation.java
index 5fb4412149..346314d23c 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/codelocation/DetectCodeLocation.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/codelocation/DetectCodeLocation.java
@@ -15,8 +15,7 @@
     private final String creatorName;
     private final String dockerImageName;
 
-    private DetectCodeLocation(DependencyGraph dependencyGraph, File sourcePath, ExternalId externalId, String creatorName,
-        String dockerImageName) {
+    private DetectCodeLocation(DependencyGraph dependencyGraph, File sourcePath, ExternalId externalId, String creatorName, String dockerImageName) {
         this.dependencyGraph = dependencyGraph;
         this.sourcePath = sourcePath;
         this.externalId = externalId;
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/diagnostic/DiagnosticFileCapture.java b/src/main/java/com/synopsys/integration/detect/workflow/diagnostic/DiagnosticFileCapture.java
index f6c1085235..2cf6e3d932 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/diagnostic/DiagnosticFileCapture.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/diagnostic/DiagnosticFileCapture.java
@@ -31,7 +31,7 @@ private void fileFound(File foundFile) {
 
         try {
             FileUtils.copyFile(foundFile, savedFile);
-            logger.info("Saved file to diagnostics zip: " + foundFile.toString());
+            logger.info("Saved file to diagnostics zip: " + foundFile);
         } catch (IOException e) {
             logger.error("Failed to copy file of interest.", e);
         }
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/diagnostic/DiagnosticSystem.java b/src/main/java/com/synopsys/integration/detect/workflow/diagnostic/DiagnosticSystem.java
index 5095ccb10c..36b18f62d9 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/diagnostic/DiagnosticSystem.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/diagnostic/DiagnosticSystem.java
@@ -31,8 +31,16 @@
     private final DirectoryManager directoryManager;
     private final EventSystem eventSystem;
 
-    public DiagnosticSystem(boolean isExtendedMode, PropertyConfiguration propertyConfiguration, DetectRunId detectRunId, DetectInfo detectInfo, DirectoryManager directoryManager, EventSystem eventSystem,
-        SortedMap<String, String> maskedRawPropertyValues, Set<String> propertyKeys) {
+    public DiagnosticSystem(
+        boolean isExtendedMode,
+        PropertyConfiguration propertyConfiguration,
+        DetectRunId detectRunId,
+        DetectInfo detectInfo,
+        DirectoryManager directoryManager,
+        EventSystem eventSystem,
+        SortedMap<String, String> maskedRawPropertyValues,
+        Set<String> propertyKeys
+    ) {
         this.propertyConfiguration = propertyConfiguration;
         this.detectRunId = detectRunId;
         this.detectInfo = detectInfo;
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/nameversion/DetectorEvaluationNameVersionDecider.java b/src/main/java/com/synopsys/integration/detect/workflow/nameversion/DetectorEvaluationNameVersionDecider.java
index d5398d9da5..f9c4ecca7c 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/nameversion/DetectorEvaluationNameVersionDecider.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/nameversion/DetectorEvaluationNameVersionDecider.java
@@ -13,9 +13,9 @@
 import com.synopsys.integration.util.NameVersion;
 
 public class DetectorEvaluationNameVersionDecider {
-    private DetectorNameVersionDecider detectorNameVersionDecider;
+    private final DetectorNameVersionDecider detectorNameVersionDecider;
 
-    private Logger logger = LoggerFactory.getLogger(getClass());
+    private final Logger logger = LoggerFactory.getLogger(getClass());
 
     public DetectorEvaluationNameVersionDecider(DetectorNameVersionDecider detectorNameVersionDecider) {
         this.detectorNameVersionDecider = detectorNameVersionDecider;
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/nameversion/DetectorNameVersionDecider.java b/src/main/java/com/synopsys/integration/detect/workflow/nameversion/DetectorNameVersionDecider.java
index aab4eeccc8..056cbac4c4 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/nameversion/DetectorNameVersionDecider.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/nameversion/DetectorNameVersionDecider.java
@@ -25,7 +25,7 @@
 import com.synopsys.integration.util.NameVersion;
 
 public class DetectorNameVersionDecider {
-    private Logger logger = LoggerFactory.getLogger(getClass());
+    private final Logger logger = LoggerFactory.getLogger(getClass());
 
     public Optional<NameVersion> decideProjectNameVersion(List<DetectorProjectInfo> projectNamePossibilities, DetectorType preferredBomToolType) {
         NameVersionDecision nameVersionDecision = decideProjectNameVersionFromDetector(projectNamePossibilities, preferredBomToolType);
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/nameversion/decision/ArbitraryNameVersionDecision.java b/src/main/java/com/synopsys/integration/detect/workflow/nameversion/decision/ArbitraryNameVersionDecision.java
index 96ee09af60..6e65aec899 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/nameversion/decision/ArbitraryNameVersionDecision.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/nameversion/decision/ArbitraryNameVersionDecision.java
@@ -30,18 +30,22 @@ public DetectorProjectInfo getChosenDetector() {
     @Override
     public void printDescription(Logger logger) {
         logger.info("The following project names were found: ");
-        logger.info(String.format("\t%s: %s, %s",
+        logger.info(String.format(
+            "\t%s: %s, %s",
             chosenDetector.getDetectorType().name(),
             chosenDetector.getNameVersion().getName(),
-            chosenDetector.getNameVersion().getVersion()));
+            chosenDetector.getNameVersion().getVersion()
+        ));
         for (DetectorProjectInfo projectNamePossibility : otherDetectors) {
-            logger.info(String.format("\t%s: %s, %s",
+            logger.info(String.format(
+                "\t%s: %s, %s",
                 projectNamePossibility.getDetectorType().name(),
                 projectNamePossibility.getNameVersion().getName(),
                 projectNamePossibility.getNameVersion().getVersion()
             ));
         }
-        logger.info(String.format("Chose to use %s at depth %d for project name and version. Override with %s.",
+        logger.info(String.format(
+            "Chose to use %s at depth %d for project name and version. Override with %s.",
             chosenDetector.getDetectorType().name(),
             chosenDetector.getDepth(),
             DetectProperties.DETECT_PROJECT_DETECTOR.getKey()
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/profiling/DetectorTimings.java b/src/main/java/com/synopsys/integration/detect/workflow/profiling/DetectorTimings.java
index 412df5e77c..e7dc8ab98b 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/profiling/DetectorTimings.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/profiling/DetectorTimings.java
@@ -12,9 +12,7 @@
     private final List<Timing<DetectorEvaluation>> extractableTimings;
     private final List<Timing<DetectorEvaluation>> extractionTimings;
 
-    public DetectorTimings(Map<DetectorType, Long> aggregateTimings, List<Timing<DetectorEvaluation>> applicableTimings,
-        List<Timing<DetectorEvaluation>> extractableTimings,
-        List<Timing<DetectorEvaluation>> extractionTimings) {
+    public DetectorTimings(Map<DetectorType, Long> aggregateTimings, List<Timing<DetectorEvaluation>> applicableTimings, List<Timing<DetectorEvaluation>> extractableTimings, List<Timing<DetectorEvaluation>> extractionTimings) {
         this.aggregateTimings = aggregateTimings;
         this.applicableTimings = applicableTimings;
         this.extractableTimings = extractableTimings;
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/project/ProjectNameVersionDecider.java b/src/main/java/com/synopsys/integration/detect/workflow/project/ProjectNameVersionDecider.java
index eada199d5c..8579b9b50f 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/project/ProjectNameVersionDecider.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/project/ProjectNameVersionDecider.java
@@ -56,7 +56,7 @@ public NameVersion decideProjectNameVersion(List<DetectTool> preferredDetectTool
                 .findFirst();
 
             if (chosenTool.isPresent()) {
-                logger.debug(String.format("Using the first ordered tool with project info: %s", tool.toString()));
+                logger.debug(String.format("Using the first ordered tool with project info: %s", tool));
                 break;
             }
         }
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/report/CodeLocationReporter.java b/src/main/java/com/synopsys/integration/detect/workflow/report/CodeLocationReporter.java
index 438f21ebbc..fa707f5207 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/report/CodeLocationReporter.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/report/CodeLocationReporter.java
@@ -12,8 +12,13 @@
 import com.synopsys.integration.detector.base.DetectorEvaluationTree;
 
 public class CodeLocationReporter {
-    public void writeCodeLocationReport(ReportWriter writer, ReportWriter writer2, DetectorEvaluationTree rootEvaluation, Map<CodeLocation, DetectCodeLocation> detectCodeLocationMap,
-        Map<DetectCodeLocation, String> codeLocationNameMap) {
+    public void writeCodeLocationReport(
+        ReportWriter writer,
+        ReportWriter writer2,
+        DetectorEvaluationTree rootEvaluation,
+        Map<CodeLocation, DetectCodeLocation> detectCodeLocationMap,
+        Map<DetectCodeLocation, String> codeLocationNameMap
+    ) {
         CodeLocationDependencyCounter counter = new CodeLocationDependencyCounter();
         Map<DetectCodeLocation, Integer> dependencyCounts = counter.countCodeLocations(codeLocationNameMap.keySet());
         Map<String, Integer> dependencyAggregates = counter.aggregateCountsByCreatorName(dependencyCounts);
@@ -25,8 +30,13 @@ public void writeCodeLocationReport(ReportWriter writer, ReportWriter writer2, D
 
     }
 
-    private void writeBomToolEvaluationDetails(ReportWriter writer, DetectorEvaluation evaluation, Map<DetectCodeLocation, Integer> dependencyCounts, Map<CodeLocation, DetectCodeLocation> detectCodeLocationMap,
-        Map<DetectCodeLocation, String> codeLocationNameMap) {
+    private void writeBomToolEvaluationDetails(
+        ReportWriter writer,
+        DetectorEvaluation evaluation,
+        Map<DetectCodeLocation, Integer> dependencyCounts,
+        Map<CodeLocation, DetectCodeLocation> detectCodeLocationMap,
+        Map<DetectCodeLocation, String> codeLocationNameMap
+    ) {
         for (CodeLocation codeLocation : evaluation.getExtraction().getCodeLocations()) {
             DetectExtractionEnvironment detectExtractionEnvironment = (DetectExtractionEnvironment) evaluation.getExtractionEnvironment();
             DetectCodeLocation detectCodeLocation = detectCodeLocationMap.get(codeLocation);
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/report/ExtractionSummaryReporter.java b/src/main/java/com/synopsys/integration/detect/workflow/report/ExtractionSummaryReporter.java
index f27c14ddd9..e2900a4d36 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/report/ExtractionSummaryReporter.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/report/ExtractionSummaryReporter.java
@@ -15,8 +15,7 @@
 
 public class ExtractionSummaryReporter {
 
-    public void writeSummary(ReportWriter writer, DetectorEvaluationTree rootEvaluation, Map<CodeLocation, DetectCodeLocation> detectableMap, Map<DetectCodeLocation, String> codeLocationNameMap,
-        boolean writeCodeLocationNames) {
+    public void writeSummary(ReportWriter writer, DetectorEvaluationTree rootEvaluation, Map<CodeLocation, DetectCodeLocation> detectableMap, Map<DetectCodeLocation, String> codeLocationNameMap, boolean writeCodeLocationNames) {
         ReporterUtils.printHeader(writer, "Extraction results:");
         boolean printedAny = false;
         for (DetectorEvaluationTree it : rootEvaluation.asFlatList()) {
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/report/ReportListener.java b/src/main/java/com/synopsys/integration/detect/workflow/report/ReportListener.java
index 2874934e9c..9dc520d7f5 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/report/ReportListener.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/report/ReportListener.java
@@ -30,9 +30,14 @@ public static ReportListener createDefault(EventSystem eventSystem) {
         return new ReportListener(eventSystem, new PreparationSummaryReporter(), new ExtractionSummaryReporter(), new SearchSummaryReporter(), new DetectorIssuePublisher(), new ExtractionLogger());
     }
 
-    public ReportListener(EventSystem eventSystem,
-        PreparationSummaryReporter preparationSummaryReporter, ExtractionSummaryReporter extractionSummaryReporter, SearchSummaryReporter searchSummaryReporter, DetectorIssuePublisher detectorIssuePublisher,
-        ExtractionLogger extractionLogger) {
+    public ReportListener(
+        EventSystem eventSystem,
+        PreparationSummaryReporter preparationSummaryReporter,
+        ExtractionSummaryReporter extractionSummaryReporter,
+        SearchSummaryReporter searchSummaryReporter,
+        DetectorIssuePublisher detectorIssuePublisher,
+        ExtractionLogger extractionLogger
+    ) {
         this.eventSystem = eventSystem;
         this.preparationSummaryReporter = preparationSummaryReporter;
         this.extractionSummaryReporter = extractionSummaryReporter;
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/report/output/FormattedOutputManager.java b/src/main/java/com/synopsys/integration/detect/workflow/report/output/FormattedOutputManager.java
index fe6d883093..e2837a4af4 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/report/output/FormattedOutputManager.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/report/output/FormattedOutputManager.java
@@ -99,7 +99,8 @@ public FormattedOutput createFormattedOutput(DetectInfo detectInfo) {
         return Bds.of(detectOperations)
             .filter(operation -> operation.getOperationType() == OperationType.PUBLIC || operation.getStatusType() != StatusType.SUCCESS) //EITHER a public operation or a failed internal operation
             .map(operation -> new FormattedOperationOutput(Operation.formatTimestamp(operation.getStartTime()), Operation.formatTimestamp(operation.getEndTime().orElse(null)), operation.getName(),
-                operation.getStatusType().name()))
+                operation.getStatusType().name()
+            ))
             .toList();
     }
 
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/report/util/ObjectPrinter.java b/src/main/java/com/synopsys/integration/detect/workflow/report/util/ObjectPrinter.java
index f3e1c47712..dc061b70cf 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/report/util/ObjectPrinter.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/report/util/ObjectPrinter.java
@@ -15,7 +15,7 @@
 import com.synopsys.integration.detect.workflow.report.writer.ReportWriter;
 
 public class ObjectPrinter {
-    private static Logger logger = LoggerFactory.getLogger(ObjectPrinter.class);
+    private static final Logger logger = LoggerFactory.getLogger(ObjectPrinter.class);
 
     public static void printObjectPrivate(ReportWriter writer, Object guy) {
         Map<String, String> fieldMap = new HashMap<>();
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/status/DetectStatusLogger.java b/src/main/java/com/synopsys/integration/detect/workflow/status/DetectStatusLogger.java
index 6235f2504a..149070c3f5 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/status/DetectStatusLogger.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/status/DetectStatusLogger.java
@@ -14,11 +14,17 @@
 public class DetectStatusLogger {
 
     private static final List<ExitCodeType> doNotRequireAdvice = Arrays.asList(
-        ExitCodeType.SUCCESS, ExitCodeType.FAILURE_POLICY_VIOLATION,
-        ExitCodeType.FAILURE_BLACKDUCK_CONNECTIVITY, ExitCodeType.FAILURE_PROXY_CONNECTIVITY,
-        ExitCodeType.FAILURE_DETECTOR_REQUIRED, ExitCodeType.FAILURE_BLACKDUCK_VERSION_NOT_SUPPORTED,
-        ExitCodeType.FAILURE_BLACKDUCK_FEATURE_ERROR, ExitCodeType.FAILURE_POLARIS_CONNECTIVITY,
-        ExitCodeType.FAILURE_TIMEOUT, ExitCodeType.FAILURE_CONFIGURATION);
+        ExitCodeType.SUCCESS,
+        ExitCodeType.FAILURE_POLICY_VIOLATION,
+        ExitCodeType.FAILURE_BLACKDUCK_CONNECTIVITY,
+        ExitCodeType.FAILURE_PROXY_CONNECTIVITY,
+        ExitCodeType.FAILURE_DETECTOR_REQUIRED,
+        ExitCodeType.FAILURE_BLACKDUCK_VERSION_NOT_SUPPORTED,
+        ExitCodeType.FAILURE_BLACKDUCK_FEATURE_ERROR,
+        ExitCodeType.FAILURE_POLARIS_CONNECTIVITY,
+        ExitCodeType.FAILURE_TIMEOUT,
+        ExitCodeType.FAILURE_CONFIGURATION
+    );
 
     public void logDetectStatus(IntLogger logger, List<Status> statusSummaries, List<DetectResult> detectResults, List<DetectIssue> detectIssues, List<Operation> detectOperations, ExitCodeType exitCodeType) {
         logger.info("");
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/status/Operation.java b/src/main/java/com/synopsys/integration/detect/workflow/status/Operation.java
index 9cec3aaade..179bc8907e 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/status/Operation.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/status/Operation.java
@@ -15,15 +15,15 @@ public static String formatTimestamp(@Nullable Instant executionTime) {
         return DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.SSS").withZone(ZoneOffset.UTC).format(executionTime.atOffset(ZoneOffset.UTC));
     }
 
-    private Instant startTime;
+    private final Instant startTime;
     @Nullable
     private Instant endTime;
-    private String name;
+    private final String name;
     private StatusType statusType;
     private String[] errorMessages;
-    private OperationType operationType;
+    private final OperationType operationType;
     @Nullable
-    private String phoneHomeKey;
+    private final String phoneHomeKey;
 
     public static Operation of(String name) {
         return of(name, null);
diff --git a/src/main/java/com/synopsys/integration/detect/workflow/status/StatusEventPublisher.java b/src/main/java/com/synopsys/integration/detect/workflow/status/StatusEventPublisher.java
index aa9828df89..4adfcdaaf0 100644
--- a/src/main/java/com/synopsys/integration/detect/workflow/status/StatusEventPublisher.java
+++ b/src/main/java/com/synopsys/integration/detect/workflow/status/StatusEventPublisher.java
@@ -7,7 +7,7 @@
 import com.synopsys.integration.detect.workflow.result.DetectResult;
 
 public class StatusEventPublisher {
-    private EventSystem eventSystem;
+    private final EventSystem eventSystem;
 
     public StatusEventPublisher(EventSystem eventSystem) {
         this.eventSystem = eventSystem;
diff --git a/src/test/java/com/synopsys/integration/detect/battery/detector/BazelBattery.java b/src/test/java/com/synopsys/integration/detect/battery/detector/BazelBattery.java
index 1d8f56a1ea..4293a73358 100644
--- a/src/test/java/com/synopsys/integration/detect/battery/detector/BazelBattery.java
+++ b/src/test/java/com/synopsys/integration/detect/battery/detector/BazelBattery.java
@@ -47,8 +47,7 @@ void bazelMavenJar() {
         test.withToolsValue("BAZEL");
         test.property("detect.bazel.target", "//:ProjectRunner");
         test.property("detect.bazel.workspace.rules", "MAVEN_JAR");
-        test.executableFromResourceFiles(DetectProperties.DETECT_BAZEL_PATH,
-            BAZEL_MAVEN_JAR_OUTPUT1_RESOURCE, BAZEL_MAVEN_JAR_OUTPUT2_RESOURCE, BAZEL_MAVEN_JAR_OUTPUT3_RESOURCE);
+        test.executableFromResourceFiles(DetectProperties.DETECT_BAZEL_PATH, BAZEL_MAVEN_JAR_OUTPUT1_RESOURCE, BAZEL_MAVEN_JAR_OUTPUT2_RESOURCE, BAZEL_MAVEN_JAR_OUTPUT3_RESOURCE);
         test.sourceDirectoryNamed("bazel-maven-jar");
         test.sourceFileNamed("WORKSPACE");
         test.expectBdioResources();
@@ -61,10 +60,7 @@ void bazelHaskellCabalLibraryAll() {
         test.withToolsValue("BAZEL");
         test.property("detect.bazel.target", "//cat_hs/lib/args:args");
         test.property("detect.bazel.workspace.rules", "ALL");
-        test.executableFromResourceFiles(DetectProperties.DETECT_BAZEL_PATH,
-            EMPTY_OUTPUT_RESOURCE,
-            EMPTY_OUTPUT_RESOURCE,
-            BAZEL_HASKELL_CABAL_LIBRARY_OUTPUT_RESOURCE);
+        test.executableFromResourceFiles(DetectProperties.DETECT_BAZEL_PATH, EMPTY_OUTPUT_RESOURCE, EMPTY_OUTPUT_RESOURCE, BAZEL_HASKELL_CABAL_LIBRARY_OUTPUT_RESOURCE);
         test.sourceDirectoryNamed("bazel-haskell-cabal-library-all");
         test.sourceFileNamed("WORKSPACE");
         test.expectBdioResources();
diff --git a/src/test/java/com/synopsys/integration/detect/battery/docker/integration/BlackDuckAssertions.java b/src/test/java/com/synopsys/integration/detect/battery/docker/integration/BlackDuckAssertions.java
index 3d0ce84dd0..5075a9253a 100644
--- a/src/test/java/com/synopsys/integration/detect/battery/docker/integration/BlackDuckAssertions.java
+++ b/src/test/java/com/synopsys/integration/detect/battery/docker/integration/BlackDuckAssertions.java
@@ -81,7 +81,8 @@ public void assertExactCodeLocations(Set<String> codeLocationNames) throws Integ
 
         SetAssertionUtil.assertSetDifferences(createdCodeLocationNames, codeLocationNames,
             expectedMissing -> Assertions.fail(String.format("Expected code location %s but could not find it!", expectedMissing)),
-            extraActual -> Assertions.fail(String.format("An additional code location %s was found but was not expected!", extraActual)));
+            extraActual -> Assertions.fail(String.format("An additional code location %s was found but was not expected!", extraActual))
+        );
     }
 
     public void hasCodeLocations(String... codeLocationNames) throws IntegrationException {
@@ -94,7 +95,8 @@ public void hasCodeLocations(Set<String> codeLocationNames) throws IntegrationEx
 
         SetAssertionUtil.assertSetDifferences(createdCodeLocationNames, codeLocationNames,
             expectedMissing -> Assertions.fail(String.format("Expected code location %s but could not find it!", expectedMissing)),
-            extraActual -> {/* no-op, extra code locations fine, only checking it HAS the given. */});
+            extraActual -> {/* no-op, extra code locations fine, only checking it HAS the given. */}
+        );
     }
 
     public void hasComponents(String... componentNames) throws IntegrationException {
diff --git a/src/test/java/com/synopsys/integration/detect/battery/docker/integration/BlackDuckTestConnection.java b/src/test/java/com/synopsys/integration/detect/battery/docker/integration/BlackDuckTestConnection.java
index 43b2c00d63..37f16f456f 100644
--- a/src/test/java/com/synopsys/integration/detect/battery/docker/integration/BlackDuckTestConnection.java
+++ b/src/test/java/com/synopsys/integration/detect/battery/docker/integration/BlackDuckTestConnection.java
@@ -49,8 +49,15 @@ public ReportService createReportService() {
         HttpUrl blackDuckUrl = blackDuckServicesFactory.getBlackDuckHttpClient().getBlackDuckUrl();
         IntegrationEscapeUtil integrationEscapeUtil = blackDuckServicesFactory.createIntegrationEscapeUtil();
         long reportServiceTimeout = 120 * 1000;
-        return new ReportService(blackDuckServicesFactory.getGson(), blackDuckUrl, blackDuckServicesFactory.getBlackDuckApiClient(), blackDuckServicesFactory.getApiDiscovery(), new BufferedIntLogger(), integrationEscapeUtil,
-            reportServiceTimeout);
+        return new ReportService(
+            blackDuckServicesFactory.getGson(),
+            blackDuckUrl,
+            blackDuckServicesFactory.getBlackDuckApiClient(),
+            blackDuckServicesFactory.getApiDiscovery(),
+            new BufferedIntLogger(),
+            integrationEscapeUtil,
+            reportServiceTimeout
+        );
     }
 
     public String getBlackduckUrl() {
diff --git a/src/test/java/com/synopsys/integration/detect/battery/docker/integration/DetectOnDetectTest.java b/src/test/java/com/synopsys/integration/detect/battery/docker/integration/DetectOnDetectTest.java
index 9132f41de2..47d1423296 100644
--- a/src/test/java/com/synopsys/integration/detect/battery/docker/integration/DetectOnDetectTest.java
+++ b/src/test/java/com/synopsys/integration/detect/battery/docker/integration/DetectOnDetectTest.java
@@ -48,13 +48,15 @@ void detectOnDetect() throws IOException, IntegrationException {
 
             dockerAssertions.bdioFiles(6); //7 code locations, 6 bdio, 1 signature scanner
 
-            blackduckAssertions.hasCodeLocations("src/detect-on-detect-docker/happy-path scan",
+            blackduckAssertions.hasCodeLocations(
+                "src/detect-on-detect-docker/happy-path scan",
                 "detect-on-detect-docker/happy-path/detectable/com.synopsys.integration/detectable/7.1.1-SNAPSHOT gradle/bom",
                 "detect-on-detect-docker/happy-path/com.synopsys.integration/synopsys-detect/7.1.1-SNAPSHOT gradle/bom",
                 "detect-on-detect-docker/happy-path/common/com.synopsys.integration/common/7.1.1-SNAPSHOT gradle/bom",
                 "detect-on-detect-docker/happy-path/common-test/com.synopsys.integration/common-test/7.1.1-SNAPSHOT gradle/bom",
                 "detect-on-detect-docker/happy-path/configuration/com.synopsys.integration/configuration/7.1.1-SNAPSHOT gradle/bom",
-                "detect-on-detect-docker/happy-path/detector/com.synopsys.integration/detector/7.1.1-SNAPSHOT gradle/bom");
+                "detect-on-detect-docker/happy-path/detector/com.synopsys.integration/detector/7.1.1-SNAPSHOT gradle/bom"
+            );
 
             blackduckAssertions.hasComponents("jackson-core");
         }
diff --git a/src/test/java/com/synopsys/integration/detect/battery/docker/util/DetectDockerTestRunner.java b/src/test/java/com/synopsys/integration/detect/battery/docker/util/DetectDockerTestRunner.java
index d836ca4398..8d3cf34e14 100644
--- a/src/test/java/com/synopsys/integration/detect/battery/docker/util/DetectDockerTestRunner.java
+++ b/src/test/java/com/synopsys/integration/detect/battery/docker/util/DetectDockerTestRunner.java
@@ -17,7 +17,7 @@
     private final String testId;
     private final String imageName;
     private DockerImageProvider dockerImageProvider;
-    private DockerTestDirectories dockerTestDirectories;
+    private final DockerTestDirectories dockerTestDirectories;
     private String workingDirectory = WORKING_DIRECTORY_DEFAULT;
 
     // DetectDockerTestRunner must be created/declared in try-with-resources block to take advantage of "close" method (cleans up resources)
diff --git a/src/test/java/com/synopsys/integration/detect/battery/docker/util/DockerAssertions.java b/src/test/java/com/synopsys/integration/detect/battery/docker/util/DockerAssertions.java
index 8a50d6736a..06b3e607e0 100644
--- a/src/test/java/com/synopsys/integration/detect/battery/docker/util/DockerAssertions.java
+++ b/src/test/java/com/synopsys/integration/detect/battery/docker/util/DockerAssertions.java
@@ -18,7 +18,7 @@
 import com.synopsys.integration.util.NameVersion;
 
 public class DockerAssertions {
-    private DockerDetectResult dockerDetectResult;
+    private final DockerDetectResult dockerDetectResult;
     private final File outputDirectory;
     private final File bdioDirectory;
     private FormattedOutput statusJson = null;
@@ -79,7 +79,7 @@ private FormattedOutput locateStatusJson() {
 
         File runs = new File(outputDirectory, "runs");
         File[] runDirectories = runs.listFiles();
-        Assertions.assertNotNull(runDirectories, "Could not find any run directories, looked in: " + runs.toString());
+        Assertions.assertNotNull(runDirectories, "Could not find any run directories, looked in: " + runs);
         Assertions.assertEquals(1, runDirectories.length, "There should be exactly one run directory (from this latest run).");
 
         File run = runDirectories[0];
@@ -105,7 +105,7 @@ public void atLeastOneBdioFile() {
     public void logContainsPattern(String pattern) {
         Assertions.assertNotNull(pattern);
         Pattern regex = Pattern.compile("(?s).*" + pattern + ".*", Pattern.MULTILINE);
-        Assertions.assertTrue(regex.matcher(dockerDetectResult.getDetectLogs()).matches(), "Expected logs to contain '" + regex.toString() + "' but they did not.");
+        Assertions.assertTrue(regex.matcher(dockerDetectResult.getDetectLogs()).matches(), "Expected logs to contain '" + regex + "' but they did not.");
     }
 
     public void logContains(String thing) {
@@ -140,11 +140,13 @@ public void bdioFiles(int bdioCount) {
 
     public void bdioFileCreated(String requiredBdioFilename) {
         checkBdioDirectory();
-        Assertions.assertTrue(Arrays.asList(bdioDirectory.listFiles()).stream()
+        Assertions.assertTrue(
+            Arrays.asList(bdioDirectory.listFiles()).stream()
                 .map(File::getName)
                 .filter(requiredBdioFilename::equals)
                 .findAny().isPresent(),
-            String.format("Expected BDIO file %s, but it was not created", requiredBdioFilename));
+            String.format("Expected BDIO file %s, but it was not created", requiredBdioFilename)
+        );
     }
 
     public File getOutputDirectory() {
diff --git a/src/test/java/com/synopsys/integration/detect/battery/docker/util/DockerDetectResult.java b/src/test/java/com/synopsys/integration/detect/battery/docker/util/DockerDetectResult.java
index 8f2030129e..02378baebc 100644
--- a/src/test/java/com/synopsys/integration/detect/battery/docker/util/DockerDetectResult.java
+++ b/src/test/java/com/synopsys/integration/detect/battery/docker/util/DockerDetectResult.java
@@ -1,8 +1,8 @@
 package com.synopsys.integration.detect.battery.docker.util;
 
 public class DockerDetectResult {
-    private int exitCode;
-    private String detectLogs;
+    private final int exitCode;
+    private final String detectLogs;
 
     public DockerDetectResult(int exitCode, String detectLogs) {
         this.exitCode = exitCode;
diff --git a/src/test/java/com/synopsys/integration/detect/battery/docker/util/DockerTestDirectories.java b/src/test/java/com/synopsys/integration/detect/battery/docker/util/DockerTestDirectories.java
index 4f30554b54..bbce125c3e 100644
--- a/src/test/java/com/synopsys/integration/detect/battery/docker/util/DockerTestDirectories.java
+++ b/src/test/java/com/synopsys/integration/detect/battery/docker/util/DockerTestDirectories.java
@@ -19,7 +19,7 @@
 public class DockerTestDirectories {
     private final File testDirectory;
     private final File testResultDirectory;
-    private List<Bind> bindings = new ArrayList<>();
+    private final List<Bind> bindings = new ArrayList<>();
 
     private File bdioOutputDirectory;
     private File detectOutputDirectory;
diff --git a/src/test/java/com/synopsys/integration/detect/battery/docker/util/SharedDockerTestRunner.java b/src/test/java/com/synopsys/integration/detect/battery/docker/util/SharedDockerTestRunner.java
index cf911e82ca..cfbe73e3f1 100644
--- a/src/test/java/com/synopsys/integration/detect/battery/docker/util/SharedDockerTestRunner.java
+++ b/src/test/java/com/synopsys/integration/detect/battery/docker/util/SharedDockerTestRunner.java
@@ -9,8 +9,7 @@
     public BlackDuckAssertions blackDuckAssertions;
     public DetectCommandBuilder command;
 
-    public SharedDockerTestRunner(DetectDockerTestRunner runner, BlackDuckTestConnection blackDuckTestConnection, BlackDuckAssertions blackDuckAssertions,
-        DetectCommandBuilder detectCommandBuilder) {
+    public SharedDockerTestRunner(DetectDockerTestRunner runner, BlackDuckTestConnection blackDuckTestConnection, BlackDuckAssertions blackDuckAssertions, DetectCommandBuilder detectCommandBuilder) {
         this.runner = runner;
         this.blackDuckTestConnection = blackDuckTestConnection;
         this.blackDuckAssertions = blackDuckAssertions;
diff --git a/src/test/java/com/synopsys/integration/detect/boot/ProductBootTest.java b/src/test/java/com/synopsys/integration/detect/boot/ProductBootTest.java
index e5e183f904..b534304c2f 100644
--- a/src/test/java/com/synopsys/integration/detect/boot/ProductBootTest.java
+++ b/src/test/java/com/synopsys/integration/detect/boot/ProductBootTest.java
@@ -71,8 +71,7 @@ private ProductRunData testBoot(BlackDuckDecision blackDuckDecision, ProductBoot
         return testBoot(blackDuckDecision, productBootOptions, null);
     }
 
-    private ProductRunData testBoot(BlackDuckDecision blackDuckDecision, ProductBootOptions productBootOptions,
-        BlackDuckConnectivityResult blackDuckconnectivityResult) throws DetectUserFriendlyException, IOException, IntegrationException {
+    private ProductRunData testBoot(BlackDuckDecision blackDuckDecision, ProductBootOptions productBootOptions, BlackDuckConnectivityResult blackDuckconnectivityResult) throws DetectUserFriendlyException, IOException, IntegrationException {
         ProductBootFactory productBootFactory = Mockito.mock(ProductBootFactory.class);
         Mockito.when(productBootFactory.createPhoneHomeManager(Mockito.any())).thenReturn(null);
 
diff --git a/src/test/java/com/synopsys/integration/detect/configuration/DeprecatedPropertyReferenceTest.java b/src/test/java/com/synopsys/integration/detect/configuration/DeprecatedPropertyReferenceTest.java
index f14a730ddb..8b72c129aa 100644
--- a/src/test/java/com/synopsys/integration/detect/configuration/DeprecatedPropertyReferenceTest.java
+++ b/src/test/java/com/synopsys/integration/detect/configuration/DeprecatedPropertyReferenceTest.java
@@ -18,21 +18,21 @@
 
 @Disabled // For now these tests are not actually helping anyone. Will be tagged with "lint" in the future.
 public class DeprecatedPropertyReferenceTest {
-    private List<String> fileTypesToCheck = Bds.listOf(
+    private final List<String> fileTypesToCheck = Bds.listOf(
         "java",
         "kt",
         "groovy",
         "kts"
     );
 
-    private List<String> excludedFileNames = Bds.of(Bds.listOf(
+    private final List<String> excludedFileNames = Bds.of(Bds.listOf(
         DetectConfigurationFactory.class,
         DetectableOptionFactory.class,
         DetectProperties.class,
         this.getClass()
     )).map(Class::getSimpleName).toList();
 
-    private List<String> deprecatedPropertyReferenceStrings = Bds.of(DetectProperties.allProperties().getProperties())
+    private final List<String> deprecatedPropertyReferenceStrings = Bds.of(DetectProperties.allProperties().getProperties())
         .filter(it -> it.getPropertyDeprecationInfo() != null)
         .map(Property::getKey)
         .map(String::toUpperCase)
diff --git a/src/test/java/com/synopsys/integration/detect/testutils/DependencyGraphResourceTestUtil.java b/src/test/java/com/synopsys/integration/detect/testutils/DependencyGraphResourceTestUtil.java
index db520b766a..2adbaedbe7 100644
--- a/src/test/java/com/synopsys/integration/detect/testutils/DependencyGraphResourceTestUtil.java
+++ b/src/test/java/com/synopsys/integration/detect/testutils/DependencyGraphResourceTestUtil.java
@@ -62,7 +62,7 @@ public static void assertSummaries(GraphSummary expected, GraphSummary actual) {
         Set<T> extraActual = new HashSet<>(actual);
         extraActual.removeAll(expected);
 
-        assertEquals(0, missingExpected.size(), title + ": Found missing expected " + missingExpected.toString());
-        assertEquals(0, extraActual.size(), title + ": Found extra actual " + extraActual.toString());
+        assertEquals(0, missingExpected.size(), title + ": Found missing expected " + missingExpected);
+        assertEquals(0, extraActual.size(), title + ": Found extra actual " + extraActual);
     }
 }
diff --git a/src/test/java/com/synopsys/integration/detect/tool/impactanalysis/ImpactAnalysisTestIT.java b/src/test/java/com/synopsys/integration/detect/tool/impactanalysis/ImpactAnalysisTestIT.java
index a743bcbb36..ae5e7e5f77 100644
--- a/src/test/java/com/synopsys/integration/detect/tool/impactanalysis/ImpactAnalysisTestIT.java
+++ b/src/test/java/com/synopsys/integration/detect/tool/impactanalysis/ImpactAnalysisTestIT.java
@@ -34,7 +34,7 @@
 
     @TempDir
     File outputDirAsPath;
-    private IntLogger logger = new BufferedIntLogger();
+    private final IntLogger logger = new BufferedIntLogger();
 
     @Test
     public void testImpactAnalysisForDetect() throws IOException, IntegrationException {
@@ -54,8 +54,13 @@ public void testImpactAnalysisForDetect() throws IOException, IntegrationExcepti
         GenerateImpactAnalysisOperation generateImpactAnalysisOperation = new GenerateImpactAnalysisOperation();
         Path impactAnalysisFile = generateImpactAnalysisOperation.generateImpactAnalysis(toScan, impactAnalysisCodeLocationName, outputDirectory);
 
-        ImpactAnalysisBatchRunner impactAnalysisBatchRunner = new ImpactAnalysisBatchRunner(logger, blackDuckServicesFactory.getBlackDuckApiClient(), blackDuckServicesFactory.getApiDiscovery(), new NoThreadExecutorService(),
-            blackDuckServicesFactory.getGson());
+        ImpactAnalysisBatchRunner impactAnalysisBatchRunner = new ImpactAnalysisBatchRunner(
+            logger,
+            blackDuckServicesFactory.getBlackDuckApiClient(),
+            blackDuckServicesFactory.getApiDiscovery(),
+            new NoThreadExecutorService(),
+            blackDuckServicesFactory.getGson()
+        );
         ImpactAnalysisUploadService impactAnalysisUploadService = new ImpactAnalysisUploadService(impactAnalysisBatchRunner, blackDuckServicesFactory.createCodeLocationCreationService());
         ImpactAnalysisUploadOperation impactAnalysisUploadOperation = new ImpactAnalysisUploadOperation(impactAnalysisUploadService);
         CodeLocationCreationData<ImpactAnalysisBatchOutput> creationData = impactAnalysisUploadOperation.uploadImpactAnalysis(impactAnalysisFile, projectNameVersion, impactAnalysisCodeLocationName);
diff --git a/src/test/java/com/synopsys/integration/detect/workflow/blackduck/report/StringManagerTest.java b/src/test/java/com/synopsys/integration/detect/workflow/blackduck/report/StringManagerTest.java
index 15d91aa721..67ff2583a6 100644
--- a/src/test/java/com/synopsys/integration/detect/workflow/blackduck/report/StringManagerTest.java
+++ b/src/test/java/com/synopsys/integration/detect/workflow/blackduck/report/StringManagerTest.java
@@ -35,8 +35,40 @@ public void testStringWrapping(StringWrappingData stringWrappingData) throws IOE
     static Stream<StringWrappingData> provideStringWrappingDataStream() {
         String longText = "reallyreallylonglong reallyreallylonglong reallyreallylonglonglong reallyreallylonglong reallyreallylonglong reallyreally longlonglong pants";
         List<String> longResults = Arrays.asList("reallyreallylo", "nglong", "reallyreallylo", "nglonglong", "reallyreallylonglong", "reallyreallylonglong", "reallyreallylo", "nglong", "reallyreally", "longlonglong", "pants");
-        List<String> shortResults = Arrays.asList("rea", "llyr", "ea", "llyl", "on", "gl", "on", "rea", "llyr", "ea", "llyl", "on", "gl", "on", "gl", "on", "reallyreallylonglong", "reallyreallylonglong", "rea", "llyr", "ea", "llyl", "on",
-            "gl", "on", "reallyreally", "lon", "gl", "on", "gl", "on", "pants");
+        List<String> shortResults = Arrays.asList(
+            "rea",
+            "llyr",
+            "ea",
+            "llyl",
+            "on",
+            "gl",
+            "on",
+            "rea",
+            "llyr",
+            "ea",
+            "llyl",
+            "on",
+            "gl",
+            "on",
+            "gl",
+            "on",
+            "reallyreallylonglong",
+            "reallyreallylonglong",
+            "rea",
+            "llyr",
+            "ea",
+            "llyl",
+            "on",
+            "gl",
+            "on",
+            "reallyreally",
+            "lon",
+            "gl",
+            "on",
+            "gl",
+            "on",
+            "pants"
+        );
 
         return Stream.of(
             new StringWrappingData(1.0f, "happymonkeyday", 5, Arrays.asList("happymonke", "yday"))
